Date: 31 July 1980 13:06-EDT
From: Alan Bawden <ALAN at MIT-MC>
To: RP at MIT-MC
cc: CUBE-HACKERS at MIT-MC

    Date: 31 JUL 1980 1006-EDT
    From: RP at MIT-MC (Richard Pavelle)

    IS IT POSSIBLE?

The Singmaster notes claim that Thistlethwaite had an 85 twist
algorithm in an addenda dated November 30, 1979.  I presume that since
then Thistlethwaite has continued to cube-hack, so why not 50 (or even
41)?

It should be noted that Singmaster insists on counting a 180 twist as
ONE twist, so I presume that the 85 number is measured that way.  How
is Gardner counting?

It is certainly possible.  If you count twists Singmaster's way, you
can show that there are positions at least 18 twists away from home.
There is nothing to suggest that this might not in fact be the
maximum.  So there might be room for Thistlethwaite to lower his
number all the way to 18!

(If you count 180 twists as TWO twists, then a similar proof shows
that there are positions 21 twists away from home.  In a past message
I reported that some of us had proved the existence of positions as
far away from home as around 30.  I believe that the reasoning that
led to such a high number was incorrect.  (Although I cannot prove
that there AREN'T positions that far away, I now believe that I have
never seen a proof that there ARE.))
Date: 31 Jul 1980 10:34 am PDT (Thursday)
From: Woods at PARC-MAXC
Subject: Re: 180 degree twists
In-reply-to: ALAN's message of 31 July 1980 13:06-EDT
To: CUBE-HACKERS at MIT-MC

It appears that Singmaster, Thistlethwaite, and just about all the cube
hackers I know at and around Stanford consider anything you can do
with one wrist motion to be a single twist.  Since this gives a more
accurate measure of how complicated a sequence is, I'm happy with it.
Why do you folks at MIT insist that you're right and the world is wrong?

(I admit it complicates the notation.  My own cube notation uses two chars
per twist, one being the face and the other being the direction: left-arrow
for counterclockwise, right-arrow for clockwise, down-arrow for 180 -- isn't
extended ASCII wonderful?)

	-- Don.

ACW@MIT-AI 07/31/80 14:28:38
To: cube-lovers at MIT-MC
Yeah, we have a prejudice against regarding
180-degree twists as atomic.  I understand
your feeling that a 180-degree twist is
intuitively a single operation.

Many of the cube-hackers at MIT became
interested in the mathematical aspects of
the cube, and the preference for counting
quarter twists arose from this (admittedly
rather Spartan) mathematical viewpoint.

When the cube first appeared, the mathematicians
among us instantly exclaimed, with great
delight, "Wow, here we have a group, whose
elements are possible manipulations of the
cube, and whose binary operation consists
of following one manipulation with another."
We immediately got interested in group-
theory questions like, "What is the order
of this group?"  "Does it have any interesting
subgroups?" and, in general "What kind of
object is this group?  Does understanding
it help us solve the cube better?"

There are several common ways of representing
groups.  One is as a subgroup of a permutation
group.  This doesn't really help in the case of
the Hungarian Cube, because it is too close
to what the cube really is: few new facts or
insights are revealed.  Another way is with
generators and relations.  This means, to list
a few basic group elements from which the whole
group may be derived by multiplying them together.

We soon figured out (along with hundreds of other
mathematically-inclined cube-hackers) that the
whole group of possible manipulations could be
generated from six elements: the quarter-twists
of each of the six faces.  This observation
later turned out to be crucial in calculating
the order (number of possible states) of the group.

Hence our predilection for counting quarter-turns.
The half-turns were already accounted for, and
we thought of them as two juxtaposed quarter-turns.
I guess some of us believe that the mathematical
structure of the cube group is built on quarter-
turns.  Those whose delight in the cube is not
mathematical will not agree: after all,
a half-twist is as easy as a quarter-twist
to perform.  But you will miss things like
the fact that many useful manipulations
are 8, 12, or 24 quarter-turns long.  If you
count half-turns, you get a whole spectrum
of random move counts, thus missing some
fundamental  (and as yet little-understood)
kinship between these manipulations.

Of course, if you are not interested in such
things, any measure of complexity (why not
count equator twists?  why not penalize for
counter-clockwise twists, since they are
marginally harder for right-handed people to
do?) will suffice.

   ---Wechsler

Date: 31 Jul 1980 16:44 PDT
Sender: McKeeman.PA at PARC-MAXC
Subject: Re:  The shortest solution?
In-reply-to: ALAN's message of 31 July 1980 13:06-EDT
To: Alan Bawden <ALAN at MIT-MC>
From: (Bill) McKeeman
cc: CUBE-HACKERS at MIT-MC, Lynn.ES

A lower bound on the number of twists can be derived as follows:  There are
4.3*10^19 distinct reachable arrangments of the cube.  Suppose the moves are
restricted to the (more than sufficient) set RLFBUD.  Then there are at most six
independent choices at each step and the number of reachable places is bounded
by 6^n.  That gives
	6^25 < 4.3*10^19 < 6^26,
or 26 moves as the (probably unachievable) minimum.  If all single-hand-motion
twists,  R RR RRR L LL .... DDD are allowed, there are 18 choices, giving
	18^15 < 4.3*10^19 < 18^16,
or 16 moves as a minimum.  This isn't very interesting since Singmaster has
examples 18 twists away.  If the orientation of the center squares is also
considered, then the combinatoric is 8.8*10^22, and the minima are, respectively,
30 and 19.
Date: 12 Aug 1980 15:10 PDT
From: McKeeman at PARC-MAXC
Subject: Singmaster's talk at Stanford
To: Cube-lovers at MIT-MC

David talked at ICME (Int. Conf. Math. Ed.) in Berkeley on 8/11 about using the
cube to teach group theory.  He talked to some Rubniks at Stanford this noon.
Among the tidbits:

Notes on Rubik's 'Magic Cube', Fifth Edition, Preliminary Version, 75 pgs., $5.
Including: A Detailed Step-By-Step Solution, Thistlewaite's Best Algorithm (52
moves), Conway's Monoswop, Rubik's Duotwist and much more.   Write:
David Singmaster, Polytechnic of the South Bank, London, SE1 0AA, UK.

He brought a 3x3x2 domino version, and a 2x2x2 Stanford homebrew which is
apparently nearly identical to a Japanese patent showed up.  The 2x2x2 is
conceptually just a pasting of big overlapping corners on the standard 3x3x3
version although the one we saw was nicely machined in brass and some kind of
ivory-like material.

Singmaster counts double twists, e.g., R^2, as single moves.  He doesn't see much
use for the IJK whole-cube moves.

The Thistlewaite algorithm goes from subgroup to subgroup as follows:

Starting with a random cube, reachable by
      closure(F,B,R,L,U,D) = the full group
7 moves to a cube reachable by
      closure(F,B,R,L,U^2,D^2)
13 moves to a cube reachable by
      closure(F,B,R^2,L^2,U^2,D^2)
15 moves to a cube reachable by
      closure(F^2,B^2,R^2,L^2,U^2,D^2)
17 moves to a cube reachable by
      the identity
----
52 moves total.  Singmaster expects the 17 to be 15 by the time he returns to
London.

The Hungarians have cube races. A contestant take his/her cube out of its box
and unscrambles the judges' randomizing in about 50 seconds.   Apparently they
file and lubricate their cubes with loving care to reach such speeds.

The U.S. made white cubes violate no patents because Rubik never applied for
foreign rights.  Hmmmm.   Is that ethical?

Bill




Date: 11 SEP 1980 0016-EDT
From: ALAN at MIT-MC (Alan Bawden)
Subject: How do you maximally randomize a cube?
To: CUBE-HACKERS at MIT-MC


I am interested in maximally distant states of the cube.  I have often
wondered just what a maximally distant state would look like.  I also
wonder HOW MANY of them there are!

Interesting fact (offered without proof (it's not hard)):

Assuming we are counting quarter-twists.  If I hand you a cube in a
maximally distant state, and ask you to solve it in as few twists as
possible, you don't have to think at all in order to know what to do
first!  ANY first twist will bring it closer to home (after that it
gets harder).

Call a state with this property a "local maximum".  Any maximally
distant state is also a local maximum.  Also, any symmetric state is a
local maximum.  This doesn't mean that a maximally distant state is
symmetric, but it does get you thinking along those lines!


Date: 25 SEP 1980 0859-EDT
Date:     5 December 1980 0022-est
From:     Ronald B. Harvey           <RHarvey at MIT-Multics>
Subject:  Your mail of 4 DEC 1980 2300-EST
To:       DR at MIT-MC
Cc:       CUBE-LOVERS at MIT-MC


Welcome to the Cube-hackers !!

Note that this is my first contribution, although I have read all
previous mail.

    First of all, there are other people who solve the cube (I, myself,
average about a minute and three quarters).  It is also part of the lore
that there are people (overseas) who do it in 50 seconds or less.

Second, while I personally get eight corners first, and then randomly go
about fixing the edge cubies two at a time or so, David Singmaster, who
publishes some notes in England (availability in previous mail),
included, in his latest edition his algorithm, which proceeds as
follows:
     Solve TOP edges
     Solve TOP corners
     Flip cube so that TOP is BOTTOM from now on
     Solve MIDDLE edges
     Solve TOP edges
     Solve TOP corners

Finally, in regards to the 'most optimum solution' (also known as God's
Algorithm), a person by the name of Morwen B Thistlethwaite (that's from
memory - I left my notes at work) is mentioned all over Singmaster's
notes as contributing algorithms.  Yes, he does use a program, and his
algorithm at the time of the 5th Edition took somewhere around 50 moves.
Date: 14 December 1980 1916-EST (Sunday)
From: Dan Hoey, Jim Saxe
To: Cube-lovers at MIT-MC
Subject:  Symmetry and Local Maxima (long message)
Reply-To: Dan Hoey at CMU-10A
Message-Id: <14Dec80 191649 DH51@CMU-10A>

                      Symmetry and Local Maxima
				-- Dan Hoey
				   Jim Saxe

1. Introduction
===============

	In this note, we attempt to give a uniform treatment of the
issues raised in the recent discussions of symmetry and local
maxima.  We have attempted to restate and justify the correct
observations on these subjects that have been made in mail to
cube-lovers in recent days and also to refute a number of incorrect
ones.  We include a description of 71 local maxima, which we believe
to be all of the local maxima that can be proven using known
techniques other than exhaustive search.

	We let G denote the "Rubik group", consisting of all
transformations of the cube which can be achieved by twisting
faces.  G does not include transformations which require movements
of the whole cube.  Also, G does not take account of the
orientations of the face centers.  We will defer discussion of the
Supergroup, in which face center orientations are significant (but
whole-cube motions still excluded), to Section 5 of this message.
We will sometimes (particularly towards the end of this message)
take the liberty of identifying a transformation with the position
reached by applying that transformation to SOLVED.

	We let Q = {U, D, L, R, F, B, U', D', L', R', F', B'} be
the set of all possible quarter-twists.  Q is a subset, but not a
subgroup, of G.  The set {U, D, L, R, F, B} of all clockwise
quarter-twists is called Q+, and the set {UU, DD, LL, RR, FF, BB}
of all half-twists is called Q2.  The "length" of an element s of G
(denoted |s|) is the length of the shortest sequence of quarter-
twists whose product is s.  The "distance" between two elements, s
and t, of G is the length of the shortest r such that t = s r.  Note
that the length of s is same as the distance between s and the
identity permutation.  Note also that we are measuring distance in
the "quarter-twist metric."  We defer discussion of the "half-twist
metric" to Section 5.

	Two elements, s and t, of G are "neighbors" if there is
some q in Q such that t = s q (i.e., if the distance between s and
t is 1).  An element, s, of G is said to be a "local maximum" if no
neighbor of s is longer than s.  It is a consequence of parity
considerations that all neighbors of any local maximum, s, have the
same length, namely |s| - 1.  Conversely, any element s of G (except
for the identity permutation) whose neighbors are all equally long
must be a local maximum.  [Anyone who *still* doesn't understand why
neighbors cannot be equally long in the quarter-twist metric should
either send mail to one of the authors, or learn about even and odd
permutations from a book on group theory and think about how a
quarter-twist permutes the positions of the corner cubies.]

2. Symmetry
===========

	It has been asserted that any "symmetric" element of G must
have all its neighbors equally long and must therefore be a local
maximum (or the identity).  The first occurrence of this assertion
in cube-lovers mail was by Alan Bawden in his message of 10 Sep
1980, 11:09 pm PDT.  The recent spate of messages on this subject
has made it clear that Bawden's notion of symmetry was not clearly
defined.  In what follows, we make the notion of symmetry more
precise and categorize those kinds of symmetry for which the above
assertion is correct.

	We let M denote the group generated by all rotations and
reflections of the whole cube and C denote the subgroup of M which
contains only the rotations.  C has 24 elements (any of the six
faces can be put on top, after which any of the four adjacent faces
can be put in front, uniquely determining the positions of the
remaining faces).  M has 48 elements (six choices for U, then four
for F, then two for L).  [Our use of G and C agrees with that in
McKeeman's note of 8 Dec 1980, 17:03 PST.  Hoey's note of 9 Dec
1980, 16:38 EST used the letter R rather than C for the latter
group, a practice which we hereby retract.]

	Let G+M be the group of all transformations achievable by
any sequence of face twists and/or whole cube moves, including
reflections.  Note that G is a subgroup of G+M and that the elements
of G are precisely those elements of G+M which leave the positions
of the face centers fixed (to forestall possible confusion, we
remark, at certain risk of belaboring the obvious, that the phrases
"face center positions" and "face center orientations" have
different meanings).  We say that two elements, s and t, of G+M are
"M-conjugates" of each other if there exists some m in M such that
t = m' s m.  We assert the following results without proof because
they are obvious.

    Fact 1:  Any M-conjugate of an element of Q is an element of Q,
	and any M-conjugate of an element of G is an element of G.

    Fact 2:  If two elements of G are M-conjugates, they are equally
	long.

[Anyone who does not consider the preceding facts obvious is urged
to direct further inquiries to one of us rather than bothering
everyone on the mailing list.  The same goes for anyone who believes
that any other assertions made in this message are in error; this
procedure will help to reduce either duplication of erratum notices
or proliferation of false counterexamples.]

	Let W be a subgroup of M.  Then an element s of G is said to
be W-symmetric iff s w = w s (or, equivalently, w s w' = s) for
every w in W.  [This definition is equivalent to Hoey's definition
(9 Dec 1980, 16:38 EST) as we will now show.  By a "recoloring" of
the cube, we intuitively mean an operation which "consistently"
changes the colorings of all facelets of the cube.  Note that the
permutation performed by a recoloring depends not only on the
chosen mapping of colors to colors, but also on the configuration
the cube is in when we start recoloring.  Thus, a particular mapping
of colors to colors doesn't appear to correspond to any fixed
element of G+M.  This is not a particularly satisfying situation.  We
can rectify this situation by always doing the recolorings when the
cube is in the SOLVED state, that is, by thinking of recoloring a
configuration as pre-multiplication of the permutation that
achieves that configuration (from SOLVED) by a recoloring of SOLVED.
More succinctly, two elements, s and t, of G+M are equivalent up to
recoloring iff there is some m in M such that t = m s.  Thus, by
Hoey's definition, an element s of G is W-symmetric iff for every w
in W there is some m in M such that
		s w = m s.
But s doesn't move the face centers.  So the only way m can be chosen
so that m s will leave the face-centers in the same places as s w is
to pick m = w.]

3. Transitivity
===============

	For which choices of W can we guarantee that W-symmetric
patterns are local maxima?  To approach this question, we introduce
the notion of Q-transitivity.  Recall that Q is the set (not a
group) of all quarter-twists.  We define a subgroup W of M to be
"Q-transitive" iff for each two elements p and q of Q there is some
w in W such that q = w' p w.  (Q+-transitivity and Q2-transitivity
are defined analogously) We now come to our principal result:

    Theorem 1:  Let W be any Q-transitive subgroup of M and let s be
        any W-symmetric element of G.  Then any two neighbors of s
	are m-conjugates of each other.

    Proof:  Let p and q be any two elements of Q.  We must show that
        sq is an M-conjugate of sp.  Since W is Q-transitive, produce
        some w in W such that q = w' p w.  Thus,
			s q = s w' p w
			    = w' (s p) w.
        Since W is a subgroup of M, w must be an element of M.  So
	the definition of M-conjugacy is satisfied.
	Q.E.D.

    Corollary:  Let W be any Q-transitive subgroup of M and let s be
        any W-symmetric element of G other than the identity.  Then
        s is a local maximum.

	If an element s of G is both V-symmetric and W-symmetric,
where V and W are subgroups of M, then it follows that s is
V+W-symmetric, where V+W is the closure of the union of V and W
(that is, V+W is the group of all elements of M which can be
expressed as the product of a sequence of elements of the union of
V and W).  Thus we may unambiguously define the "symmetry group" of
any element s of G as the largest subgroup W of M such that s is
W-symmetric.  The elements of this group will be precisely those
elements of M which commute with s.  To see that this set of
elements forms a group, simply note that for any elements v and w
of M that commute with s,
	1.  (v w) s = v (w s) = v (s w) = (v s) w = (s v) w = s (v w),
	    and
	2.  v' s = v' s v v' = v' v s v' = s v'.

	By the corollary to Theorem 1, any element of G (except the
identity) whose symmetry group is Q-transitive is a local maximum.
In order to find local maxima, we will first find the Q-transitive
subgroups of M.  The search for Q-transitive subgroups is simplified
by realizing that the number of elements of any Q-transitive
subgroup W must be a multiple of twelve.  To show this, it will be
useful to introduce another way of looking at the group M, namely
as a group of permutations on the set Q.  We associate each element
m of M with a 1-1 function <m> from Q to Q defined by the rule
		<m>(q) = m' q m    for all q in Q.
These functions form a group under the operation of functional
composition, which we will write in the left-to-right manner so
that (<m>*<n>)(q) is definitionally equivalent to <n>(<m>(q)).  Call
this group <M>.  The function <> which maps each element m of M to
the corresponding element <m> of <M> is an isomorphism as may be
seen by noting that for any two elements m and n of M and for any
element q of Q,
		(<m>*<n>)(q) = <n>(<m>(q))
			     = n' (m' q m) n
			     = (m n)' q (m n)
			     = <m n>(q)
The isomorphism <> maps each subgroup of W of M into a subgroup <W>
of <M>, while <M> is in turn a subgroup of the group of all
permutations of Q.  If W is Q-transitive, then <W> is transitive on
Q in the usual group-theoretic sense that for any two elements p
and q of Q there is some element <w> of <W> such that <w>(p) = q.
This may be taken as motivation/"justification" for our use of the
term "transitive" in the former context.  It is a well-known result
of group theory that every transitive group of permutations on a
set X has a number of elements that is a multiple of the number of
elements of X.  This proves our claim that each Q-transitive
subgroup of M has a multiple of twelve elements.  [For those not
familiar with the group-theoretic result mentioned above, the proof
for this specific case goes like this.  Let <W> be a transitive
subgroup of <M>.  We must show that <W> has a multiple of twelve
elements.  Let q be any element of Q and let V be the subgroup of
<W> containing all elements <v> of <W> such that <v>(q) = q.  For
any element <w> of <W>, the right coset V<w> of V is the set
		{<v>*<w> | <v> is in V}
Since (<x>*<w>)(q) = <w>(<x>(q)) is equal to <w>(q) iff <x>(q) = q,
V<w> consists of precisely those elements of <W> which map q to
<w>(q).  All cosets must have the same size, so the number of
elements of <W> must be a multiple of the number of cosets, which
is the number of distinct values of <w>(q).  Since <W> is transitive
on Q, the set of such values is all of Q, which has twelve
elements.]

	We generated the 98 subgroups of M by computer, and found
that only 9 of them had a multiple of 12 elements.  We examine these
subgroups below.  In the preceding proof, we found it useful to
think of elements of M as permutations on the set Q.  In what
follows, we will sometimes find it useful to think of elements of M
as permutations of the set of face center positions.  An element of
M will be called "even" or "odd" according as it induces an even or
odd permutation on the six face centers.  Also, we refer to elements
of M which are not rotations of the cube as "reflections".  This
applies even to permutations which are not simple geometric
reflections but must be expressed as the composition of a
reflection and a rotation.  An example is the element of M which
permutes face centers in the cycle (U,B,R,D,F,L).

	The largest subgroup of M is, of course, M itself (48
elements).  M has three subgroups of size 24:  the group C of
rotations of the cube, the group of all even elements of M, which
we call AM (for alternating M), and the group of elements which are
in either both or neither of C and AM.  We will call this third
group H.  Thus the group H contains the even rotations and the odd
reflections.  M has five subgroups of size 12.  One of these is the
group of all even rotations, which we call AC.  The other four are
of the kind called "T" by Hoey in his message of 9 Dec 1980, 16:38
EST (corrected by Bawden, same date, 23:57 EST).  Let Z be any of
the four long diagonals of the cube (e.g., UFL-DRB).  Then T(Z) is
the contains all elements of M which map the corner cubies at the
ends of Z either to themselves or to each other.  Of these nine
groups, all except C and AC are Q-transitive.

4. A Catalog of Local Maxima
============================

In this section, we examine the seven Q-transitive subgroups of M,
and describe the 72 corresponding symmetric positions.  In general,
given a geometric interpretation of a subgroup W of M, verifying
that a position is W-symmetric is immediate, and no proof will be
given.  To prove that our catalog contains all W-symmetric positions
is more difficult, and we defer this to a later message.

	There are four M-symmetric positions:  SOLVED, the Pons
Asinorum (reached by RRLL UUDD FFBB), SOLVED with all edges flipped
(Bawden, 9 Dec 1980, 23:57 EST), and the Pons Asinorum with all
edges flipped.  The Pons Asinorum is interesting in that it is our
only example of a PROVEN local maximum which has been PROVEN NOT to
be a global maximum (it is known to have a length of at most 12,
while the global maximum must be longer because |G| > 12^12).  This
was pointed out by Plummer (7 Dec 1980, 07:24 EST).

	The only AM-symmetric elements of G are those which are
also M-symmetric.  Since the symmetry group of a position is the
largest subgroup W of M such that the position is W-symmetric,
there is no position which has AM as its symmetry group.

	Plummer (10 Dec 1980, 23:27 EST) has already presented an
example of an H-symmetric position which is not M-symmetric.  The
position is SOLVED with adjacent corners rotated in opposite
directions.  Another position, whose H-symmetry leads to our choice
of nomenclature, is shown below.

 	       U U U
 	       D U D
 	       U U U
 
  	L L L  F B F  R R R  B F B
  	R L R  F F F  L R L  B B B
 	L L L  F B F  R R R  B F B

	       D D D
	       U D U
	       D D D

There are two such "six-H" positions; composing the two yields the
Pons Asinorum.  This gives four possibilities for edge cubie
positions.  The corners of an H-symmetric position may be in any of
three orientations, all home, Plummer's configuration, or Plummer's
configuration with the twists reversed.  In any position, the edges
may all be flipped or not.  Composing the choices yields twenty-four
H-symmetric positions, twenty of which are not M-symmetric.

	There are four groups of the form T(Z).  To make our
presentation more specific, we will fix Z as the (UFL-DRB)
diagonal.  We define the "girdle" of the cube as the set containing
all the corner cubies other than UFL and DRB and all edge cubies
which are NOT adjacent to either UFL or DRB.  Thus,
		Girdle = {ULB, LB, DBL, DL, DLF, DF,
		          DFR, RF, URF, UR, UBR, UB}
A position which is T-symmetric but not M-symmetric (T has no
proper supergroups in M except for M itself) may be obtained by
flipping all edges on the girdle, as shown.

	       U B U
	       U U R
	       U U U

	L L L  F F F  R U R  B U B
	B L L  F F R  F R R  B B L
	L D L  F D F  R R R  B B B

	       D F D
	       L D D
	       D D D

Also, each edge on the girdle may be swapped with the diametrically
opposite edge, provided that the corners on the girdle are swapped
with their opposites as well.

	       R D D
	       U U D
	       U U B

	D L L  F F D  L L F  L F F
	R L L  F F B  L R R  B B F
	R R B  R B B  U R R  B B U

	       U U L
	       U D D
	       F D D

These positions may be composed with each other and with the four
M-symmetric positions to yield sixteen T-symmetric positions,
twelve of which are not M-symmetric.  Counting the positions
symmetric with respect to the four different T groups yields 48
positions whose symmetry groups are T groups.

	This completes the catalog of positions with Q-transitive
symmetry groups.  Summarizing the numbers of positions of each kind,
we have

    M-symmetric					 4
    AC-symmetric but not M-symmetric	 4-4  =  0
    H-symmetric but not M-symmetric     24-4  = 20
    T-symmetric but not M-symmetric  4*(16-4) = 48

for a total of 72 positions, one of which is the identity and 71 of
which are local maxima.

5.  Generalizations
===================

	The group of whole cube rotations, C, is Q+-transitive, but
not Q-transitive, because U = c U' c' has no solution for c in C.
This means that McKeeman's suggestion (8 Dec 1980, 17:03 PST) that
C-symmetry was a sufficient condition for being a local maximum is
not an immediate corollary of Theorem 1.  However, it happens that
all C-symmetric positions are also M-symmetric and they are
therefore local maxima with the exception of the identity.  Thus
McKeeman's claim turns out to be true "by accident".  However, the
case for the Supergroup is a different story.

	Analysis of the Supergroup, in which the orientations of
the face centers are significant, is trivial given the analysis for
G.  The only operations on the face centers which yield Q-transitive
symmetry groups are to leave them all alone or two rotate them all
by 180 degrees.  Thus there are a total of 72 * 2 = 144 elements of
the Supergroup which have Q-transitive symmetry groups.  One of
these is the identity and the other 143 are local maxima.
Considering face orientations as significant also allows us to
construct a position which is C-symmetric but not M-symmetric,
namely Big Ben, the position reached from SOLVED by turning all the
face centers 90 degrees clockwise.  Big Ben is a good candidate for
a counterexample (in the Supergroup) to McKeeman's (8 Dec 1980,
17:03 PST) suggestion that C-symmetric positions are local maxima.
Possibly Big Ben is a local maximum, but it sure isn't obvious to
us that, say, U and U' will lead to positions equally near to
SOLVED).

	Those who are interested in counting half-twists as single
moves may be pleased to hear that all 71 (143 in the Supergroup)
positions described above are also local maxima in the half-twist
metric.  To see this, first note that every Q-transitive subgroup of
M is also Q2-transitive.  This means that for any position p among
those 71 (or 143), all positions reached by quarter-twists from p
are M-conjugate (and thus equally far from SOLVED) and all positions
reached by half-twists are also M-conjugate.  The positions in one
of these two sets must all be one step closer to SOLVED (in this
metric) than p.  The positions in the other set cannot be further
from SOLVED than p since they are only one move away from positions
in the first set.  Note that this proof depends on BOTH
Q-transitivity and Q2-transitivity.  We do NOT make the claim that
any position whose symmetry group is Q2-transitive must be a local
maximum in the half-twist metric (in fact, we suspect that the
six-spot pattern mentioned below is a counterexample).

6.  On Conjectures
==================

	The point of this section is not to make conjectures, but
to examine conjectures which have recently appeared in the light of
our results.  As an example, we will first discuss a conjecture that
has not been made, but which would likely have been baldly stated
as fact had anyone thought to do so.

	"Of course, the inverse of a local maximum is also a local
maximum."  Easily said, but is it true?  All local maxima we know
about have Q-transitive symmetry groups, and the symmetry groups of
an element and its inverse are equal.  But suppose the local maximum
were not symmetric.  Consider the position reached from SOLVED by
performing the twists (U F F).  From this position, either F or F'
will move the cube closer to SOLVED.  From its inverse, (F' F' U'),
only U will move closer to SOLVED.  Is it not conceivable that from
some position, any of the twelve twists would move closer to SOLVED,
yet only eleven or fewer would move its inverse closer?  Such a
position would be a counterexample to the first statement of this
paragraph.  Of course, the example we provide is not a local
maximum, and indeed there may exist no local maxima except the
(symmetric) ones we have found.  But there is also no reason to
believe they can't exist, and there is no reason to believe that
their inverses are local maxima.  Of course, the inverse of a global
maximum is also a global maximum.

	The symmetry group of a Plummer cross has six elements and
is the intersection of H with T(Z) for an appropriate choice of
diagonal Z.  This group is not Q-transitive, but is Q2-transitive.
Consequently if the algorithm presented by Saxe in his message of 3
Dec 1980, 00:50 EST, is optimal, then the Plummer cross is a local
maximum.  The reason for this is that Saxe's algorithm ends with a
half-twist.  This means that, if the algorithm is optimal, then, by
virtue of the Q2-transitivity of the symmetry group, performing any
half-twist on a Plummer cross brings you two qtw closer to SOLVED.
This implies that performing any quarter-twist on a Plummer cross
would bring you one qtw closer to SOLVED, since the quarter-twist
could be continued into a half-twist for a total gain of two qtw.
This observation (Saxe's algorithm optimal => Plummer cross a local
maximum) was first made by David Plummer (5 Dec 1980, 20:29 EST),
who offered a slightly different, but correct, proof.  We emphasize
that this is all based on the purely speculative conjecture that
Saxe's algorithm is optimal.  The Plummer cross is NOT known to be a
local maximum merely by virtue of its symmetry, Greenberg's (bogus)
statement of 7 Dec 1980, 12:18 EST ("Yet, we know, intuitively,
that CP is 'highly symmetric', and it is a local maximum.")
notwithstanding.  To drive this point home, consider the six-spot
configuration (Pavelle, 16 Jul 1980, 20:51 EDT) produced by moving
(L R' F B' U' D L R').  This position has exactly the same symmetry
group as the Plummer cross, but is not a local maximum.  Any of the
six quarter-twists L', R, F', B, U, or D' will bring you closer to
SOLVED (obvious), any of the other six quarter-twists will take you
further away (based on exhaustive search by computer).  An even more
symmetric position is the twelve-L's [not to be confused with
Singmaster's less symmetric but visually similar 6-2L, obtained
from SOLVED by (F B U D R' L' F B)]:

	       L R R
	       L U R
	       L L R

	B F F  U U U  F B B  U U U
	B L F  U F D  F R B  U B D
	B B F  D D D  F F B  D D D

	       L R R
	       L D R
	       L L R

The symmetry group of this position is AC, the group of even
rotations.  AC is Q+-symmetric, so all clockwise twists have the
same effect, and all counterclockwise twists have the same effect.
If the two sets of neighbors should happen to have the same
lengths, then this position would be a local maximum.  Need we say
that there is no reason to believe this to be the case?

	Michael Aramini (7 Dec 1980, 01:08 EST) mentions the
possibility that two maxima might be one half-twist apart in the
half-twist metric.  This was claimed impossible by Plummer (7 Dec
1980, 07:24 EST).  We do not follow the reasoning, and we conjecture
that he misread "half" as quarter and then mistyped "quarter" as
half.  We also do not see anything to prevent two (local or global)
maxima in the half-twist metric from being a quarter-twist apart or
two maxima in the quarter-twist metric from being a half-twist
apart.  Parity considerations do not stand in the way of such
occurrences and, while none of the known (symmetric) local maxima
are so close to each other, we have no proof that either local or
global maxima must be symmetric.  We have no proof that such closely
neighboring maxima (or any non-symmetric maxima at all) *do* exist,
either.

	While we know 71 local maxima, we know only 25 distinct
ones up to M-conjugacy (3 having symmetry group H, 12 having
symmetry group T, and 10 [yes, 10] having symmetry group H).
McKeeman (6 Dec 1980, 16:42 PST) has correctly (provided we
substitute our corrected definition of symmetry) noted that, if we
could show that maxima had to be symmetric, then the maximum of the
best known solutions to these configurations would bound the length
of the global maximum.  Unfortunately, we have no proof of this
conjecture, nor any strong reason to think it true.

				Dan Hoey (Hoey @ CMU-10A)
				Jim Saxe (Saxe @ CMU-10A)

Date:  1 JAN 1981 0221-EST
From: ACW at MIT-MC (Allan C. Wechsler)
Subject: How much intellect does it take to solve the cube?
To: CUBE-LOVERS at MIT-MC

Well, happy new year.

I solved it while not exactly sober.

   ---Wechsler
Date:  7 January 1981 1352-EST (Wednesday)
From: Dan Hoey at CMU-10A
To: Cube-Lovers at MIT-MC
Subject:  Pons Asinorum -- Part 1: Optimality
Message-Id: <07Jan81 135220 DH51@CMU-10A>

        The Pons Asinorum (obtained by UUDDFFBBLLRR, and known as
6-X in Singmaster) is well-known to readers of this list.  It is
perhaps surprising that this so well-known position has anything
more to teach us.

        The first surprise is that the 12-move sequence given above
is provably optimal in the quarter-twist metric.  Proofs were sent
to me by David C. Plummer, who attributed it to Alan Wechsler, and
by Chris C. Worrell.  While it is well-known (See Alan Bawden's
messages of 31 July 1980 13:06-EDT and 31 JUL 1980 2159-EDT) that
some positions require at least 21 moves, the longest sequence
which has previously been proven optimal is LR'FB'DU'LR' for the
six-spot configuration.  It is good to see a 12-move sequence
proven optimal -- and in a way not dependent on the vagaries of
programming errors and cosmic rays.

        The proof of optimality relies on the "Oriented Distance
from Home" (ODH), used by Vanderschel (6 Aug 1980 1909-PDT) in his
proof of edge orientation parity conservation.  The ODH of an edge
cubie (in some position and orientation) is defined to be the
minimum number of quarter-twists required to move that cubie to its
home position and orientation.  A table of possible ODH values of
the UF cubie is given below, indexed by the position of that
cubie's F tab.

                        + 3 +
                        2 U 2
                        + 3 +

                + 1 +   + 0 +   + 1 +   + 2 +
                2 L 2   1 F 1   2 R 2   3 B 3
                + 3 +   + 2 +   + 3 +   + 4 +

                        + 3 +
                        2 D 2
                        + 3 +

The Pons Asinorum moves every edge cubie to a position and
orientation which has an ODH of 4.  To move all twelve cubies in
this way requires a total of 48 edge moves, and only four edge
moves can be accomplished by each quarter-twist.  Thus the Pons
Asinorum requires twelve quarter-twists.

        Unfortunately, this seems to be the only really impressive
result to be derived from counting ODH.  All edges flipped
(Singmaster's 12-Flip) can be shown to require at least ten
quarter-twists, but this is a far cry from the 28-qtw process which
is the best known (Plummer, 10 Dec 1980 0157-EST).  A brute force
technique for deriving such results is of course possible, but to
show a twelve-move lower bound seems to require sorting and merging
two lists of over one hundred thousand positions each, an act which
is viewed as unsociable (or, more usually, impossible) on the
systems to which I have access.  Anyone who has a gigabit to spare
should get in touch -- there are several good problems for which
brute force seems attractive if there is enough of it.

	Surprise number two -- Pons Asinorum in the Supergroup -- in
an hour or two.
			Dan
Date:  9 January 1981 0629-EST (Friday)
From: Dan Hoey at CMU-10A
To: Cube-lovers at MIT-MC
Subject:  The Supergroup -- Part 2: At least 25 qtw, and why
Message-Id: <09Jan81 062915 DH51@CMU-10A>

	Alan Bawden (31 JUL 1980 2159-EDT) calculated that it must
take at least 21 quarter-twists to solve an ordinary cube, and 24
qtw to solve a cube in the Supergroup.  This message explains how
the first bound can be obtained, improves the second, and points
toward a technique for possible further improvements.

Express any (optimal) sequence of twists as a sequence of segments,
where each segment is a sequence of twists on two opposite faces,
and no two adjacent segments operate on the same pair of faces.
Because the quarter-twist has period four, and opposite faces
commute, a segment operating on faces X and Y has one of the forms
	X, X', Y, Y'				(1 qtw -- 4 ways)
	XX, YY, XY, YX, X'Y, Y'X, XY', Y'X	(2 qtw -- 6 ways)
	XXY, XXY', XYY, X'YY			(3 qtw -- 4 ways)
	XXYY					(4 qtw -- 1 way).
There are 3 ways of choosing X and Y for the first segment, and two
ways of choosing them for every succeeding segment.  Let P[n] be the
number of positions that are exactly n qtw from SOLVED.  Then
bounding P[n] by the number of n-qtw sequences,
	P[0]   = 1
	P[1]  <= 4*3*P[0]
	P[2]  <= 4*2*P[1]   + 6*3*P[0]
	P[3]  <= 4*2*P[2]   + 6*2*P[1]   + 4*3*P[0]
	P[4]  <= 4*2*P[3]   + 6*2*P[2]   + 4*2*P[1]   + 1*3*P[0]
	P[n]  <= 4*2*P[n-1] + 6*2*P[n-2] + 4*2*P[n-3] + 1*2*P[n-4]
						for n > 4.
Evaluating this recurrence, substituting strict (in)equality where
I have personally verified it, and rounding truthfully yields:

P[0]  =           1	P[9]  < 724,477,008	P[18] < 4.048*10^17
P[1]  =          12	P[10] < 6.792*10^9	P[19] < 3.795*10^18
P[2]  =         114	P[11] < 6.366*10^10	P[20] < 3.557*10^19
P[3]  =       1,068	P[12] < 5.967*10^11	P[21] < 3.334*10^20
P[4]  =      10,011	P[13] < 5.594*10^12	P[22] < 3.125*10^21
P[5]  <=     93,840	P[14] < 5.243*10^13	P[23] < 2.930*10^22
P[6]  <     879,624	P[15] < 4.915*10^14	P[24] < 2.746*10^23
P[7]  <   8,245,296	P[16] < 4.607*10^15	P[25] < 2.574*10^24
P[8]  <  77,288,598	P[17] < 4.319*10^16

	There are 4.325*10^19 positions in the standard cube; since
P[0]+P[1]+...+P[20] < 3.982*10^19, there must be a position at
least 21 qtw from SOLVED (The number 22 has appeared in Cube-lovers
recently, but it was an error).  There are 8.858*10^22 positions in
the Supergroup; since P[0]+P[1]+...+P[23] < 3.280*10^22, there must
be a position at least 24 qtw from SOLVED.  But this can be
improved:  half of the positions in the Supergroup are an odd number
of qtw from SOLVED, and since P[1]+P[3]+...+P[23] < 2.963*10^22 is
less than half the Supergroup, there must be some odd-length
elements of the Supergroup at least 25 qtw from SOLVED.  QED.  (If
you think there's something fishy here, mail to Hoey@CMU-10A for
clarification.  I am responsible for any cruft that has crept into
the original, elegant, formulation due to Jim Saxe.)

	The recurrence on which this bound relies is due to the
relations F^4 = FBF'B' = I (and their M-conjugates.)  It may be
possible to improve the recurrence by recognizing other short
relations.  Exhaustive search has shown that there are none of
length less than 10.  The most promising ones I know of come from
Singmaster:
		I = FR'F'R UF'U'F RU'R'U	(12 qtw),
		I = (FFBB RRLL)^2		(16 qtw),
and a 14-qtw relation which holds only in the standard group, since
it twists a face center 180o (see part 3).  Unfortunately, the
number of intermediate terms grows too large to be comfortably
hand-computable, and there are a few conceptual problems to hacking
it out.  If you can improve this, or know of any other relations
shorter than 24qtw, I'd like to hear about it.

	Coming up next: SPOILERS
Date: 22 March 1981 0829-EST (Sunday)
From: Dan Hoey at CMU-10A
To: Cube-Lovers at mit-mc
Subject:  No short relations and a new local maximum
Message-Id: <22Mar81 082919 DH51@CMU-10A>

	Well, the gigabyte (well, 300Mb) came in, and brute force is
having its day.  I have a little program that generates all positions
accessible from a given position in a given number of quarter-twists.
With the increased storage available here, I was able to run it to five
quarter-twists.

	The first important fact to emerge is that there are exactly
105046 different positions at a distance of at most 5 qtw from START.
This has two consequences to the argument given in my message on the
Supergroup, part 2 (9 January 1981 0629-EST).  Note that the results
here pertain to the usual group of the cube, rather than the
Supergroup, since the program does not keep track of face-center
orientations.

	The first consequence is that there are exactly 93840 positions
exactly 5 qtw from START.  The message cited above proved the
inequality P[5] <= 93840; this is now known to be an equality.

	The second consequence is that there are no relations
(sequences that lead back to START) of length 10, with the exception of
those that follow from the relations FFFF = FBF'B' = I (and their
M-conjugates).  This is because relations of length 10 would reduce
P[5], which is not the case.  There are, however, relations of length
12; the only known ones are FR'F'R UF'U'F RU'R'U [given in Singmaster]
and its M-conjugates.

	These results can be extended to the Supergroup, by noting that
the set of observed positions places a lower bound on the number of
Supergroup positions at a distance of 5 qtw, while the upper bound
given in the cited message relies on the relations FFFF = FBF'B' = I,
which are relations in the Supergroup.

	A particular result which may be of greater interest to readers
of this list concerns the relation between symmetry and local maxima.
In our message on the subject (14 December 1980 1916-EST) Jim Saxe and
I mentioned that the six-spot pattern is not a local maximum, as
verified by computer.  [The same program was used, but only four-qtw
searches were needed.]

	With five-qtw searches, it became possible to check another
conjecture, using an approach that Jim suggested.  The four-spot
pattern

		U U U
		U U U
		U U U

	R R R	B B B	L L L	F F F
	R L R	B F B	L R L	F B F
	R R R	B B B	L L L	F F F

		D D D
		D D D
		D D D

is solvable in twelve qtw, either by (FFBB)(UD')(LLRR)(UD') or by its
inverse, (DU')(LLRR)(DU')(FFBB).  It is immediate that a twelve qtw
path from this pattern to START can begin with a twist of any face in
either direction.  The program was used to verify that there are no ten
qtw paths.  (It generated the set of positions attainable at most five
qtw from START and the set of positions obtainable from the four-spot
in at most five qtw, and verified that the intersection of the two sets
is empty.)  Thus the four-spot is exactly twelve qtw from START and all
its neighbors are exactly eleven qtw from START, proving that the
four-spot is a local maximum.  (Worried that there might be an eleven
qtw solution to the four-spot?  Send me a note.)

	This is the first example of a local maximum which cannot be
shown to be a local maximum on the basis of its symmetry.  To be more
precise, let us define a "Q-symmetric" position to be a position whose
symmetry group is Q-transitive.  This extends the terminology developed
in "Symmetry and Local Maxima".  In that message, we showed that all
Q-symmetric positions, except the identity, are local maxima.  Until
now, these were the only local maxima known.  The four-spot, however,
is not Q-symmetric; the position obtained by twisting the U or D face
of the four-spot is not M-conjugate to the position obtained by
twisting any of the other faces.  This lays to rest the old speculation
that one might find all local maxima, and thereby bound the maximum
distance from START, by examining Q-symmetric positions.
Date: 21 July 1981 2350-EDT (Tuesday)
From: Dan Hoey at CMU-10A
To: Cube-Hackers at MIT-MC
Subject:  The ten stuck-axle subgroups
In-Reply-To:  ISAACS@SRI-KL's message of 21 Jul 81 11:08-EST
Message-Id: <21Jul81 235052 DH51@CMU-10A>


1.  No faces stuck.  The familiar cube group.

2.  D face stuck.  As previously noted, all positions can be reached.
In addition, all Supergroup positions that fix the orientation of
the D face center are achievable.

3.  B and D faces stuck.  All Supergroup positions that fix the BD
edge and the B and D face centers are achievable.

4.  U and D faces stuck.  Edges cannot be flipped.  If we define edge
orientation by marking the F and B facelets of the F and B edges,
and the U and D facelets of the others [cf Jim Saxe's message of 3
September 1980], then all Supergroup positions that fix the
orientation of all edges and the U and D face centers are
achievable.

5.  L, B, and D faces stuck.  All Supergroup positions that fix the
BLD corner, the LB, BD, and DL edges, and the L, B, and D face
centers are achievable.

6.  U, B, and D faces stuck.  Again, edges cannot be flipped.  All
Supergroup positions that fix the orientation of all edges, the
position of the UB and BD edges, and the orientation of the U, B,
and D face centers are achievable.

7.  U, L, B, and D faces stuck.  Singmaster has a very nice
description of this group [indexed as Group, Two Generators].  The
group of achievable permutations of the six movable corners is
isomorphic to the group of all permutations on five letters.  All
Supergroup positions that permute the corners in an achievable
permutation, fix edge orientation, and fix the unmovable two
corners, five edges, and four face centers are achievable.

8.  U, L, D, and R faces stuck.  Sixteen positions

9.  U, L, D, B, and R faces stuck.  Four positions.

10. All faces stuck.  One position.
Date: 27 Jul 1981 1111-EDT
From: PDL at MIT-DMS (P. David Lebling)
To: DUFTY at MIT-MC
Cc: CUBE-LOVERS at MIT-MC
In-reply-to: Message of 27 Jul 81 at 1029 EDT by DUFTY@MIT-MC
Subject: Regional Cubing Championship
Message-id: <[MIT-DMS].205137>

According to the Boston Globe, the fastest times were;

	48.31 sec. - Jonathan Cheyer, 10
	51.16 sec. - Jeffery Varafano, 14
	51.59 sec. - Peter Pezaris, 11
(these are for the "junior" division; under 17).  The fastest
"seniors" were;

	69.64 sec. - Herbert H. Thorp, 17
	69.83 sec. - Charles Hawes
	77.26 sec. - Rick Miranda

Jordan Marsh says they sell about 2000 cubes per week.  As the
Jordan Marsh V.P. who was standing next to me said, "You can't
buy this kind of publicity!"

The competition was organized reasonably well, consisting of
three rounds:

	1) The qualifying round consisting of being able to 
solve a cube in under three minutes.  No official timing other
than "under three minutes" was done in this round.  About 20
people were tested per qualifying round, and from 20-30% qualified.
The cubes were allegedly "broken in" in advance, and all had the
same color orientation.  They were re-randomized between rounds.

	2) Those who qualified in the first round were given two
tries to solve a random cube in under two minutes.

	3) Three "patterned" cubes were solved (presumably everyone
got the same patterns).  I didn't see this round so I don't know
the details of it.

	My impression of the qualifying rounds was that those who
qualified differed from those who didn't largely in speed.  They
didn't seem to use any macros I haven't seen, they just did them
extremely fast and rarely paused more than fractions of a second
to decide what to do next.  The fact that the three top finishing
juniors all had better times than the three top-finishing seniors
indicates that competitive cubing is a young person's game.


Date: 2 August 1981 03:43-EDT
From: Alan Bawden <ALAN at MIT-MC>
Subject: Administrivia and an assault on God's number.
To: CUBE-LOVERS at MIT-MC

First the administrivia.  Starting with this message mail to
Cube-Lovers is no longer automatically redistributed to everyone on
the list.  This was done because the "please add me to this list" type
of message is now almost as frequent as messages discussing topics of
general interest.  Now the "editors" (Dave Plummer and myself) will
have a chance to catch these boo-boos.  Hopefull this change will be
completely invisable to the rest of you except that the mail headers
will contain our names as the senders, and the turn-around time will
be a little slower.  If this really offends anyone then we can put it
back the way it was, but lets try it this way for a while.
You should continue to send your messages to Cube-Lovers at MIT-MC.

Now, on to God's number!

As you may recall, a somewhat complicated counting argument sets a
lower bound on God's number (the worst case counting of the best
possible algorithm) at 21 Quarter twists.  Dan Hoey's message of
January 9 1981 (the second message in a series about the "Supergroup")
contains an excellent summary of that argument, so I won't repeat any
of it here.  That argument takes into account certain trivial
identities such as FFFF=I and FB=BF in order to reduce the amount by
which the counting overestimates the number of configurations a
certain number of twists away from "solved".  The same argument
ignoring the identities only leads to a lower bound of 19.  It is thus
natural to expect that taking even more identities into account would
lead to an even higher lower bound.

Well, the next smallest identities are those of the form
FR'F'RUF'U'FRU'R'U=I.  It is known that there are none smaller that
aren't a consequence of those "trivial" identities mentioned above
(See Hoey's message of 22 March 1981), although there might be others
of the same length.  What happens if we take these additional no-ops
into account?  The conceptual problems in applying these new
identities to the counting have had me stumped for quite some time
now, but last week I finally figured a way that would cover at least
some (maybe even all, I haven't worked on a proof of that yet) of the
consequences.

Well, all right, I'm keeping you in suspence, what did I learn?

Nothing.  The lower bound still stands at 21 (similarly the Supergroup
lower bound still stands at 25).  Even after taking
FR'F'RUF'U'FRU'R'U=I and his many friends into consideration it seems
that the numbers that fall out of the counting scheme (and it is
amazingly complicated!) are only slightly smaller than those we
already knew.  

The relevant numbers are:

Size of the cube group: 43252003274489856000
Under old counting:
positions 20 Q's or less away from start: 39812499178877773072
positions 21 Q's or less away from start: 373188814849923987472
Under new counting:
positions 20 Q's or less away from start: 39726356237445007600
positions 21 Q's or less away from start: 372326146413193718032

As you can see the numbers are depressingly close.  This seems to shut
the door on any further improvements of this kind to this argument.
It is hard to imagine that the effects of any other identities
(remember they have to be at least 12 Q's long) could be signifigantly
greater than the effect here.  (Of course, if we knew ALL of them...
but then we would understand the group completely!)

It is of course possible that some deeper property, deeper than just
the knowledge of one identity, could improve this style of counting
argument. 

It is of course also possible that I have screwed up somewhere.  I
sould really let some of the rest of you into the details of this
thing.  As you can guess, I am not very excited at the idea of
having to explain the details of the argument to you all.  The proof is
complicated and kludgey, and I at least am convinced that it leads
nowhere.  People who are interested in the gory details can contact me
and we can work something out.
ZILCH@MIT-MC 08/02/81 06:06:43 Re: Identities (galore)!
To: CUBE-LOVERS at MIT-MC
CC: ALAN at MIT-MC
This message may be overdo, but I figuered it ought to be 
sent now since ALAN has done some work on this subject and may be able 
to use my results.
   Recently I have found many Identity transformations and this 
message is basically a catalog of them.

I12-1   FR'F'RUF'U'FRU'R'U
I12-2   L'D2F'D'FLD2BDB'
I12-3   FR'F'RUF'UL'U'LFU'

I14-1   D'L'DRD'LR'DF'D'RDR'F
I14-2   D'L'D'F'DFLDF'R'D'RDF
I14-3   LD2RL'F2L'F2LR'D2
I14-4   F'R'D'RDFUF'D'R'DRFU'
I14-5   (LRD2L'R'D')^2           NOT GOOD IN  SUPERGROUP  DOES <D2>
I14-6   LR'FRL'U'DFB'R'F'BUD'     "     "      <FR'>

I16-1   (LRD2L'R'D2)^2
I16-2   F'R'D'RDFU2F'D'R'DRFU2
I16-3   F'R'D'RDFD2B'D'L'DLBD2
I16-4   F'R'D'RDFUDR'D'B'DBRU'D'
I16-5   F'R'D'RDFU'DR'D'B'DBRUD'
I16-6   UF2U'DR2D'U'R2UD'F2D
I16-7   LR'D2RL'F2RL'F2LR'D2
I16-8   FDLD'F'LDL'F'L'D'LFD'L'D
I16-9   LD'L'D'F'DFUF'D'FDLDL'U'
I16-10  FL'F'LF'D'FUF'DFL'FLF'U'
I16-11  F'D2R'D'RD'FLD2BDB'DL'
I16-12  (F2B2R2L2)^2
I16-13  LR'FRL'U2D2L'RB'LR'U2D2     NOT IN SUPERGROUP   <FB'>
I16-14  LR'F2RL'U'DFB'R2F'BUD'        "    "      <F2R2>

I18-1   F'BD2F'D'FD2B'LBDB'L2FL
I18-2   LRD'L'R'D'LRDL'R'DLRDL'R'D'
I18-3   D'RD'R'DBDB'DBD2B'D'RD2R'
I18-4   LR'F2RL'U2D2L'RB2LR'U2D2
I18-5   LDR'L'D'LRDL'R'D'RLDR'L'D'R
I18-6   (RBL'R'B'L)^3
I18-7   LDR'L'D'LRDL'R'DRLD'R'L'DR     NOT IN SUPERGROUP     <D2>
I18-8   (F'D'FD'RD2R'D)^2                 "     "       <D2>


These are not all of the identities that I have found but are generators
of them.

How a generator generates other identities:
1. Inversion      (2)
2. Rotation       (24)
3. Reflection     (2)
4. Shifting       (N)       where N is the length of the identity

The numbers in () are the number of different ways that can be gotten
for each of these methods.  Combining gives 96N.
For example an identity of length 12 generates a possible 96*12=1152.
However this number is usually not reached becauseof inherent symmetry.
If you take the inverse of I12-1 --> U'RUR'F'UFU'R'FRF'
Then its reflection  -->UL'U'LFU'F'ULF'L'F
Then a rotation U->F,L->R,F->U     -->FR'F'RUF'U'FRU'FR'U
You get back what you started with.
When shifting is included in this process there are a total of 6 different
ways this can be done  giving  1152/6=192 different identities generated by
I12-1.

Shifting:
 Basically you chop the transform in its interior and append the first
part to the second part.
For instance.  I12-1              FR'F'R / UF'U'FRU'R'U
Becomes                            UF'U'FRU'R'U  FR'F'R
Note that this is just a rotation away from the origional.
Date:  3 Aug 1981 0934-EDT
From: Jerry Agin <AGIN at CMU-20C>
Subject: One more identity
To: zilch at MIT-MC
cc: Cube-Lovers at MIT-MC

U'F'UBU'FUB'URU'L'UR'U'L
-------
Date: 14 August 1981 0111-EDT (Friday)
From: Dan Hoey at CMU-10A
To: Cube-Lovers at MIT-MC
Subject:  Results of an exhaustive search to six quarter-twists
Message-Id: <14Aug81 011137 DH51@CMU-10A>

	The first answer is that there are exactly 878,880 cube
positions at a distance of 6 quarter-twists from solved, and so
983,926 positions at 6qtw or less.  These figures reflect a decrease
of 744 from the previously known upper bounds.

	It turns out that the twelve-qtw identities reported by
Chris C. Worrell <ZILCH at MIT-MC> are complete, in a sense.  The
only reservation here is that a fifth rule must be added to his
list of the ways in which ``a generator generates other
identities.''  This rule is substitution with shorter identities,
and it's not too surprising that it was left out, since the only
shorter identities are the ``trivial'' ones like XXXX=XYX'Y'=I,
where X and Y are opposite faces.  In the case of the twelve-qtw
identities, this means that identities of the form aXXb and aX'X'b
generate each other.

	The structure of the 12-qtw identities is clearer if we
write them in a transformed way:

I12-1	FR' F'R    UF' U'F    RU' R'U
I12-2	FR' F'R   UF'   F'L FL'   U'F
I12-3	FR' F'R   UF'   UL' U'L   FU'

	The fifth rule is necessary so that I12-2 may generate the
identities

I12-2a	 FR' F'R   UF   FL FL'   U'F	and
I12-2b	F'R' F'R   UF   FL FL'   U'F'.

To see that this rule is necessary, it need only be observed that
inversion, rotation, reflection, and shifting all preserve the
number of clockwise/counterclockwise sign changes between
cyclically adjacent elements.

	In what sense are the ``trivial'' identities trivial?  I
have come to believe that they are trivial only because they are
short and simple enough that they are well-understood.  The only
identities for which I can find any theoretical reasons for calling
trivial are the identities of the form XX'=I.  In spite of the
simplicity of the ``trivial'' identities, their occurrence is one
of the major reasons that Alan Bawden and I were unable to show
earlier that I12-1-3 generated all identities of length 12.  I fear
that the combination of 4-qtw and 12-qtw identities may turn out to
be a major headache when dealing with identities of length 14 and
16.


Date: 15 Sep 1981 1553-PDT
From: ISAACS at SRI-KL
Subject: lower bounds
To: Hoey at CMU-10A
cc: cube-lovers at MIT-MC

  [This message is being sent to Dan Hoey, and refers to his message of
9-Jan-81, subject: The Supergroup -- Part 2: at least 25 qtw and why]
   Appended to this message is a longish message I recieved, which has
some good ideas to use.  In particular, what about using your technique
on a 2x2x2 cube, or an (idealized) edge-only cube?  And then comparing
it with his clculations for the 2x2x2.
   I'm not sure without a 2x2x2 in front of me, but I think there are
only 2 distinct 1 qtw per set of opposite faces, and only one 2qtw move.
And that the period is only 2.  Is that true?  However, there should be
more low-number-of-twists identities.
   I'm distrustful of the actual calculations in the message below, because
I don't see the 9 new configurations after only 1 twist.  I think there are
only 6. Or am I missing something?
  Also, Dan or someone else on the cube-lovers network: how about compiling
all the messages about lower bounds and identities (after a while) into 
one file we can ftp and look at all together.
11-Sep-81 12:26:52-PDT,6785;000000000001
Mail-from: ARPAnet host BERKELEY rcvd at 11-Sep-81 1223-PDT
Date: 11 Sep 1981 11:43:07-PDT
Date: 16 September 1981 0003-EDT (Wednesday)
From: Dan Hoey at CMU-10A
To: ISAACS at SRI-KL, Cube-Lovers at MIT-MC
Subject:  Re: lower bounds
In-Reply-To:  Stan Isaacs's message of 15 Sep 81 17:53-EST and Alan Bawden's
             message of 15 Sep 81 20:55-EST
Message-Id: <16Sep81 000353 DH51@CMU-10A>

	Hi.  I'm really pressed for time, but I'll drop a couple of
comments.

	Alan pretty well said it--there are half-twisters and there
are quarter-twisters and the included message is one of the former.
I strongly favor the latter, since then all the moves are
equivalent, (M-conjugate, to you archive-readers).  But Singmaster's
book, though in the other camp, is too good to ignore.

	To extend the argument I gave on 9 January to the case
where quarter-twists and half-twists are counted equally (we call
such a move a `htw' whether it is quarter or half) let PH[n] be the
number of (3x3x3-cube) positions at exactly n htw from SOLVED.  Then

	PH[0]  = 1
	PH[1] <= 6*3*PH[0]
	PH[2] <= 6*2*PH[1]   + 9*3*PH[0]
	PH[n] <= 6*2*PH[n-1] + 9*2*PH[n-2] for n > 2.

Solving yields the following upper bounds:

htw        new        total      htw        new         total
 0           1            1       10    2.447*10^11   2.646*10^11
 1          18           19       11    3.267*10^12   3.531*10^12
 2         243          262       12    4.360*10^13   4.713*10^13
 3        3240         3502       13    5.820*10^14   6.292*10^14
 4       43254        46756       14    7.769*10^15   8.398*10^15
 5      577368       624124       15    1.037*10^17   1.121*10^17
 6     7706988      8331112       16    1.385*10^18   1.497*10^18
 7   102876480    111207592       17    1.848*10^19   1.998*10^19
 8  1373243544   1484451136       18    2.467*10^20   2.667*10^20
 9 18330699168  19815150304

	At least 18 htw are required to reach all the 4.325*10^19
positions of the cube.  This is the same argument that was used in
Singmaster's fifth edition, p. 34, and is the best I know.  Lest ye
be tempted to pull the trick I did in the January message, remember
that half-twists are even permutations, so there is no assurance
that half the positions are an odd distance from SOLVED.  This is
illustrated in the 2x2x2 case, where more than half of the
positions are at a particular odd distance.

	And yes, all of Thistlethwaite's analysis seems to use the
half-twist metric.  I am quite surprised, however, to hear the rumor
of 41 htw.  As of Singmaster's fifth edition, the figure was 52 htw
``... but he hopes to get it down to 50 with a bit more computing
and he believes it may be reducible to 45 with a lot of
searching.''  If anyone has harder information on the situation, I
would like to hear it.

	Well, back to real work.  I saw a Rubikized tetrahedron in a
shop window earlier this evening; I'm not sure whether I'm relieved
or infuriated that the store was closed for the day.
Date:  7 December 1981 1911-EST (Monday)
From: Dan Hoey at CMU-10A
To: Cube-Lovers at mit-mc
Subject:  Brute Force Report: The fourteen-qtw identities
Message-Id: <07Dec81 191129 DH51@CMU-10A>

	Several messages in August of this year [mail to
Hoey@CMU-10A for copies] concerned short identities of the cube,
i. e. processes which return the cube to solved.  Later in that
month I assisted David Plummer in a brute force attack on the
problem.  We had plans to investigate all the positions up to eight
qtw, but unfortunately became busy on other projects.  I have
finally come up with enough time to analyze and report the data
from the seven-qtw search.

	There are 8,221,632 cube positions at a distance of seven
quarter-twists from solved, and 9,205,558 positions at seven or
fewer qtw.  By recording cases of different seven-qtw processes
yielding the same position, a complete list of fourteen-qtw
identities is obtained.  The task is then to reduce the list to
exclude multiple instances of equivalent identities.

	We call two identities equivalent when one can be obtained
from the other by some combination of the following operations:

	- uniformly relabeling the twists according to a rotation
		or reflection of the cube,
	- cyclically permuting the twists,
	- reversing the order of the twists and inverting each one,
		and
	- substituting a sequence x for a sequence y, where xy' is
		a shorter identity.

The first three criteria are easily implemented on a computer.  The
fourth can be performed for the shortest identities, those
equivalent to F^4 and FBF'B', but I know of no algorithm to detect
all cases of equivalence due to substitution of the longer
identities.  My strategy was to reduce the (several thousand)
identities by computer for the simple kinds of equivalence, and
then to look by hand for substitution equivalence between the
fourteen identities then remaining.  I found three equivalences,
listed at the end of this note, but the possibility remains that
some of the following identities are equivalent.  The list is,
however, complete (modulo bugs and cosmic rays).

	Identities equivalent to the first six on this list were
independently discovered by Chris C.  Worrell; I follow his
numbering for them.  Identities I14-5 through I14-7 do not hold in
the Supergroup, because they twist face centers as noted in the
brackets.

I14-1   BF' UB'U'F UL' BU'B'U LU'
I14-2   B UBL' B'D'BD LB'U' L'B'L
I14-3   BB U BB UD' RR U' RR U'D
I14-4   BUB'U' L'FL UBU'B' L'F'L
I14-5   (BB UD B U'D')^2                    [Supergroup BB]
I14-6   BF' U B'F  LR' UD' F' U'D  L'R      [Supergroup UF']
I14-7   BF  U B'F' LR' UD  F' U'D' L'R      [Supergroup UF']
I14-8   BF' UFRU'R'B'U'B'RBUR'
I14-9   BF' UFRU'B' UD' F'U'R'FD
I14-10  (BUBU'L'B') R (BLUB'U'B') R'
I14-11  (BUBU'L'B') D'R'B' DLD'RD

	The twelve-qtw identity I12-2 = (BUBU'L'B') (B'D'B'DLB) can
be substituted into identities I14-10 and I14-11 to yield:

I14-10a  (B'L'D'BDB) R (BLUB'U'B') R'
I14-10b  (BUBU'L'B') R (B'D'B'DLB) R'
I14-10c  (B'L'D'BDB) R (B'D'B'DLB) R'
I14-11a  (B'L'D'BDB) D'R'B' DLD'RD

Identity I14-10c can be obtained from I14-10 [by shifting seven
places and reflecting the cube through the UD plane] but I14-10,
I14-10a, and I14-10b are mutually inequivalent when twelve-qtw
identities are ignored.  The same holds for I14-11 and I14-11a.
Strangely enough, I14-11a can also be transformed to I14-11 by
substituting with the identity (BDBD'R'B') (B'U'B'URB), which is
equivalent to I12-2.
Date: 8 Dec 1981 1952-EST
From: ELF at MIT-DMS (Eric L. Flanzbaum)
Reply-to: ELF at MIT-DMS
To: Cube-Lovers at MIT-MC
Subject: That's incredible!
Message-id: <[MIT-DMS].217487>

Last night on the show "That's Incredible!" they held the finals of
the Rubik's Cube competition.  The contest was for the U.S.A. and the
winner wa then to go onto world competition.  If I remember correctly,
the fastest time (by the winner, of course) was ~26 seconds (it was
actually between 27 and 26, but I can't remember that part).  The show
also mentioned that there were 43 quintillion combinations possible
(is this true?).  The second place time was between 28 and 29.

-- Eric
*******

Date: 30 May 1982 16:30-EDT
From: Alan Bawden <ALAN at MIT-MC>
Subject: God's number
To: CUBE-LOVERS at MIT-MC

OK, it's been some time since I pointed out where I keep archives and
things...  Old cube-lovers mail is archived in the following places: 

MC:ALAN;CUBE MAIL0	;oldest mail in forward order
MC:ALAN;CUBE MAIL1	;next oldest mail in forward order
MC:ALAN;CUBE MAIL2	;more of same
MC:ALAN;CUBE MAIL3	;still more of same
MC:ALAN;CUBE MAIL	;recent mail in reverse order

(Files can be FTP'd from MIT-MC without an account.)

In addition, I have the following two excerpts from the archives sitting on my
directory since they contain some of the more asked-for material:

MC:ALAN;CUBE 4X4X4	;Contains some pre-release speculations on the 4x4x4
			;cube.  Some are out of date, but it contains the only
			;analysis this list has seen of the 4x4x4 group, I
			;believe.
MC:ALAN;CUBE S&LM	;While most of the speculation about the diameter of
			;the 3x3x3 group is scattered randomly through the
			;archives, this file contains the single message with
			;the highest content.  Hoey and Saxe's message on
			;Symmetry and Local Maxima.

To briefly remind you all of ALL that we know about the diameter of the 3x3x3
group (refered to as "God's number" in many of our discussions):

We know that God's number is greater or equal to 21 quarter twists.
 (See Hoey's message of January 9 1981: "The Supergroup -- Part 2 ..." in MAIL1
 for a good explanation of this, as well as some other interesting bounds.)
We know that God's number is greater or equal to 18 half twists.
 (See Singmaster.)
We know that God's number is less than or equal to 52 half twists.
 (See Singmaster again, this is Thistlethwaite's algorithm of several years 
 ago.  I'll bet it's been improved upon by now.  There is a persistent rumor
 that he was trying for 41.)

We have never bothered to figure out an upper bound on God's number in quarter
twists ("Q"s).  It must be less than 104 Qs because of the half twist result,
but we could probably do better than that if we took the trouble to understand
Thistlethwaite's algorithm.

Proofs of these numbers, and a great deal of other discussion can be found by
sifting through the archives (unfortunately they are spread all throught the
files).  I would urge people to sift through the archives before starting any
new discussions on the subject.
Date: 24 January 1983 16:51 EST
From: David C. Plummer <DCP @ MIT-MC>
Subject: Shortest sequence of moves?
To: FONER @ MIT-MC
cc: CUBE-LOVERS @ MIT-MC

    Date: Monday, 24 January 1983  13:57-EST
    From: Leonard N. Foner <TK.FONER @ MIT-OZ>
    Reply-to: Foner at MIT-MC

    I remember hearing about a program, probably running on the color LISP
    machine, that could take an arbitrary cube and try to see what the
    shortest move sequence to its slution is.  Does anyone remember where
    this program is and how to use it?

Sorry, no such program.  Don't we wish though!!  If we understood
the mathematics of the cube well enough to write such a program,
we probably wouldn't have this mailing list anymore.
Date: 28 Jan 1983 3:33-EST
From: Dan Hoey <HOEY @ CMU-CS-A>
Subject: The shortest sequence of moves.
To: Foner at MIT-MC
Cc: Cube-Lovers at MIT-MC
In-Reply-To: Leonard N. Foner's message of Monday, 24 January 1983  1357-EST

Leonard,

The process (R U^2 B^2 L')^2 will restore your cube in twelve
quarter-twists when executed with the Green face Up and the White face
Front, and twelve is the minimum sufficient number of quarter-twists.

Dave Plummer's discouraging word is usually right--we know of no
algorithm to let us find optimal processes for most positions.  This is
because the only known algorithms involve exhaustive breadth-first
search, and there are far too many positions of the cube to make this
practical in either time or space.  But when the optimal process is
sufficiently short, some headway can be made.  Having some megabytes
and CPU-hours at my disposal, I was able to list
    (A) all positions reachable in five qtw from your cube, and
    (B) all positions reachable in five qtw from SOLVED.
Finding that sets (A) and (B) are disjoint, I conclude that there is no
ten qtw process for the pattern, so the twelve qtw process is optimal.

I discovered the optimal process by hand.  Of course, I could have just
run the program one more qtw and it would give me the process, along
with any other twelve-qtw processes that may exist.  The problem with
that approach is that I don't have that many megabytes and CPU-hours.

My program, by the way, is written in C and runs under Unix.  It trades
time and storage efficiency for programmer laziness, making extensive
use of the Unix sort utility.  Dave Plummer has written a much
optimized program, in assembler language for the PDP-20, that uses very
clever hacks (some of them my own).  As I recall, he and I estimated
that with about 150 megabytes and a day or two elapsed time on an
unloaded machine it could take the search three more quarter-twists.
Does anyone need to settle a bar bet on an eighteen qtw process?

				Dan
Date: Tue 24 Jul 84 15:30:18-PDT
From: Haym Hirsh <HAYM@SU-SCORE.ARPA>
Subject: God's number
To: cube-lovers@MIT-MC.ARPA

Can anyone verify a rumor - that some Princeton student, as an
undergraduate thesis, solved the problem of how far from start one
can get (i.e., the longest sequence God's algorithm would give for
any position)?  The number I heard was 26.

Haym
-------
Date: 20 Aug 1984 4:34-EDT
From: Dan Hoey <hoey@NRL-AIC>
Subject: The pocket cube and corners of the full cube
To: cube-lovers at mc
Cc: umcp-cs!seismo!ihnp4!ihnet!eklhad at NRL-AIC

Karl Dahlke, the author of the pocket cube program I mentioned on 1
August, sent me a note about the appearance of the unusual constant 870
in his program.  It turns out that the program is correct, and the
constant arises in an interesting way.

Recall that the pocket cube has 729 orientations and 5040 permutations
of the pieces.  Dahlke had noticed that the ``reflections and
rotations'' of a position need not be stored, since they are the same
distance from start.  By reflections and rotations, he means the
S-conjugates, where S is the six-element symmetry group of the pocket
cube with one corner fixed.

It turns out that the pocket cube has 2 permutations with a six-element
symmetry group, 16 permutations with a three-element symmetry group,
138 permutations with a two-element symmetry group, and 4884
permutations with a one-element symmetry group.  Thus the number of
permutations that are distinct up to S-conjugacy is 2 + 16/2 + 138/3 +
4884/6 = 870.

This discussion of symmetry recalls a question I have meant to propose
to Cube-Lovers for some time:  How many positions are there in Rubik's
Cube?  We know from Ideal that the number is somewhat over three
billion.  Most cube lovers will tell you a number of about 43
quintillion.  But I really don't see why we should count twelve
distinct positions at one quarter-twist from solved--all twelve are
essentially the same position.  So the question, suitably rephrased, is
of the number of positions that are distinct up to conjugacy in M, the
48-element symmetry group of the cube.  I think this is an interesting
question, but I don't see any particularly easy way of answering it.
My best guess is that it involves a case-by-case analysis of the 98
subgroups of M, or at least the 33 conjugacy classes of those
subgroups.  In ``Symmetry and Local Maxima'', Jim Saxe and I examined
five of the classes, which we called M, C, AM, H, and T.

Even finding the numbers for the pocket cube is a little tricky.  If we
limit ourselves to symmetry in S, I believe the pocket cube has 2
positions with a six-element symmetry group, 160 positions with a
three-element symmetry group, 3882 positions with a two-element
symmetry group, and 3670116 positions with a one-element symmetry
group, for 613062 positions distinct up to S-conjugacy.  But the
numbers for M-conjugacy are still elusive; I am not even sure how to
deal with factoring out whole-cube moves in the analysis.  I hope to
find time to write a program for it.

I expanded my pocket cube program to deal with the corner group of
Rubik's cube.  This group is 24 times as large as the group of the
pocket cube, having 3^7 * 8! = 88179840 elements.  The number of
elements P(N) and local maxima L(N) at each (quarter-twist) distance N
from solved are given below.

                 N         P(N)        L(N)
                 0            1           0
                 1           12           0
                 2          114           0
                 3          924           0
                 4         6539           0
                 5        39528           0
                 6       199926         114
                 7       806136         600
                 8      2761740       17916
                 9      8656152       10200
                10     22334112       35040
                11     32420448      818112
                12     18780864     9654240
                13      2166720     2127264
                14         6624        6624

The alert reader will notice that rows 10 through 14 contain values
exactly 24 times as large as those for the pocket cube.  This is not
surprising, given that the groups are identical except for the position
of the entire assembly in space, and each generator of the corner cube
is identical to the inverse of the corresponding generator for the
opposite face except for the whole-cube position.  Thus when solving a
corner-cube position at 10 qtw or more from solved, it can be solved as
a pocket cube, making the choice between opposite faces in such a way
that the whole-cube position comes out right with no extra moves.

Dan
Received: from nrl-aic.ARPA (TCP 3200200010) by AI.AI.MIT.EDU 27 Apr 87 16:53:27 EDT
Return-Path: <hoey@nrl-aic.ARPA>
Received: Mon, 27 Apr 87 16:50:36 edt by nrl-aic.ARPA id AA20059
Date: 27 Apr 1987 16:47:22 EDT (Mon)
From: Dan Hoey <hoey@nrl-aic.ARPA>
Subject: Rubik's Cube
To: "Aaron R. Coles" <acoles@nsf.arpa>
Cc: Cube-Lovers@ai.ai.mit.edu
Message-Id: <546554843/hoey@nrl-aic>

If you happen by the Boston area, you can get Rubik's Revenge at Games
People Play in Cambridge.

A harder problem is to get an ordinary magic cube.  I haven't seen one
for sale in years.

Dan
Received: from lcs.mit.edu (CHAOS 15044) by AI.AI.MIT.EDU;  8 Jan 90 11:38:14 EST
Received: from AC4.PICA.ARMY.MIL by mintaka.lcs.mit.edu id aa10604;
          8 Jan 90 11:34 EST
Date:     Mon, 8 Jan 90 11:31:19 EST
From:     Peter Beck (LCWSL) <pbeck@pica.army.mil>
To:       CUBE-LOVERS@ai.ai.mit.edu
cc:       PBECK@pica.army.mil
Subject:  CFF
Message-ID:  <9001081131.aa14481@AC4.PICA.ARMY.MIL>




FEEDBACK PLEASE:  Is anybody out there interested in my continuing to
post the CFF table of contents?  1 yes and I will continue, none and I
will stop.

SUBJECT :  Review of "Cubism For Fun" newsletter issue #22, DEC 89;
the newsletter of the "Dutch Cubists Club";  in english starting with
issue #14 

1..  The table of contents for issue # 22, DEC 89 follows:

REVIEW OF THE 10th international puzzle party, London 8/28,29/89.  66
attendees from 14 countries. A puzzle fair was also held on monday at
the camden market in north central london.  Next puzzle party april 91
in california??
MY TRIP TO THE USA:  ANNEKE TREEP
SPINNING CUBE: TOM VERHOEFF
RUBIK'S CUBE IN 44 MOVES:  HANS KLOOSTERMAN
THE IMPOSSIBLE DOUBLE-DOMINO SQUARE: by Oskar van Deventer - a packing
problem; the pieces are made from 2 dominoes.
PACKING WITH CONGRUENT SHAPES (pentaCUBING): FRITS GOBEL
PUZZLE IN STAPLES:  by Oskar van Deventer - USING STAPLES to make
puzzle pieces and sculpture.
A CHECKERED STAPLE-BLOCK: Paul Sijben
THE WIRREL-WARREL MAXI CUBE: Jan de Geus - new puzzle, english name
I.Q.UBE
THE TOP SPIN PUZZLE: ED HORDERN - 89 INTRODUCTION from binary arts.
DARIO'S BLOCKED SLIDING PIECES: by Anton Hanegraaf - new puzzle,
double layer sliding block
RIK'S CUBE KIT book review by Anton Hanegraaf - H.J.M. van Grol, has 2
self published booklets on cube packing puzzles; 1-solid block
puzzles, 16PGS (US$3), 2-solutions for riks cube kit, 20 pgs (US$3).
 The cube kit is the complete set of all non-planar polycubes of
maximum 5 units, ie, 3 tetra cubes and 17 pentacubes.
PRETTY CUBIC PATTERNS BY ANNEKE TREEP
NEWS AND LETTERS TO THE EDITOR  - RUBIK'S ILLUSION a board game;
 ROUNDY "the clever disk from interconcept, w ger;  citation for cube
used as and advertisement.
CHANGES IN THE LIST OF MEMBERS - total list as an insert, 85 active
members.


2.   Membership for 1989 is  US$8.   A photocopied set of the
newsletters, issues 1-13, written in DUTCH (in the future selected
back articles will be available in english) is also available for
 US$7.    To order either of these send an 'INTERNATIONAL"  POSTAL
MONEY ORDER to:  Paul Sijben, Witbreuksweg 397-304, 7522 ZA Enschede,
 The Netherlands.

3.  If anybody would like further details please ask!

CUBING IS FOREVER      PETER BECK

<BECK@ARDEC-LCSS>  OR  <PBECK@ARDEC>



From hoey@aic.nrl.navy.mil  Fri Jan 10 18:35:28 1992
Received: from Sun0.AIC.NRL.Navy.Mil by life.ai.mit.edu (4.1/AI-4.10) id AA29653; Fri, 10 Jan 92 18:35:28 EST
Received: from sun13.aic.nrl.navy.mil by Sun0.AIC.NRL.Navy.Mil (4.1/SMI-4.0)
	id AA00290; Fri, 10 Jan 92 18:32:36 EST
Return-Path: <hoey@aic.nrl.navy.mil>
Received: by sun13.aic.nrl.navy.mil; Fri, 10 Jan 92 18:32:35 EST
Date: Fri, 10 Jan 92 18:32:35 EST
From: hoey@aic.nrl.navy.mil
Message-Id: <9201102332.AA13941@sun13.aic.nrl.navy.mil>
To: tjj@lemma.helsinki.fi (Timo Jokitalo), Cube-Lovers@life.ai.mit.edu
Subject: Re: Rubik's Cube, the minimax number of moves
Keywords: Upper-Bounds, Thistlethwaite, RCC, NoRMC

tjj@lemma.helsinki.fi (Timo Jokitalo) asks

> I wonder how large the necessary tables for Thistlethwaite's method
> for the cube are?  I seem to recall reading that there were a few
> hundred entries....

Well, this is the information from Singmaster's _Notes_on_Rubik's_
_Magic_Cube_ (1980).  Thistlethwaite's method is to work from group to
subgroup as follows:

    G0: <F,B,L,R,T,D>
    G1: <F^2,B^2,L,R,T,D>
    G2: <F^2,B^2,L^2,R^2,T,D>
    G3: <F^2,B^2,L^2,R^2,T^2,D^2>
    G4: <I>

The following table shows the number of cosets (the index of each
subgroup in the next larger group).  Then I include the number of HT
moves proven, anticipated, and best possible, from the 1980 N_o_R_M_C.
Finally, I include the number of HT claimed in the 1987 R_C_C.  It is
interesting to note that the improvement did not occur where
Thistlethwaite anticipated it.

Step | Number of Cosets  |     Number of HT, 1980      | #HT, 1987
     |                   |  Proven  Anticipated  Best  |   Proven
     |                   |                             |
  1  | G0:G1 =     2,048 |     7        7         7    |      7 
  2  | G1:G2 = 1,082,565 |    13       12        10    |     13
  3  | G2:G3 =   663,552 |    15       14 ?      13 ?  |     15
  4  | G3:G4 =    29,400 |    17       17        15 ?  |     15
-----+-------------------+-----------------------------+-----------
               Total HT  |    52       50 ?      45 ?  |     50
               Total QT  |   101       97 ?      87 ?  |     97

I had thought the tables contained one entry for each coset, and so
there would be over a million entries for step 2.  However, I was
surprised just now to notice in N_o_R_M_C that tables were only needed
in step 4, and then only 172 entries, so there must be some
abbreviation or algorithmic approach.  Of course, when Knuth's
students improved step 4, they may have changed it to use a huge
lookup table; I don't know.  Still, this is much better than the
situation I expected in my note two days ago.

In listing QT I assume that in we can require steps 1, 2, and 3 to
each end with a quarter-turn.  So the number of QT is at most three
less than twice the number of HT.

> And, more important, have they been published, or does anyone have
> them in an electronic format?

The bibliography in N_o_R_M_C mentions Thistlethwaite's algorithms as
being in typescript, but I don't know if they were available by
request, and I don't know anyone who has them.  I don't know anything
about the improvements by Knuth's students, and there's nothing in
the R_C_C bibliography that looks like a Stanford tech report.

Dan

From reid@math.berkeley.edu  Wed Apr 29 04:37:32 1992
Return-Path: <reid@math.berkeley.edu>
Received: from math.berkeley.edu by life.ai.mit.edu (4.1/AI-4.10) id AA07345; Wed, 29 Apr 92 04:37:32 EDT
Received: from beirut.berkeley.edu.berkeley.edu by math.berkeley.edu (4.1/1.33(math))
	id AA13934; Wed, 29 Apr 92 01:37:26 PDT
Date: Wed, 29 Apr 92 01:37:26 PDT
From: reid@math.berkeley.edu (michael reid)
Message-Id: <9204290837.AA13934@math.berkeley.edu>
To: cube-lovers@ai.mit.edu
Subject: an upper bound on god's number

in an earlier message, i promised to pass along any information
i obtained about progress on the upper bound for the length of
god's algorithm.  i've received a copy of the article "rubik's
cube in 42 moves" by hans kloosterman, which i summarize below.

first here are some caveats:

* i haven't verified this algorithm.
* throughout, `move' refers to any turn of a single face.
  i don't know what bound is achieved in the quarter-turn metric.
* it may be the case that this algorithm has been improved.
  please let me (and cube-lovers) know if you have more information.


"rubik's cube in 42 moves"  by  hans kloosterman

the algorithm used here is a slight variant of thistlethwaite's
algorithm.  we work through a chain of subgroups:

G_0 = < F, B, L, R, U, D >   ( full group )

G_1 = < F2, B2, L, R, U, D >

G_2 = < F2, B2, L2, R2, U, D >

G_3 = subgroup of G_2 in which all U-cubies are in the U face
      (thus all D-cubies are in the D face and all U-D slice
      cubies are in the U-D slice)

G_4 = { 1 }.

there are four stages:  stage i reduces our pattern from G_{i-1} to G_i.

the indices of the subgroups are:

( G_0 : G_1 ) = 2048 = 2^11
( G_1 : G_2 ) = 1082565 = 3^9 * 5 * 11
( G_2 : G_3 ) = 4900 = 2^2 * 5^2 * 7^2
( G_3 : G_4 ) = 3981310 = 2^14 * 3^5

the maximum number of moves in the stages are 7, 10, 8 and 18
respectively, for a maximum total of 43 moves.  however, in
the worst-case scenario of stages 3 and 4, it was checked that
no position actually required 26 moves; i.e. we can arrange a
cancellation between the two stages.  thus stages 3 and 4
together require 25 moves at most, which gives the final
figure of 42 moves.

it seems to me that a lot of work was done on an algorithm
for restoring the "magic domino" (the 2x3x3 puzzle), and
these results were applied to stages 3 and 4.


mike

From dik@cwi.nl  Sun May  3 21:43:51 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA13983; Sun, 3 May 92 21:43:51 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA25853 (5.65b/2.10/CWI-Amsterdam); Mon, 4 May 1992 03:43:48 +0200
Received: by boring.cwi.nl 
	id AA00557 (5.65b/2.10/CWI-Amsterdam); Mon, 4 May 1992 03:43:47 +0200
Date: Mon, 4 May 1992 03:43:47 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205040143.AA00557.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu
Subject: Are we approaching God's algorithm?

Because it might interest the readers and to be ahead of Peter Beck:
Saturday I received CFF (Cubism For Fun) # 28.
It has an interesting article by Herbert Kociemba from Darmstadt, who
describes his program to solve Rubik's Cube.  He states that he has not
yet encountered a configuration that required more than 21 moves.  A short
description follows:

Basicly the program consists of two stages, based on the groups:
G0:	[U,D,R,L,F,B]
G1:	[U,D,R^2,L^2,F^2,B^2]
G2:	I
The stages are from G0 to G1 and next from G1 to G2.  Note that the first
stage is the combination of the first two stages of Thistlethwaite, and
the last stages combine his last two stages.

His first stage can loosely be described as working in a three dimensional
coordinate system where the coordinates are resp. twist, flip and permutation.
He searches his way until the coordinate [0,0,0] is reached.  Most important
here is that he is able to find multiple ways.  The second stage is similar,
although he is not very clear here.

He uses lookup tables, but does not tell us how large his lookup tables
are.  But his program runs on 1 MByte Atari ST.  The heart is coded in
a few lines of 68k assembly, the remainder in GFA Basic.  As far as I
know GFA Basic it can be interpreted, but also compiled.  He does also
use tree pruning.

What he does is find successive solutions in stage 1 and fit solutions
from stage 2.  Letting the system run longer generally finds shorter
solutions.

His claims are on average less than 14 turns in stage 1, on average less
than 10 turns in stage 2.  But according to his article this is not completely
deterministic, so there is no proven upperbound.  Perhaps a proof can be
found; I do not know.  In practice he finds an upperbound of 21 moves, which
is indeed far better than other algorithms do obtain.

To take this in perspective here Thistlethwaites results from Singmaster's book:
Stage		1	2	3	4
Proven		7	13	15	17
Anticipated	7	12	14?	17
Best Possible	7	10?	13?	15?
(Are there configurations that require the maxima proven for Thistlethwaites
algorithm?)

Apparently the combination of stages largely reduces the number of turns
required.

In CFF 25 there was an article by Hans Kloosterman which did already improve
on the number of moves.  His stages 1 and 2 are identical to Thistlethwaites,
he has a third stage that combines the 3rd and 4th stages of Thistlethwaite.
He reports a proven maximum for his three stages of 7, 10 and 25 moves, so
slightly better than Thistlethwaites conjectured best figures.

Kociemba's algorithm appears however to be a big leap forward, although there
are no proofs yet.  One example:

In 1981 Christoph Bandelow wrote a book where he offered a prize for the
shortest sequence of moves that would flip every edge cuby and twists
every corner cuby.  The deadline was September 1, 1982; at that time the
prize was offered for a 23 move manoeuvre.  As Christoph writes:
	All solutions presented after the main deadline and shorter than
	all solutions submitted before were also proised a prize.  Using
	his very ingeneous new search program Herbert Kociemba, Darmstadt,
	Germany now found:
		DF^2U'(B^2R^2)^2LB'D'FD^2FB^2UF'LRU^2F'
	for 20 moves.
Kociemba himself writes about this:
	Our first solution had 12 moves in stage 1 and 14 moves in stage 2.
	In progress solutions 12+13, 12+12 and 12+11 were found.  However,
	as soon as we introduced manoeuvres of 13 moves in stage 1, we found
	successively 9, 8 and at last 7 moves for stage 2.  The program was
	stopped after treating about 3000 solutions.
He further states that the first solution in general takes 95 seconds, but
successive solutions take much shorter, and in general he finds one of less
than 22 moves in a few hours on his 8 MHz Atari.

What is clear is that one does not need the minimal solution in one stage
to get the minimal overall total.

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From reid@math.berkeley.edu  Mon May  4 23:38:05 1992
Return-Path: <reid@math.berkeley.edu>
Received: from math.berkeley.edu by life.ai.mit.edu (4.1/AI-4.10) id AA16784; Mon, 4 May 92 23:38:05 EDT
Received: from phnom-penh.berkeley.edu.berkeley.edu by math.berkeley.edu (4.1/1.33(math))
	id AA06009; Mon, 4 May 92 20:37:54 PDT
Date: Mon, 4 May 92 20:37:54 PDT
From: reid@math.berkeley.edu (michael reid)
Message-Id: <9205050337.AA06009@math.berkeley.edu>
To: Dik.Winter@cwi.nl, cube-lovers@life.ai.mit.edu
Subject: Re:  Are we approaching God's algorithm?
Cc: dseal@armltd.co.uk

<dik@cwi.nl> writes:
> Because it might interest the readers and to be ahead of Peter Beck:
> Saturday I received CFF (Cubism For Fun) # 28.
> It has an interesting article by Herbert Kociemba from Darmstadt, who
> describes his program to solve Rubik's Cube.  He states that he has not
> yet encountered a configuration that required more than 21 moves.  A short
> description follows:

it would be nice to know how many patterns he has tested.

> Basicly the program consists of two stages, based on the groups:
> G0:	[U,D,R,L,F,B]
> G1:	[U,D,R^2,L^2,F^2,B^2]
> G2:	I
> The stages are from G0 to G1 and next from G1 to G2.  Note that the first
> stage is the combination of the first two stages of Thistlethwaite, and
> the last stages combine his last two stages.
>
> His first stage can loosely be described as working in a three dimensional
> coordinate system where the coordinates are resp. twist, flip and permutation.
> He searches his way until the coordinate [0,0,0] is reached.  Most important
> here is that he is able to find multiple ways.  The second stage is similar,
> although he is not very clear here.
>
> He uses lookup tables, but does not tell us how large his lookup tables
> are.  But his program runs on 1 MByte Atari ST.  The heart is coded in
> a few lines of 68k assembly, the remainder in GFA Basic.  As far as I
> know GFA Basic it can be interpreted, but also compiled.  He does also
> use tree pruning.

does he describe his method of "tree pruning"?  this would seem to
be the "intelligent" part of the program, i.e. recognizing when to
abandon a given approach.  if anyone has any insight on the tree
pruning, please let me know.

> What he does is find successive solutions in stage 1 and fit solutions
> from stage 2.  Letting the system run longer generally finds shorter
> solutions.
>
> His claims are on average less than 14 turns in stage 1, on average less
> than 10 turns in stage 2.  But according to his article this is not completely
> deterministic, so there is no proven upperbound.  Perhaps a proof can be
> found; I do not know.  In practice he finds an upperbound of 21 moves, which
> is indeed far better than other algorithms do obtain.

it's not likely that this will lead to a proof of an effective upper
bound.  perhaps he can shave a few moves off the 42 obtained by
kloosterman, but i wouldn't expect him to prove an upper bound
anywhere near 21.  probably the best bet for this would be to
exhaustively calculate the diameter of the group  G_1  (with the
given generators) and the diameter of the coset space  G_0 / G_1.
their respective sizes are:  19508428800  and  2217093120,  both of
which are out of my league.

i'm not belittling kociemba's program; it's a very impressive feat!

> To take this in perspective here Thistlethwaites results from Singmaster's book:
> Stage		1	2	3	4
> Proven		7	13	15	17
> Anticipated	7	12	14?	17
> Best Possible	7	10?	13?	15?
> (Are there configurations that require the maxima proven for Thistlethwaites
> algorithm?)

now look what happens when people use TABs!  :-}  (the "Proven" line
should be shifted to the left.)

i believe that the diameters of the respective coset spaces are exactly
those numbers listed in the "Best Possible" line.  can anyone confirm
this?  i've finally written a few programs, and those are the diameters
i get.  i'm surprised that thistlethwaite didn't just do an exhaustive
search on these coset spaces.  perhaps it's just a matter of not having
the technology when he did his work (~12 years ago).

> Kociemba's algorithm appears however to be a big leap forward, although there
> are no proofs yet.  One example:
>
> In 1981 Christoph Bandelow wrote a book where he offered a prize for the
> shortest sequence of moves that would flip every edge cuby and twists
> every corner cuby.  The deadline was September 1, 1982; at that time the
> prize was offered for a 23 move manoeuvre.  As Christoph writes:
> 	All solutions presented after the main deadline and shorter than
> 	all solutions submitted before were also proised a prize.  Using
> 	his very ingeneous new search program Herbert Kociemba, Darmstadt,
> 	Germany now found:
> 		DF^2U'(B^2R^2)^2LB'D'FD^2FB^2UF'LRU^2F'
> 	for 20 moves.

very nice.  now how about "superflip," and also "supertwist?"  these
are also reasonable candidates for antipodes of "START."  i know the
following manuever for "supertwist" (22 face / 30 quarter turns):
U F' U' (L R2 F2 B')^4  U F U'
(obtained by conjugating a manuever singmaster attributes to thistlethwaite)

> Kociemba himself writes about this:
> 	Our first solution had 12 moves in stage 1 and 14 moves in stage 2.
> 	In progress solutions 12+13, 12+12 and 12+11 were found.  However,
> 	as soon as we introduced manoeuvres of 13 moves in stage 1, we found
> 	successively 9, 8 and at last 7 moves for stage 2.  The program was
> 	stopped after treating about 3000 solutions.
> He further states that the first solution in general takes 95 seconds, but
> successive solutions take much shorter, and in general he finds one of less
> than 22 moves in a few hours on his 8 MHz Atari.

it would also be nice to know how long this first solution usually is.

from the figures i have (111207592 "different" sequences of 7 or fewer
twists and 167024 "different" sequences of 6 or fewer twists WITHIN G_1)
it's clear that exhaustive search is too cumbersome.  thus i reiterate
both my statement that the "tree pruning" algorithm is the essential
part of this program, and my desire to know more about it (i.e. for
implementation purposes.)

> dik
> --
> dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
> dik@cwi.nl

thanks for the info!

mike             reid@math.berkeley.edu

From dik@cwi.nl  Tue May  5 03:58:28 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA19673; Tue, 5 May 92 03:58:28 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA01995 (5.65b/2.10/CWI-Amsterdam); Tue, 5 May 1992 09:57:54 +0200
Received: by boring.cwi.nl 
	id AA01813 (5.65b/2.10/CWI-Amsterdam); Tue, 5 May 1992 09:57:53 +0200
Date: Tue, 5 May 1992 09:57:53 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205050757.AA01813.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu, reid@math.berkeley.edu
Subject: Re:  Are we approaching God's algorithm?
Cc: dseal@armltd.co.uk

 > > It has an interesting article by Herbert Kociemba from Darmstadt, who
 > > describes his program to solve Rubik's Cube.  He states that he has not
 > > yet encountered a configuration that required more than 21 moves.  A short
 > > description follows:

 > it would be nice to know how many patterns he has tested.

He does not say how many, but his article gives nine patterns that have been
published earlier in CFF for which he finds shorter answers.  Also more are
promised for future issues.

 > > His first stage can loosely be described as working in a three dimensional
 > > coordinate system where the coordinates are resp. twist, flip and permutation.
 > > He searches his way until the coordinate [0,0,0] is reached.
...
 > >                                                           He does also
 > > use tree pruning.

 > does he describe his method of "tree pruning"?  this would seem to
 > be the "intelligent" part of the program, i.e. recognizing when to
 > abandon a given approach.  if anyone has any insight on the tree
 > pruning, please let me know.

I can give some information.  What he does do is calculate in advance through
the three axis of his space the minimal number of moves needed to get at
[0,0,0].  This is used for tree pruning.  It obviously will not prune
everything (e.g. if you are at point [x,y,z] it may very well be that [x,?,?]
for other points requires less moves, and similar across the y and z
direction), but he tells that his pruning is very effective.  I do not know
how he prunes in the second case, because he does not completely describes
the coordinates of his second space, but I presume pruning is done in a
similar way.

 > it's not likely that this will lead to a proof of an effective upper
 > bound.  perhaps he can shave a few moves off the 42 obtained by
 > kloosterman, but i wouldn't expect him to prove an upper bound
 > anywhere near 21.
I think so too.  Moreover, it is difficult to take in account what he
found, namely that a minimal solution in the first stage does not guarantee
a minimal overall solution.

 > i believe that the diameters of the respective coset spaces are exactly
 > those numbers listed in the "Best Possible" line.  can anyone confirm
 > this?  i've finally written a few programs, and those are the diameters
 > i get.  i'm surprised that thistlethwaite didn't just do an exhaustive
 > search on these coset spaces.  perhaps it's just a matter of not having
 > the technology when he did his work (~12 years ago).
Well, apparently Thistlethwaite did not know that those were the diameters,
otherwise I have no explanation for the question marks as they appear in
Singmaster.

 >             now how about "superflip," and also "supertwist?"
I will try to contact him to see what he has to say about those.


From dik@cwi.nl  Tue May 12 17:47:25 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA21137; Tue, 12 May 92 17:47:25 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA19167 (5.65b/2.10/CWI-Amsterdam); Tue, 12 May 1992 23:46:12 +0200
Received: by boring.cwi.nl 
	id AA06553 (5.65b/2.10/CWI-Amsterdam); Tue, 12 May 1992 23:46:11 +0200
Date: Tue, 12 May 1992 23:46:11 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205122146.AA06553.dik@boring.cwi.nl>
To: Cube-Lovers@life.ai.mit.edu, hoey@aic.nrl.navy.mil
Subject: Re:  Diameter of the 2^3 cube and the 3^3 corners
Cc: reid@math.berkeley.edu

 > I sent the results of a quarter-turn analysis of these puzzles to
 > Cube-Lovers in several messages during August, 1984.
I must have somewhere a printed stack of cube-lovers mailings, but I never
came around to read them all.  Also, my reference to Singmaster was his
notes.  The latest page of the latest printing states that the 2x2x2 case
was still unsolved, I never have seen his additional notes.

 >                                                       I counted both
 > positions and local maxima at every distance up to the diameter of 14
 > quarter-turns.
After Mike Reid's question I modified my program to do the counting on the
corners of the 3^3.  The biggest change was that it is now able to handle
that case in memory on this 32 MByte machine.  I did not count local maxima
(although that could be done).  The quarter turn case is identical to Dan
Hoey's results.  If we count half turns as a single move I get the following
results:
         1 with  0 moves
        18 with  1 moves
       243 with  2 moves
      2874 with  3 moves
     28000 with  4 moves
    205416 with  5 moves
   1168516 with  6 moves
   5402628 with  7 moves
  20776176 with  8 moves
  45391616 with  9 moves
  15139616 with 10 moves
     64736 with 11 moves

 > The first column agrees with Dik Winter's findings.  As Michael Reid
 > surmised, the diameters of the two groups are the same.
Also here the diameter is the same.

 > My hazy recollection is that the 2^3 program ran for a few minutes on
 > a Vax 750, while the corners program took a couple of hours.
My calculation took slightly less than half an hour.  The differences in
timings we see are (I think) mostly due to memory constraints on older
machines.  So we see a difference between Memory bound and I/O bound.
I could go to disk for storage of (intermediate) results, but even than the
edges can not be handled.  (980*10^9 configurations so my program would
require 245 GBytes of storage.  I think methods can be found to reduce this by
a factor of 30-40, but it is still much too large to handle, and in that case
you probably get the diameter only.)

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From dik@cwi.nl  Sat May 16 21:14:18 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA03345; Sat, 16 May 92 21:14:18 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA14373 (5.65b/2.10/CWI-Amsterdam); Sun, 17 May 1992 03:14:15 +0200
Received: by boring.cwi.nl 
	id AA20529 (5.65b/2.10/CWI-Amsterdam); Sun, 17 May 1992 03:14:14 +0200
Date: Sun, 17 May 1992 03:14:14 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205170114.AA20529.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu
Subject: Kociemba's algorithm

I have implemented it based on his description.  I am not yet completely
satisfied, but can give some results.  Both are the best I found after a
run of about 30 minutes.  (The numbers are first the number of moves to
get at [F^2,R^2,B^2,L^2,U,D], second the numbr of moves to complete.)

Superflip:
(11+10=21): F B R U^2 B^2 U' D' R^2 B' R L U F^2 L^2 D^2 B^2 D' F^2 D L^2 D

Supertwist:
(7+9=16): F R^2 L^2 U^2 D^2 F^2 B' R^2 U F^2 B^2 R^2 L^2 U^2 D' L^2

So clearly the supertwist is not even close to the opposite of start!

Currently the program needs still a bit of hand-tuning.  I am looking how
I can improve that.

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From dik@cwi.nl  Sun May 17 18:49:53 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA17456; Sun, 17 May 92 18:49:53 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA29764 (5.65b/2.10/CWI-Amsterdam); Mon, 18 May 1992 00:49:49 +0200
Received: by boring.cwi.nl 
	id AA22984 (5.65b/2.10/CWI-Amsterdam); Mon, 18 May 1992 00:49:48 +0200
Date: Mon, 18 May 1992 00:49:48 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205172249.AA22984.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu
Subject: Kociemba's algorithm

I have made my program a bit faster.  While previously the best I found for
superflip was a 21 move solution (even after 10 hours computation time,
actually the solution was found after about 30 minutes), I have now a 20
move solution, found after only 15 minutes:

Superflip:
(13+7=20): F B U^2 R F^2 R^2 B^2 U' D F U^2 R' L' U B^2 D R^2 U B^2 U

Some more information.  First a short recap.  Phase1 brings the cube in
the group generated by [F^2,R^2,B^2,L^2,U,D], phase2 brings him back
to start.  Phase 1 searches in the space generated by the three (orthogonal)
coordinates:
Twist (2187 entries), flip (2048 entries) and slice-edge-cube placing (495
entries).
Phase 2 searches in the space generated by the three (non-orthogonal)
coordinates:
Permutations of corner cubes (40320 entries), permutations of edge cubes
not in the middle slice (40320 entries) and permutations of the middle
slice edge cubes (24 entries).

While Kociemba originally did tree pruning based on the minimal number of
moves needed along single coordinates, I now use pairs of coordinates
(except that in phase 2 the 40320*40320 pair is not used of course).
This is part of the speed-up.  (Another part is that I do now disallow
successive moves of a single face, three or more consecutive moves of
opposite faces, and a move of an opposite face if the current face moved
is B, L or D.)

Program details: the program starts with phase1 allowing for succesively
1, 2 etc. until a maximal number of moves.  As soon as phase1 hits a
solution phase2 is called, again with a maximum number of moves starting
at 1.  This means that if the program runs long enough it will ultimately
find the shortest solutions (phase 1 might just solve it!).  But that wil
take a long time (of course).  For the superflip, the program has now
checked all phase1 solutions of upto 12 moves and is busy with 13.  It
found 792256 solutions of 12 moves (and that in less than 10 minutes)!

Some additional data about minimal paths along coordinates:
Phase 1:
twist:		6
flip:		7
choice:		5
twist+flip:	9
twist+choice:	9
flip+choice:	9

Phase 2:
corners:	13
edges:		8
slice edges:	4
corners+slice:	14
edges+slice:	12

Based on this I expect a maximal distance in phase 1 of about 10/11, and
in phase 2 of about 16/17.

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From dik@cwi.nl  Sun May 17 21:03:44 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA19309; Sun, 17 May 92 21:03:44 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA06061 (5.65b/2.10/CWI-Amsterdam); Mon, 18 May 1992 03:03:35 +0200
Received: by boring.cwi.nl 
	id AA23353 (5.65b/2.10/CWI-Amsterdam); Mon, 18 May 1992 03:03:34 +0200
Date: Mon, 18 May 1992 03:03:34 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205180103.AA23353.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu, keng@zcar.asd.sgi.com
Subject: My program is too fast ;-).

I have posted a bit on my version of Kociemba's program, and I can only
conclude that my program is too fast.  After doing the superfliptwist,
the superflip and the supertwist I thought about trying those configurations
where Singmaster's notes did not give a solution better than 21 moves.
I find now that it takes more time to enter the configurations than what
the program needs to solve it!  Upto now I found the following (I will not
give the exact moves, as I think Kociemba wants to publish a bit more about
this):
superflip:	20 moves
supertwist:	16 moves
superfliptwist:	20 moves
Walker's 6+:	17 moves (was 22)
Walker's 6X:	19 moves (was 25)
Walker's worm:	14 moves (was 23)

Initialization time for the program is 2.5 minutes.  But it finds solutions
after only a few seconds!  If you have a configuration that you think is at
a large distance from start, mail it and I will disprove it ;-).

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From reid@math.berkeley.edu  Sat May 23 01:56:38 1992
Return-Path: <reid@math.berkeley.edu>
Received: from math.berkeley.edu by life.ai.mit.edu (4.1/AI-4.10) id AA17982; Sat, 23 May 92 01:56:38 EDT
Received: from phnom-penh.berkeley.edu.berkeley.edu by math.berkeley.edu (4.1/1.33(math))
	id AA03559; Fri, 22 May 92 22:56:34 PDT
Date: Fri, 22 May 92 22:56:34 PDT
From: reid@math.berkeley.edu (michael reid)
Message-Id: <9205230556.AA03559@math.berkeley.edu>
To: cube-lovers@ai.mit.edu
Subject: new upper bound

i've managed to reduce the upper bound for the length of god's
algorithm to 39 face turns / 56 quarter turns.  we work in three
stages:

1. from  <U, F, R, L, B, D>  to  <U, R, F>
2. from  <U, R, F>           to  <U, R2, F2>
3. from  <U, R2, F2>         to  START

where we're only allowed to use moves that keep us within the
given subgroup.

these three stages were chosen because of the moderate(!) sizes
of the coset spaces that must be considered.  the numbers are
253440,  15676416,  and  10886400.  the maximum number of moves
in each stage was calculated by exhaustively searching the space.

if we count by "face turns," these maximum numbers are 8, 13 and 19.
however, if we make any turns in stage 2, the last such is a quarter
turn of either  F  or  R, and the direction is irrelevant.  those
positions at distance 19 in stage 3 (only 24 in all) were checked
to see that they may be solved in 19 face turns starting with
either  F2  or  R2.  therefore we can arrange to combine the last
move of stage 2 with the first move of stage 3 in the event that
we must make the maximal number of moves in each stage.  this
gives the final figure of 39 face turns.

if we count by "quarter turns," the maximum numbers are 9, 16 and 33.
this time, those configurations at distance either 32 or 33 in stage 3
(only 10 and 4 positions, respectively) were tested as above.
each has minimal sequences starting with  F2  and with  R2.  as above,
we may cancel a quarter turn from the end of stage 3 with a quarter
turn at the beginning of stage 3, to get the final figure of 56
quarter turns.

the next step is to reduce the figure for stage 3 by allowing other
turns.  i only plan on allowing  D, U, B2, F2, L2, R2,  as in the
second stage of kociemba's algorithm.  after that, i may try to reduce
the numbers for stage 2.  however, in this case, i don't expect much
of a reduction (maybe 1 turn).

mike

From reid@math.berkeley.edu  Sun May 24 11:04:20 1992
Return-Path: <reid@math.berkeley.edu>
Received: from math.berkeley.edu by life.ai.mit.edu (4.1/AI-4.10) id AA06624; Sun, 24 May 92 11:04:20 EDT
Received: from phnom-penh.berkeley.edu.berkeley.edu by math.berkeley.edu (4.1/1.33(math))
	id AA04847; Sun, 24 May 92 08:04:09 PDT
Date: Sun, 24 May 92 08:04:09 PDT
From: reid@math.berkeley.edu (michael reid)
Message-Id: <9205241504.AA04847@math.berkeley.edu>
To: anneke@fwi.uva.nl, cube-lovers@ai.mit.edu
Subject: details ...

perhaps i should give the figures i obtained when getting my upper
bound of 39 face / 56 quarter turns in case i also have an error.
recall the method: we work in three stages:

1. from  <U, F, R, L, B, D>  to  <U, R, F>
2. from  <U, R, F>           to  <U, R2, F2>
3. from  <U, R2, F2>         to  START

where we're only allowed to use moves that keep us within the
given subgroup.  the number of positions that must be considered
in each stage are  253440,  15676416,  and  10886400 respectively.

stage 1:
using face turns:          using quarter turns:
distance  number           distance     number
  0            1               0             1
  1            9               1             6
  2           90               2            39
  3          852               3           276
  4         7169               4          1899
  5        44182               5         11245
  6       131636               6         49412
  7        68940               7        117221
  8          561               8         70767
                               9          2574
stage 2:
using face turns:          using quarter turns:
distance  number           distance     number
  0            1               0             1
  1            2               1             2
  2           12               2             8
  3           72               3            36
  4          420               4           158
  5         2410               5           694
  6        13752               6          2980
  7        75796               7         12744
  8       390421               8         53646
  9      1735771               9        216354
 10      5351383              10        799868
 11      6696700              11       2477802
 12      1399195              12       5310848
 13        10481              13       5419046
                              14       1356020
                              15         26192
                              16            17
stage 3:
using face turns:          using quarter turns:
distance  number           distance     number
  0            1               0             1
  1            5               1             2
  2           14               2             3
  3           44               3             8
  4          128               4            14
  5          392               5            24
  6         1157               6            52
  7         3458               7            96
  8        10057               8           176
  9        29286               9           352
 10        82814              10           664
 11       228621              11          1248
 12       591704              12          2409
 13      1362497              13          4516
 14      2545752              14          8519
 15      3272940              15         16100
 16      2260555              16         30171
 17       484818              17         56140
 18        12133              18        102981
 19           24              19        186728
                              20        331234
                              21        563985
                              22        912719
                              23       1365051
                              24       1812011
                              25       2044832
                              26       1783956
                              27       1105488
                              28        450322
                              29         97881
                              30          7958
                              31           745
                              32            10
                              33             4

it would be nice if someone could confirm these figures.  i have done
some testing, but not extensively.

mike

From dik@cwi.nl  Thu May 28 12:33:49 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA02289; Thu, 28 May 92 12:33:49 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA03118 (5.65b/2.10/CWI-Amsterdam); Thu, 28 May 1992 17:18:31 +0200
Received: by boring.cwi.nl 
	id AA00307 (5.65b/2.10/CWI-Amsterdam); Thu, 28 May 1992 15:00:49 +0200
Date: Thu, 28 May 1992 15:00:49 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205281300.AA00307.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu
Subject: Corrected calculations are now done.

After an initial false start I have now calculated the path-lengths in
phase 1 of Kociemba's algorithm.  The figures are as follows:
path	configurations
  0:          1
  1:          4
  2:         50
  3:        592
  4:       7156
  5:      87236
  6:    1043817
  7:   12070278
  8:  124946368
  9:  821605960
 10: 1199128738
 11:   58202444
 12:        476
The figure 50 for path length 2 is easily verified by hand.  I have a list
with information about the configurations requiring a path-length of 12
(actually the paths leading to such a configurations).  As should be true
for each minimal path in phase 1, all paths start and terminate with a
quarter turn of F, R, B or L.

Some details.

Phase 1 of the algorithm brings the cube in the subgroup generated by
[F^2, R^2, B^2, L^2, U, D].  There are in this case 2,217,093,120
(2048 * 2187 * 495) cosets.  This can be (and has been) reduced largely
by observing symmetries.  In this case rotating the complete cube
along the UD axis by a quarter turn, rotating the cube along the RL
axis by a half turn and mirroring through the FRBL plane reveal
equivalent cosets.  Although it is possible to remove *all* cosets that
are equivalent to some canonical coset this was not done.  The removal
has only been done for the twists of corner cubes, reducing the factor
2187 to 168, and reducing the number of configurations to be handled to
170,311,680.  For each configuration a minimal path was calculated.
This was done starting with an absolute minimum found through the coordinate
axis and through the 2-dimensional coordinate spaces.  When a path of that
length was not found the path length was increased and a new attempt was made.
This was done until a path was found.  All searches were exhaustive.  On
average paths were searched for 3 different lengths (519,177,716 attempts
for 170,311,679 configurations).

The computations were done on a farm of workstations where each workstation
got a portion of the flip dimension (2048 cases of 83,160 configurations).
Computation time for one portion was from 1 to 2 hours (1.5 on average), so
the total computation was about 3000 hours.  On a system with enough
memory (50 MByte) it would have taken only 1 hour (this based on experiments
with the corner cubes-only part).  It could also have been with a single
processor and a 50 MByte file, in that case CP time would also be about 1
hour, but the I/O time would exceed the 3000 hours very much.

Using this result and the result by Hans Kloosterman the diameter of the
cube group is at most 37.  I conjecture the maximal path length in phase 2
of Kociemba's algorithm is 16, although the requirements on computer time
cq. memory do inhibit calculations at this moment (only in memory would be
feasible, but that requires 500 to 1000 MByte and computation time would be
about one day).  This figure of 16 would reduce the upperbound of the groups
diameter to 28.

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From @mitvma.mit.edu:hans@freyr.research.ptt.nl  Fri May 29 13:21:10 1992
Return-Path: <@mitvma.mit.edu:hans@freyr.research.ptt.nl>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) id AA09766; Fri, 29 May 92 13:21:10 EDT
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 3176; Fri, 29 May 92 13:22:18 EDT
Received: from research.ptt.nl by MITVMA.MIT.EDU (Mailer R2.08 R208004) with
 BSMTP id 8330; Fri, 29 May 92 13:22:17 EDT
Received: from dnlunx.research.ptt.nl (DNLUNX) by research.ptt.nl (PMDF #12085)
 id <01GKLFC81PO0DQGQ2Q@research.ptt.nl>; Fri, 29 May 1992 19:21 +0100
Received: by gefjon.dnl (4.1/SMI-4.1) id AA03306; Fri, 29 May 92 19:20:23 +0200
Date: Fri, 29 May 92 19:20:22 MET DST
From: J.M.Kloosterman@research.ptt.nl (Hans Kloosterman)
Subject: Lower-bound Kociemba's algorithm
To: cube-lovers@life.ai.mit.edu
Message-Id: <9205291720.AA03306@gefjon.dnl>
X-Envelope-To: cube-lovers@life.ai.mit.edu
X-Mailer: ELM [version 2.3 PL11]

Dik Winter writes:

> Using this result and the result by Hans Kloosterman the diameter of the
> cube group is at most 37.  I conjecture the maximal path length in phase 2
> of Kociemba's algorithm is 16, although the requirements on computer time
> cq. memory do inhibit calculations at this moment (only in memory would be
> feasible, but that requires 500 to 1000 MByte and computation time would be
> about one day).  This figure of 16 would reduce the upperbound of the groups
> diameter to 28.

Unfortunately Dik's conjecture for phase 2 is too optimistic.
Recall the maximum distances of the 4 stages of my algorithm:
 1.  7 moves within the group <R, L, F, B, U,D>
 2. 10 moves within the group <R, L, F2,B2,U,D>
 3.  8 moves within the group <R2,L2,F2,B2,U,D>
 4. 18 moves within the group <R2,L2,F2,B2,U,D>

(Stage 3 and 4 together requires at most 25 moves.)

These number of moves are minimal and cannot be improved within their
group of moves. (Stage 2 can also not be improved using all moves.)
From dik@cwi.nl  Fri May 29 20:32:28 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA23171; Fri, 29 May 92 20:32:28 EDT
Received: from steenbok.cwi.nl by charon.cwi.nl with SMTP
	id AA17356 (5.65b/2.10/CWI-Amsterdam); Sat, 30 May 1992 02:32:23 +0200
Received: by steenbok.cwi.nl 
	id AA01086 (5.65b/2.10/CWI-Amsterdam); Sat, 30 May 1992 02:32:22 +0200
Date: Sat, 30 May 1992 02:32:22 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205300032.AA01086.dik@steenbok.cwi.nl>
To: J.M.Kloosterman@research.ptt.nl, cube-lovers@life.ai.mit.edu
Subject: Re:  Lower-bound Kociemba's algorithm

(About my conjecture of 16 moves for phase 2:)
 > Unfortunately Dik's conjecture for phase 2 is too optimistic.
 > Recall the maximum distances of the 4 stages of my algorithm:
 >  1.  7 moves within the group <R, L, F, B, U,D>
 >  2. 10 moves within the group <R, L, F2,B2,U,D>
 >  3.  8 moves within the group <R2,L2,F2,B2,U,D>
 >  4. 18 moves within the group <R2,L2,F2,B2,U,D>
 > (Stage 3 and 4 together requires at most 25 moves.)

 > These number of moves are minimal and cannot be improved within their
 > group of moves.
Did you (since your article) do an exhaustive search?  In your article you
mentioned that you had 6 positions that still do require 18 moves.  And you
mention that you doubted that there would be 17 move solvers.  Have you
proven since then that it can not be done in less than 18?  If not, send me
your positions and I will try.

I have currently a program running that tries all phase 4 positions.  It
is possible to reduce the number of searches from 3,981,312 (the article
contains a typo here) to 428,544 by observing equivalent positions (as
I did mention in a previous article (*)).  Assuming my conjecture of 16 the
complete calculations would take about 1000 to 1500 hours (%).  Not
unprecedented ;-).  (There must be a reason that I am a member of the CWI
research group on large scale computing.)  There are now only two machines
munching at the problem, but there would be no problem to start up a few more
again.  I just did it to see what happens.

dik
--
* The equivalent positions are found by rotation of the complete cube along
the UD axis for a quarter turn, along the RL axis through a half turn and
mirroring along the FRBL plane.  When looking at one dimension only this
reduces the number from 40320 to 2768.  Restricting to Hans's initial positions
in phase 4, this reduces the number from 576 to 62.  So the count becomes:
	62 * 576 * 24 / 2
in stead of
	576 * 576 * 24 / 2 (= ((4!)^5) / 2).
--
% I found that an exhaustive search upto 16 moves takes about 10 seconds.
Increasing to 17 would up the time to 110 seconds.  So if you mail me
the situations for which you do not yet have less than 18 moves I will
have an attempt at them.
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
dik@cwi.nl

From dik@cwi.nl  Sat May 30 18:12:35 1992
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) id AA10599; Sat, 30 May 92 18:12:35 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA26864 (5.65b/2.10/CWI-Amsterdam); Sun, 31 May 1992 00:12:31 +0200
Received: by boring.cwi.nl 
	id AA02915 (5.65b/2.10/CWI-Amsterdam); Sun, 31 May 1992 00:12:30 +0200
Date: Sun, 31 May 1992 00:12:30 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9205302212.AA02915.dik@boring.cwi.nl>
To: J.M.Kloosterman@research.ptt.nl
Subject: Re:  Lower-bound Kociemba's algorithm
Cc: cube-lovers@life.ai.mit.edu

 > I have done an exhaustive search and none of the 6 situations of 18 moves
 > could be reduced to 17 moves (within the group of <R2,L2,F2,B2,U,D>).
 > For the case you want to verify, one of them is:
 >  
 >    L2 U R2 B2 U2 B2 L2 D2 L2 F2 D' L2 B2 F2 L2 F2 U' D
 >  
Of course I verified it ;-).  This one does indeed kill Kociemba's algorithm.
On a fast processor (65 MHz SPARC) with a larger limit database than Kociemba
is using himself (the database is about 5 MByte for the second phase), it took
3 hours 15 minutes to find a minimal solution.  Of 18 moves.

From wft@math.canterbury.ac.nz  Fri Jun 19 03:07:51 1992
Return-Path: <wft@math.canterbury.ac.nz>
Received: from CANTVA.CANTERBURY.AC.NZ by life.ai.mit.edu (4.1/AI-4.10) id AA19564; Fri, 19 Jun 92 03:07:51 EDT
Received: from math.canterbury.ac.nz by csc.canterbury.ac.nz (PMDF #12052) id
 <01GLEQZFO09S9X3ZMD@csc.canterbury.ac.nz>; Fri, 19 Jun 1992 19:07 +1200
Received: by math.canterbury.ac.nz (4.1/SMI-4.1) id AA12708; Fri,
 19 Jun 92 19:07:30 NZS
Date: Fri, 19 Jun 92 19:07:30 NZS
From: wft@math.canterbury.ac.nz (Bill Taylor)
Subject: reminiscences
To: Cube-Lovers@life.ai.mit.edu
Cc: wft@math.canterbury.ac.nz
Message-Id: <9206190707.AA12708@math.canterbury.ac.nz>
X-Envelope-To: Cube-Lovers@AI.AI.MIT.EDU

Allan C. Wechsler asks for general reminiscences from people who solved
the cube. It's just as well hardly anyone's replied, or the list would be
swamped with boring anecdotes ! So maybe I'll add an anecdote or two of
my own.

Dik.Winter@cwi.nl writes 

> > While I'm reminiscing, I should confess that my standard corner operator
> > is still the same as it was then: (FUR)^5, which exchanges two corners,
> > leaves the rest of the corners alone, and fucks the edges completely.
>
>Happens to me also.  I still use operators I found myself in favour of
>(shorter) processes found later in books.  I remember them better!

Very true. This reminds me of what I read in (I think) the math games
column of Scientific American, about mid-to-late 80's. The cubing craze had
largely passed, and someone who had been an addict, but hadn't touched it
for some years, had occasion to try it again. He realized with horror, that he
couldn't remember a single thing! However, as he began to fiddle with the 
cube rather disconsolately, he found himself automatically doing the right
things. "I couldn't remember how to do it, but my fingers could !!", he said.
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~
This was my experience too, a few years ago. It's quite uncanny, like 
starting to ride a bike again after decades of not doing; only more so.

That's what comes of sticking loyally to your first halfway-decent discoveries
on cube-solving. From madly over-addictive use, they become burned into
your brain tissue.   My own pet method has always been to put all the edges
right first, using only common sense (except maybe at the very end some
slight method needed); then put the corners right using the basic
"8-fold way"..... R~ U L U~ R U L~ U~ . We found this eightfold way quite
easy to remember, the face order is very natural, and the sequence of
clockwise vs anti-clockwise turns, i.e. ACCA CCAA, seems somehow like a 
sonnet rhyming scheme (now burnt irrevocably into my finger-moving cortex).

This eightfold way is just a commutator of a face move and (a commutator of
two face moves)); so it turns out to be group-theoretically natural, as
commutators do "as little as possible". The eight-fold way can also be 
viewed in a natural geometric light, as just a standard 3-permutation of
corners, similaritied away from one another to avoid interference. (Don't
know what the standard technical terms for all this are, sorry; it's probably
old hat to most readers here.) Viewing it this way, one can quickly re-create
several (8-fold) variants, and some 10-fold ones, all of the same type, and
all variously useful. By similarities, one can usually put a corner into a
more useful spot, so as to get two corners done at a time, with one 8-fold.

ENOUGH; of teaching grandmothers to suck eggs. I was going to reminisce. Not
many people seem to do the cube this way, that is, edges first. It was shown
to me by my late colleague Brent Wilson (the other of the "we" refered to 
above). At first it seemed a little unnatural, but once you get used to it, 
it seems super efficient. I suppose everyone feels that way about their own 
methods. The particular 8-fold mentioned above was my own invention, so I've 
always had a soft spot for it.

    Brent and I both started out on the cube the same way, which is
I suppose standard. We spent some little time learning to do the base. Then we
spent some considerably longer time learning to do the middle layer. We found
later that we had both expected the same thing:- that when the middle and
base layers were all successfully done, the top layer would automatically
have to be right !! So of course, we were both temporarily devastated when
it turned out otherwise; and we both realized that we were in the presence 
of a mighty puzzle, and were in for some great fun. So we went ahead and
discovered all the usual group-theoretic things, one by one, over the months.

I have anothger reminiscence to tell about my colleague. I once read of
someone, (J.H.Conway ?), who was alleged to do the cube behind his back !
Well Brent practiced this trick also (unaware of anyone else having
done it, if indeed it was done the same way, even). He invented the method
after having discovered the only all-commuting position, i.e. with all
edges flipped, corners all correct. He perfected a smooth method of doing
this behind his back. The trick is, of course, merely to have a pre-prepared
cube in this position. It doesn't QUITE look random, but if you ADD to it
a couple of random twists, it now looks totally random; at first (and second)
glance. He would show this "random" cube to us, let us hold it (very briefly!),
then take it and do the "all-flips" behind his back. Keeping up a continuous 
patter, as he brought it back he would be saying "...so there's only a couple 
of twists to go", and then as it appeared he would do the last two twists by
sight, without hesitation. As the two "randomizing" twists commute with
the other position, he didn't have to memorize them; indeed he could even
let the audience do them ! Of course this would mean he would have to have
the pure "flipped" pattern to start with, which was easier to detect, alas.

Well, one time, he was to give a talk to some school kids. He wanted to do
the cube behind his back, as a piece-de-resistance. He decided to train
himself up into being able to undo FOUR random twists by sight. He duly did
this. Then when the talk came around, he had a cube prepared in "all-flip"
position, with two twists added, to make it look quite random. Then, when
the highlight of the talk came around, he would display it to the class,
let one or two handle it briefly, to agree it was just another muddled up
cube. Then, HE WOULD EVEN ASK two members of the audience to add an extra
random twist each (just to prove the cube wasn't in a prepared position!)
Then he would do the all-flips operation behind his back, keeping up his
patter. He expected to be able to handle undoing the four random flips left
over, by sight, as he was completing his patter.

When the great event came along, everything went perfectly, without a hitch.
BUT, amazingly, by a 144-to-1 chance, the two flips that the audience added
exactly undid the two that he had put on himself !  So when he brought it
from behind his back, it was already perfectly done. Without batting an
eyelid, he brought his patter to a halt then and there. Needless to say, the
kids were even more staggered than they would have been otherwise. He
resisted all imploring entreaties to tell them how it was done (like all
good conjurers); and I don't thimk he ever did the trick again!

By great good luck, however, I have a vieotape of him doing this trick, from
the demo itself. So if any of you are ever in New Zealand, you can
look me up, and ask to see this amazing event !

Like Allan Wechsler, I would be delighted to hear anyone else's reminiscences,
or cube anecdotes generally. There must be tons, so, don't be shy!

Cheers,   Bill Taylor.



From reid@math.berkeley.edu  Thu Aug 20 20:10:13 1992
Return-Path: <reid@math.berkeley.edu>
Received: from math.berkeley.edu by life.ai.mit.edu (4.1/AI-4.10) id AA29497; Thu, 20 Aug 92 20:10:13 EDT
Received: from phnom-penh.berkeley.edu.berkeley.edu by math.berkeley.edu (4.1/1.33(math))
	id AA19361; Thu, 20 Aug 92 17:03:31 PDT
Date: Thu, 20 Aug 92 17:03:31 PDT
From: reid@math.berkeley.edu (michael reid)
Message-Id: <9208210003.AA19361@math.berkeley.edu>
To: ACW@riverside.scrc.symbolics.com, hoey@aic.nrl.navy.mil,
        wft@math.canterbury.ac.nz
Subject: Re: subgroups
Cc: Cube-Lovers@ai.mit.edu

dan hoey writes:

> On 14 Jan 1992,  Allan C. Wechsler posted

> >Regarding the meta-approach of descending through a series of subgroups,
> >how much leverage does properly selecting the chain give you?  It seems
> >like the jump from <F2,B2,...> to <F2,B2,L2,R2,...> is pretty large.
> >There are probably other paths through the subgroup lattice.

> >Does anyone have a table of subgroups?

well, i don't know ALL the subgroups, but i did some investigation
before devising my three stage algorithm.  one of the great advantages
of thistlethwaite's four stage method is that since each subgroup
restricts the motion of various faces, it is routine to exhaustively
search the cosets spaces at each stage, since we only make twists that
leave us in the given space.  so i looked at all possible ways of
restricting various faces, up to symmetry.  there are three possible
restrictions for a face:  no restriction, half turns only, no turns.
our problem is then coloring the faces of the cube with 3 colors, up
to symmetry (rigid and non-rigid).  the polya polynomial for the faces
of the cube under this group of symmetries is:

          ( x^6 + 3 x^5 + 9 x^4 + 13 x^3 + 14 x^2 + 8 x ) / 48

so there are 56 different ways to three-color the faces.  i spent the
better part of an evening and most of the night calculating (by hand)
the orders of these subgroups.  shortly thereafter, i saw an announcement
for the group theory package GAP, which specifically mentions calculating
the order of the rubik's cube group.  so i used the package to verify my
answers.  here's the list (i don't see a canonical way of ordering them):

 1. |<>|                                               =                    1
 2. |<U2>|                     = 2                     =                    2
 3. |<U>|                      = 2^2                   =                    4
 4. |<U2, D2>|                 = 2^2                   =                    4
 5. |<U, D2>|                  = 2^3                   =                    8
 6. |<U, D>|                   = 2^4                   =                   16
 7. |<U2, R2>|                 = 2 3                   =                   12
 8. |<U, R2>|                  = 2^6 3^2 5^2           =                14400
 9. |<U, R>|                   = 2^6 3^8 5^2 7         =             73483200
10. |<U2, R2, L2>|             = 2^5 3                 =                   96
11. |<U, R2, L2>|              = 2^12 3^4 5^2 7        =             58060800
12. |<U2, R, L2>|              = 2^12 3^4 5^2 7        =             58060800
13. |<U2, R, L>|               = 2^14 3^4 5^2 7^2      =           1625702400
14. |<U, R, L2>|               = 2^14 3^11 5^2 7^2     =        3555411148800
15. |<U, R, L>|                = 2^14 3^13 5^3 7^2     =      159993501696000
16. |<U2, R2, F2>|             = 2^5 3^4               =                 2592
17. |<U, R2, F2>|              = 2^8 3^5 5^2 7         =             10886400
18. |<U, R, F2>|               = 2^10 3^12 5^2 7^2     =         666639590400
19. |<U, R, F>|                = 2^18 3^12 5^2 7^2     =      170659735142400
20. |<U2, R2, L2, D2>|         = 2^6 3                 =                  192
21. |<U, R2, L2, D2>|          = 2^13 3^4 5^2 7        =            116121600
22. |<U, R2, L2, D>|           = 2^15 3^4 5^2 7^2      =           3251404800
23. |<U, R, L2, D2>|           = 2^15 3^11 5^2 7^2     =        7110822297600
24. |<U, R, L, D2>|            = 2^15 3^13 5^3 7^2     =      319987003392000
25. |<U, R, L, D>|             = 2^16 3^14 5^3 7^2 11  =    21119142223872000
26. |<U2, R2, L2, F2>|         = 2^11 3^4              =               165888
27. |<U, R2, L2, F2>|          = 2^13 3^5 5^2 7^2      =           2438553600
28. |<U2, R, L2, F2>|          = 2^14 3^5 5^2 7^2      =           4877107200
29. |<U2, R, L, F2>|           = 2^14 3^5 5^2 7^2      =           4877107200
30. |<U, R2, L2, F>|           = 2^14 3^13 5^3 7^2 11  =     1759928518656000
31. |<U2, R2, L, F>|           = 2^14 3^13 5^3 7^2 11  =     1759928518656000
32. |<U2, R, L, F>|            = 2^14 3^13 5^3 7^2 11  =     1759928518656000
33. |<U, R, L2, F>|            = 2^24 3^13 5^3 7^2 11  =  1802166803103744000
34. |<U, R, L, F>|             = 2^24 3^13 5^3 7^2 11  =  1802166803103744000
35. |<U2, F2, R2, L2, B2>|     = 2^13 3^4              =               663552
36. |<U, F2, R2, L2, B2>|      = 2^16 3^5 5^2 7^2      =          19508428800
37. |<U2, F, R2, L2, B2>|      = 2^16 3^5 5^2 7^2      =          19508428800
38. |<U2, F2, R, L, B2>|       = 2^16 3^5 5^2 7^2      =          19508428800
39. |<U2, F, R, L2, B2>|       = 2^16 3^14 5^3 7^2 11  =    21119142223872000
40. |<U, F, R2, L2, B2>|       = 2^16 3^14 5^3 7^2 11  =    21119142223872000
41. |<U2, F, R, L, B2>|        = 2^16 3^14 5^3 7^2 11  =    21119142223872000
42. |<U, F2, R, L, B2>|        = 2^16 3^14 5^3 7^2 11  =    21119142223872000
43. |<U, F, R, L2, B2>|        = 2^27 3^14 5^3 7^2 11  = 43252003274489856000
44. |<U2, F, R, L, B>|         = 2^16 3^14 5^3 7^2 11  =    21119142223872000
45. |<U, F2, R, L, B>|         = 2^27 3^14 5^3 7^2 11  = 43252003274489856000
46. |<U, F, R, L, B>|          = 2^27 3^14 5^3 7^2 11  = 43252003274489856000
47. |<U2, F2, R2, L2, B2, D2>| = 2^13 3^4              =               663552
48. |<U, F2, R2, L2, B2, D2>|  = 2^16 3^5 5^2 7^2      =          19508428800
49. |<U, F2, R2, L2, B2, D>|   = 2^16 3^5 5^2 7^2      =          19508428800
50. |<U, F, R2, L2, B2, D2>|   = 2^16 3^14 5^3 7^2 11  =    21119142223872000
51. |<U, F, R2, L2, B, D2>|    = 2^16 3^14 5^3 7^2 11  =    21119142223872000
52. |<U, F, R, L2, B2, D2>|    = 2^27 3^14 5^3 7^2 11  = 43252003274489856000
53. |<U, F, R2, L2, B, D>|     = 2^16 3^14 5^3 7^2 11  =    21119142223872000
54. |<U, F, R, L, B2, D2>|     = 2^27 3^14 5^3 7^2 11  = 43252003274489856000
55. |<U, F, R, L, B, D2>|      = 2^27 3^14 5^3 7^2 11  = 43252003274489856000
56. |<U, F, R, L, B, D>|       = 2^27 3^14 5^3 7^2 11  = 43252003274489856000

subgroups with the same order are equal (possibly after necessary rotation
of the cube) with the following exceptions: (3, 4), (11, 12), (30, 31) and
(30, 32).  equality of various pairs of subgroups can be obtained from the
three maneuvers:

     R L F2 R2 F B L F2 B2 R2 F2 B2 L F B3 R3 L3  ~  U2 ,
                so that  <L, F, R, B> = <L, F, R, B, U2>,

     F2 U2 L2 F2 R2 U2 F2 R F2 U2 R2 F2 L2 U2 F2  ~  L ,
                so that  <U2, F2, R, L2> = <U2, F2, R, L>  and

     R2 F2 B2 L2 U2 L2 F2 B2 R2  ~  D2 ,
                so that  <U2, F2, R2, L2, B2> = <U2, F2, R2, L2, B2, D2>.


thistlethwaite's filtration is  56 --> 53 --> 49 --> 47 --> 1.
kloosterman replaced  47  by a subgroup not on this list (one not obtained
by restricting face turns).  call this  56 --> 53 --> 49 --> kl --> 1.
(in his final stage, kloosterman allows all twists available in the
subgroup  49.)  my filtration is  56 --> 19 --> 17 --> 1 , which was
chosen precisely because it had the smallest size of the largest coset
space amongst all three stage filtrations with subgroups from the above.
winter's filtration is  56 --> 49 --> kl --> 1.  it may be the case that
this can be improved by replacing  kl  with  17 , and allowing all face
turns available in the subgroup  49.  i haven't had the time to look into
this yet.

using subgroups on the list above, we see that the only reasonable two
stage filtrations are:

56 --> 29 --> 1    with coset sizes     8868372480    and   4877107200
56 --> 22 --> 1    with coset sizes    13302558720    and   3251404800
56 --> 27 --> 1    with coset sizes    17736744960    and   2438553600
56 --> 49 --> 1    with coset sizes     2217093120    and  19508428800
56 --> 13 --> 1    with coset sizes    26605117440    and   1625702400

of these, the best seems to be  56 --> 49 --> 1 , since it has the most
symmetries (16).  the number of symmetries the others have is  4 (for 29),
8 (for 22), 2 (for 27) and 2 (for 13).  furthermore, aside from subgroup
49, the other intermediate groups seem to have too much restriction to
be efficient.  also, of course, dik winter has already calculated that
the stage  56 --> 49  can always be accomplished in 12 face turns.


> On 29 Jan 1992, wft@math.canterbury.ac.nz (Bill Taylor) posted

> > There hasn't been any response to this, seemingly, which is a pity.

> For some reason, I never saw Bill's message.  I just noticed it when
> comparing my files against the archives.  [ Archives seekers note: the
> archives have moved to FTP.LCS.MIT.EDU (18.26.0.36), still in
> directory /pub/cube-lovers. ]

i also seem to have missed both allen's post as well as bill's reply.
perhaps 'twas the twilight zone between the start of my subscription to
cube-lovers and the time it takes recent messages to reach the archives.

however, i don't find the archives on  ftp.lcs , but rather on
ftp.ai.mit.edu.  also i see we've spawned  cube-mail-8.Z.

> > In any event, I would like to know of any other well-known subgroups.
> > There are the slice group; double-slice group; U group; square group;
> > anti-slice group. How many others are there not mentioned here, that 
> > people know of ?

in addition to those listed above there are subgroups generated by
combinations of face turns and slice turns, e.g.  <U, M_R>, <U2, M_R>,
<U, R, M_R>, etc.  i haven't looked at these at all.  there's a lot of
work to be done here.

mike

From azimmerm@rnd.stern.nyu.edu  Mon Oct  5 16:53:08 1992
Return-Path: <azimmerm@rnd.stern.nyu.edu>
Received: from rnd.stern.nyu.edu by life.ai.mit.edu (4.1/AI-4.10) id AA17208; Mon, 5 Oct 92 16:53:08 EDT
Received: by rnd.stern.nyu.edu (4.1/1.34)
	id AA28496; Mon, 5 Oct 92 16:51:57 EDT
Date: Mon, 5 Oct 92 16:51:57 EDT
From: Al Zimmermann <azimmerm@rnd.stern.nyu.edu>
To: Cube-Lovers@ai.mit.edu
Subject: Reminiscences
Message-Id: <CMM.0.90.2.718318317.azimmerm@rnd.gba.nyu.edu>

Is everybody ready for more reminiscences?

I got my first cube at Harrad's in London in October of 1980 while I was on
vacation there with my girl friend.  I spent every non-touristy moment
working out and recording moves until, on day 13, I got the final face.

When we got back to the States, my girl friend and I broke up.  Do you think
there's a moral here?

      Al Zimmermann

From dik@cwi.nl  Mon Aug  2 21:10:32 1993
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA06234; Mon, 2 Aug 93 21:10:32 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA20559 (5.65b/3.8/CWI-Amsterdam); Tue, 3 Aug 1993 03:10:23 +0200
Received: by boring.cwi.nl 
	id AA23300 (4.1/2.10/CWI-Amsterdam); Tue, 3 Aug 93 03:10:22 +0200
Date: Tue, 3 Aug 93 03:10:22 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9308030110.AA23300.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu
Subject: Diameter of cube group?

I have now running (for about 60 days already) a program that implements
Kociemba's algorithm to solve the cube.  It tries to solve random
configurations and stops when a solution of 20 turns or less is found.
The random configurations are created by doing 100 random turns.

Until now, with 9000 configurations tried, all proved to be solvable
in 20 turns or less.

This strongly suggests that the diameter of the cube group is at most
21, or perhaps 22; but not more.

The figure of 9000 configurations in 60 days indicates that solution
of one configuration takes slightly less than 10 minutes.  This is
contrary to what I thought was possible.  Whenever I tried configurations
they were mostly solved within 2 or 3 minutes.  This suggests that the
random configurations are more difficult to solve than what I and many
others brought up as possible difficult patterns.

But I still need to do some analysis on the ouput (now 3 Mb of data).

Continuing and waiting for a config that requires 21 turns, dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
home: bovenover 215, 1025 jn  amsterdam, nederland; e-mail: dik@cwi.nl

From dik@cwi.nl  Wed Aug 25 16:00:57 1993
Return-Path: <dik@cwi.nl>
Received: from charon.cwi.nl by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA09102; Wed, 25 Aug 93 16:00:57 EDT
Received: from boring.cwi.nl by charon.cwi.nl with SMTP
	id AA02929 (5.65b/3.10/CWI-Amsterdam); Wed, 25 Aug 1993 22:00:23 +0200
Received: by boring.cwi.nl 
	id AA14852 (4.1/2.10/CWI-Amsterdam); Wed, 25 Aug 93 22:00:22 +0200
Date: Wed, 25 Aug 93 22:00:22 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9308252000.AA14852.dik@boring.cwi.nl>
To: cube-lovers@life.ai.mit.edu, reid@math.berkeley.edu
Subject: Re:  Diameter of cube group?

 > here's a pattern to try:
 > first do 6 checkerboards of order 2 (F2 B2 R2 L2 U2 D2) and then do
 > superfliptwist.  in other words, the group product of these two elements.

Was certainly one of the hardest to do.  After 17 hours the best was 22
turns, but then results came in, after 18 hours 21 turns, and finally
after 19 hours 20 turns:
  F1 R1 L2 U3 R2 L3 U3 D2 R2 F1 D1 B1 D1 F2 U3 R3 D3 F2 D2 L2
This on an SGI R4K Indigo.

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland
home: bovenover 215, 1025 jn  amsterdam, nederland; e-mail: dik@cwi.nl

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sat Dec  4 09:49:17 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA06967; Sat, 4 Dec 93 09:49:17 EST
Message-Id: <9312041449.AA06967@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 9070; Sat, 04 Dec 93 09:18:44 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 0830; Sat, 4 Dec 1993 09:18:44 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 0521; Sat, 4 Dec 1993 09:15:57 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sat, 4 Dec 1993 09:15:56 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   First Post

This is my first post to Cube-Lovers, so I will introduce myself
briefly.  I have been cubing since about 1979 or 1980 or so when
the cubes first appeared on the market.  I have been cubing with
a computer since about 1985, and have been active on the Internet
since about 1985 (purely a coincidence of dates).  I have looked
for years for a cubing list, and never found one until now.
I always looked for "Rubik" (or sometimes "Rubic").  For some silly
reason, it never occurred to me to look for "cube".

I have long since read Hofstadter's two Scientific American articles,
as well as the reprints in METAMAGICAL THEMAS.  The reprints, by
the way, are excellent because of the additional information in the
appendices.  I also have a copy of Singmaster and Frey's
HANDBOOK OF CUBIC MATH.  I have tried unsuccessfully for years to
get copies of Singmaster's earlier work  --  the circulars, for
example.  However, I suspect that the HANDBOOK includes most if not
all of the earlier material.  Also, (and you won't believe this) I have
just read all thirteen years of the archives of Cube-Lovers.

My primary interest has been in calculating God's Algorithm.  I am
interested in brute force breadth first tree searches.  In other
words, my work is akin to the solutions of the 2x2x2 and the corners
of the 3x3x3 posted by Dan Hoey and others.  It is not akin to
Thistlethwaite's methods.  I am interested to see, however, that
major recent progress appears to have been made on Thistlewaite's
method.

I have calculated God's Algorithm for the 2x2x2 cube and the corners
of the 3x3x3.  My results agree with those that have been posted here,
with the exception that my search is 48 times smaller (24*2), due
to the exploitation of a rotation and reflection group of the cube.
I have also calculated God's Algorithm for the edges of the 3x3x3.
This is a much larger problem, and took about a year running
continuously on two machines.  The resulting output file is about
4.2 gigabytes of data, and is stored on 31 reels of magnetic tape.
This result includes the "48 times smaller" factor, else it would
have been 204 gigabytes of data stored on 1464 reels of magnetic
tape.

I understand that this list has been very quiet of late.  But
assuming some modicum of interest, I will post more details
of my results in subsequent messages.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sat Dec  4 21:07:09 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA01155; Sat, 4 Dec 93 21:07:09 EST
Message-Id: <9312050207.AA01155@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 2589; Sat, 04 Dec 93 21:07:14 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 1511; Sat, 4 Dec 1993 21:07:14 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 4894; Sat, 4 Dec 1993 21:04:25 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sat, 4 Dec 1993 21:04:23 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm for the 2x2x2 Pocket Cube

I want to post my God's Algorithm results for the 2x2x2 cube.
These results generally speaking replicate other results that have
been posted here as far back as ten to twelve years ago.

In order to make my numbers make sense, I need to explain how I count
the states of the 2x2x2 cube.  As has been posted here several times
previously, the number is (7!)(3^6)=3,674,160.  Actually, I prefer
the formulation (7!)(3^7)/3=3,674,160 because the latter formulation
clearly reflects that all the cubies can be rotated but that
rotational orientation of the last one is determined by the
rotational orientation of the others.  But in any case, this
calculation is based on the following.  Let any one cube be fixed
in location and rotational orientation.  Then, there are
7! ways to arrange the other seven cubes, and (3^7)/3 ways to
rotate them.

But there is another way to look at it.  Fix none of the cubes.
Rather,  choose one to be the upper,left,front one, pick a second
one to be the upper,right,front one, etc., so that there are 8!
ways to arrange the eight cubes and (3^8)/3  ways to rotate them.
We have 8!(3^8)/3=88,179,840, which is exactly twenty-four
times larger than 3,674,160.

The reason is that the 3,674,160 figure implicitly assumes
that cubes that differ only in orientation of the overall
cube are equivalent, and there are twenty-four ways to orient
the cube in space (i.e., the order of the rotation group of
the cube is 24).

Conversely, the 88,179,840 figure implicitly assumes that
cubes that differ only in orientation of the overall cube
are distinct.  They can be made equivalent by applying the
rotation group of the cube to form equivalence classes, and
there will be exactly 3,674,160 equivalence classes.  Hence,
the two ways of counting are isomorphic.  However, I do
prefer to characterize the "things" that the 3,674,160 figure
counts as equivalence classes, and I call 3,674,160 the
number of nodes using 24-fold symmetry.

Finally, I apply a second order-24 rotation group (I will explain
how you can have a two order-24 rotation groups on the same cube
in a follow-up post) and an order-2 reflection group.  Hence, the
number of nodes to represent the entire search tree for the 2x2x2
cube should be 88,179,840/(24*24*2)=76,545, where the 76,545 figure
represents the number of equivalence classes and each equivalence
class includes 24*24*2=1152 elements.  As it turns out, a few of
the equivalence classes contain fewer than 1152 elements, so that
the total number of nodes in the search tree is slightly larger
than 76,545, namely 77,802.

The tables of results below include figures both for 24-fold symmetry
and for 1152-fold symmetry.  My search tree was for 1152-fold symmetry
only.  I then sort of "backed in" to the results for 24-fold symmetry
by calculating the size of each equivalence class.  Calculating a
search tree with 77,802 nodes representing equivalence classes, then
calculating the size of each equivalence class, was much faster than
calculating a search tree with 88,179,840 nodes or one with
3,674,160 nodes.

The little exercise with calculating the size of each equivalence
class was very gratifying in at least two respects.  First, it let
me explain the disconcerting difference between 76,545 and 77,802.
Second, it let me confirm that my results were the same as everyone
else who had gone before.

                Results Using Both q-turns and h-turns

        Distance           Number of          Number of
        from               Nodes              Nodes
        Start              using              using
                           24-fold            1152-fold
                           symmetry           symmetry

          0                       1                  1
          1                       9                  2
          2                      54                  5
          3                     321                 19
          4                    1847                 68
          5                    9992                271
          6                   50136               1148
          7                  227536               4915
          8                  870072              18364
          9                 1887748              39707
         10                  623800              13225
         11                    2644                 77
      -----                 -------              -----
      Total                 3674160              77802



                Results Using Only q-turns

        Distance             Number of          Number of
        from                 Nodes              Nodes
        Start                using              using
                             24-fold            1152-fold
                             symmetry           symmetry

          0                       1                  1
          1                       6                  1
          2                      27                  3
          3                     120                  6
          4                     534                 17
          5                    2256                 59
          6                    8969                217
          7                   33058                738
          8                  114149               2465
          9                  360508               7646
         10                  930588              19641
         11                 1350852              28475
         12                  782536              16547
         13                   90280               1976
         14                     276                 10
      -----                 -------              -----
      Total                 3674160              77802



                Results Using Only h-turns

        Distance           Number of          Number of
        from               Nodes              Nodes
        Start              using              using
                           24-fold            1152-fold
                           symmetry           symmetry

          0                       1                  1
          1                       3                  1
          2                       6                  1
          3                      11                  2
          4                       3                  2
      -----                 -------              -----
      Total                      24                  7

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sat Dec  4 23:18:20 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA05338; Sat, 4 Dec 93 23:18:20 EST
Message-Id: <9312050418.AA05338@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 3107; Sat, 04 Dec 93 23:18:20 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 2822; Sat, 4 Dec 1993 23:18:20 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 5413; Sat, 4 Dec 1993 23:15:32 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sat, 4 Dec 1993 23:15:30 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm for the Corners of the 3x3x3

Here are my God's Algorithm results for the corners of the
3x3x3 cube.  I explained in the last post what I mean by
1152-fold symmetry and 24-fold symmetry.  The 1152-fold
symmetry is what I actually calculated.  In this particular
case, I did not do the 24-fold symmetry calculations myself
based on the size of the equivalence classes as I did
with the 2x2x2 cube.  Rather, I went back and found the
figures in the Cube-Lover archives (Dik Winter's post).

             Results Using Both q-turns and h-turns

        Distance           Number of            Number of
        from               Nodes using          Nodes using
        Start              1152-fold            24-fold
                           symmetry             symmetry

          0                       1                   1
          1                       2                  18
          2                       9                 243
          3                      71               2,874
          4                     637              28,000
          5                   4,449             205,416
          6                  24,629           1,168,516
          7                 113,049           5,402,628
          8                 433,611          20,776,176
          9                 947,208          45,391,616
         10                 316,823          15,139,616
         11                   1,481              64,736



             Results Using Only q-turns

        Distance           Number of            Number of
        from               Nodes using          Nodes using
        Start              1152-fold            24-fold
                           symmetry             symmetry

          0                       1                    1
          1                       1                   12
          2                       5                  114
          3                      24                  924
          4                     149                6,539
          5                     850               39,528
          6                   4,257              199,926
          7                  16,937              806,136
          8                  57,800            2,761,740
          9                 180,639            8,656,152
         10                 466,052           22,334,112
         11                 676,790           32,420,448
         12                 392,558           18,780,864
         13                  45,744            2,166,720
         14                     163                6,624


             Results         Using Only h-turns

        Distance           Number of
        from               Nodes using
        Start              1152-fold
                           symmetry


          0                       1
          1                       1
          2                       2
          3                       4
          4                       3


It turns out that the maximum distance from Start is the same
for the corners of the 3x3x3 cube as it is for the 2x2x2 cube.
I found this rather surprising, although the archives of
Cube-Lovers do provide a reasonable explanation.  I am just
going to have to go back and read it five or ten times until
I fully understand it.  In any case, I was curious about the
following question.  Suppose you are N moves from Start on the
corners of the 3x3x3.  How many moves from Start would you be
on the 2x2x2 if the 2x2x2 was in the same configuration as the
corners of the 3x3x3 where you currently were.  As it turns out,
I stored the results for the 2x2x2 in the same data base as
I stored the results for the corners of the 3x3x3, so the
question was easy to answer.  Here are the results.

              Corresponding Distances from Start
                Using Both q-turns and h-turns

         2x2x2       Corner of 3x3x3    Number
     Distance from    Distance from    of Nodes
         Start         Start


           0
                           0                1
                           2                2
                           4                2

           1
                           1                2
                           2                2
                           3                4
                           4                3

           2
                           2                5
                           3               12
                           4               18
                           5                3

           3
                           3               55
                           4              106
                           5               41

           4
                           4              508
                           5              457
                           6               38

           5
                           5            3,948
                           6            1,237
                           7                2

           6
                           6           23,354
                           7            1,992
                           8               20

           7
                           7          111,055
                           8            3,242
                           9               20

           8
                           8          430,349
                           9            5,460
                          10               62

           9
                           9          941,728
                          10            3,770
                          11               20

          10
                          10          312,991
                          11               45

          11
                          11            1,416



              Corresponding Distances from Start
                     Using Only q-turns

         2x2x2       Corner 3x3x3       Number
     Distance from    Distance from    of Nodes
         Start         Start

           0
                           0                1
                           2                1
                           4                2
                           6                1

           1
                           1                1
                           3                2
                           5                2

           2

                           2                4
                           4               10
                           6                6

           3
                           3               22
                           5               46
                           7                4

           4
                           4              137
                           6              145

           5
                           5              802
                           7              356

           6
                           6            4,105
                           8              474

           7

                           7           16,577
                           9               83

           8
                           8           57,326
                          10               24
                          12               24

           9
                           9          180,556
                          11              148

          10
                          10          466,028
                          12              192

          11
                          11          676,642
                          13              144

          12
                          12          392,342

          13
                          13           45,600

          14
                          14              163



              Corresponding Distances from Start
                     Using Only h-turns

         2x2x2       Corner of 3x3x3    Number
     Distance from    Distance from    of Nodes
         Start         Start


           0
                           0                1
                           2                1

           1
                           1                1
                           3                1

           2
                           2                1

           3
                           3                3

           4
                           4                3

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sun Dec  5 00:03:57 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA07956; Sun, 5 Dec 93 00:03:57 EST
Message-Id: <9312050503.AA07956@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 3262; Sun, 05 Dec 93 00:04:01 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 3276; Sun, 5 Dec 1993 00:04:01 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 5628; Sun, 5 Dec 1993 00:01:11 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sun, 5 Dec 1993 00:01:08 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm for the Edges of the 3x3x3

Here are my God's Algorithm results for the edges of the
3x3x3 cube.  I explained in the last post what I mean by
1152-fold symmetry.  All results below are for 1152-fold
symmetry.  I am working on the 24-fold case, but I am not
quite done.  The 24-fold case is just a matter of determining
the sizes of the equivalence classes in the 1152-fold case.

One item of terminology needs to be explained.  Several
people, including myself, have posted results for the
2x2x2 cube and for the corners of the 3x3x3 cube.  If you
take the term "corners of the 3x3x3 cube" absolutely
literally, it is completely isomorphic to the 2x2x2 cube.
When people have posted results for the "corners of the
3x3x3 cube", they all (including myself) really mean
"corners plus centers of the 3x3x3".  See below:

   --------------      ---------------------    -------------------
   |  x  |  x   |      |  x   |      |  x  |    |  x  |     |  x  |
   |     |      |      |      |      |     |    |     |     |     |
   |-----|-------      -------|------|------    ------|-----|------
   |  x  |  x   |      |      |      |     |    |     |  x  |     |
   |     |      |      |      |      |     |    |     |     |     |
   --------------      -------|------|------    ------|-----|------
       2x2x2           |  x   |      |  x  |    |  x  |     |  x  |
                       |      |      |     |    |     |     |     |
                       ---------------------    -------------------
                          Corners of 3x3x3       Corners + Centers

Thus, when I say I have solved the "edges of the 3x3x3", I need
to clarify what I mean.  I have solved the "edges without the
centers".  I suppose my next project will be "edges with the
centers".  Unfortunately, "edges with the centers" is a twenty-four
times larger problem than is "edges without the centers".  "Edges
without the centers" took about a year running 24 hours a day,
7 days a week, on two machines.  I am going to have to rethink
"edges with the centers" before I start.  I don't want it to take
24 years.

      ---------------------    -------------------
      |      |  x   |     |    |     |  x  |     |
      |      |      |     |    |     |     |     |
      -------|------|------    ------|-----|------
      |  x   |      |  x  |    |  x  |  x  |  x  |
      |      |      |     |    |     |     |     |
      -------|------|------    ------|-----|------
      |      |  x   |     |    |     |  x  |     |
      |      |      |     |    |     |     |     |
      ---------------------    -------------------
      Edges without Centers     Edges with Centers


            Results using q-turns only

      Distance                 Number of
     from Start                Nodes using
                              1152-fold Symmetry

          0                             1
          1                             1
          2                             5
          3                            25
          4                           215
          5                         1,860
          6                        16,481
          7                       144,334
          8                     1,242,992
          9                    10,324,847
         10                    76,993,295
         11                   371,975,385
         12                   382,690,120
         13                     8,235,392
         14                            54
         15                             1



            Results using q-turns and h-turns

      Distance                 Number of
     from Start                Nodes using
                              1152-fold Symmetry

          0                             1
          1                             2
          2                             9
          3                            75
          4                           919
          5                        11,344
          6                       139,325
          7                     1,664,347
          8                    18,524,022
          9                   167,864,679
         10                   582,489,607
         11                    80,930,364
         12                           314

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sun Dec  5 00:42:45 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from MITVMA.MIT.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AB08439; Sun, 5 Dec 93 00:42:45 EST
Message-Id: <9312050542.AB08439@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 3342; Sun, 05 Dec 93 00:28:55 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 3487; Sun, 5 Dec 1993 00:28:55 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 5701; Sun, 5 Dec 1993 00:26:08 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sun, 5 Dec 1993 00:26:07 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Addendum to God's Algorithm for the 2x2x2 Cube

I had intended to include the following table in my first
post concerning God's Algorithm for the 2x2x2 cube, but
I forgot.  It addresses the question of how large are the
equivalence classes in the search tree, where the equivalence
classes are generated by the two rotational symmetry groups
and the one reflectional symmetry group.  Most of the
equivalence classes have 24*24*2=1152 elements, but some have
fewer.


         Size of          Number          Total Number
         Equivalence       of              of
         Class            Nodes           Permutations
                                          Represented

            24                 1                   24
            48                 1                   48
            72                 3                  216
            96                 1                   96
           144                14                2,016
           192                15                2,880
           288               135               38,880
           384                32               12,288
           576             2,208            1,271,808
         1,152            75,392           86,851,584
          ----             -----             --------
         Total            77,802           88,179,840

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sun Dec  5 17:57:22 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA04554; Sun, 5 Dec 93 17:57:22 EST
Message-Id: <9312052257.AA04554@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 6913; Sun, 05 Dec 93 17:57:23 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 3049; Sun, 5 Dec 1993 17:57:22 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 8963; Sun, 5 Dec 1993 17:54:49 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sun, 5 Dec 1993 17:54:48 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Equivalence Classes for God's Algorithm for Edges of 3x3x3

        Number of      Size of        Total
       Equivalence    Equivalence     States
           Classes      Class

                 4       24                96
                 2       48                96
                12       72               864
                16       96             1,536
               110      144            15,840
                70      192            13,440
             1,544      288           444,672
             1,252      384           480,768
           128,858      576        74,222,208
       851,493,140     1152   980,920,097,280

       851,625,008            980,995,276,800

Note that 980,995,276,800=12!(2^12)/2, so the proper total was
obtained.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Sun Dec  5 21:27:02 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA13028; Sun, 5 Dec 93 21:27:02 EST
Message-Id: <9312060227.AA13028@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 8009; Sun, 05 Dec 93 20:56:33 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 6791; Sun, 5 Dec 1993 20:56:33 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 9969; Sun, 5 Dec 1993 20:54:05 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Sun, 5 Dec 1993 20:54:04 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm, 24-fold Symmetry, Edges of 3x3x3

I just finished tabulating the results with 24-fold symmetry for
the edges of the 3x3x3 cube.  I have added them to the table
I posted earlier today which had 1152-fold symmetry.

A couple of reminders.  In the case of 1152-fold symmetry, most but not
all of the equivalence classes have exactly 1152 elements.  In the case
of 24-fold symmetry, every equivalence class has exactly 24 elements.
Thus, you can almost, but not quite, get from the 1152-fold column
to the 24-fold column by multiplying by 48.  Also, my program actually
generated the 1152-fold column.  However, it did not generate the
24-fold column.  That would have taken far too long.  Rather, I generated
the 24-fold column from the 1152-fold column by determining the sizes
of all the equivalence classes.  Finally, note that the total figure
for the 24-fold symmetry column can be calculated as
40,874,803,200 = [12!(2^12)/2] / 24, so the total is correct.

            Results using q-turns only

      Distance            Number of            Number of
     from Start           Nodes using          Nodes using
                         1152-fold Symmetry    24-fold Symmetry

          0                        1                   1
          1                        1                  12
          2                        5                 114
          3                       25               1,068
          4                      215               9,759
          5                    1,860              88,144
          6                   16,481             786,500
          7                  144,334           6,916,192
          8                1,242,992          59,623,239
          9               10,324,847         495,496,593
         10               76,993,295       3,695,351,994
         11              371,975,385      17,853,871,137
         12              382,690,120      18,367,613,703
         13                8,235,392         395,043,663
         14                       54               1,080
         15                        1                   1

       Total             851,625,008      40,874,803,200


            Results using q-turns and h-turns

      Distance            Number of          Number of
     from Start           Nodes using        Nodes using
                         1152-fold Symmetry   24-fold Symmetry

          0                        1                 1
          1                        2                18
          2                        9               243
          3                       75             3,240
          4                      919            42,359
          5                   11,344           538,034
          6                  139,325         6,666,501
          7                1,664,347        79,820,832
          8               18,524,022       888,915,100
          9              167,864,679     8,056,929,021
         10              582,489,607    27,958,086,888
         11               80,930,364     3,883,792,136
         12                      314             8,827

      Total              851,625,008    40,874,803,200

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU  Mon Dec  6 18:34:42 1993
Return-Path: <@mitvma.mit.edu,@WVNVM.WVNET.EDU:BRYAN@WVNVM.WVNET.EDU>
Received: from mitvma.mit.edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA01891; Mon, 6 Dec 93 18:34:42 EST
Message-Id: <9312062334.AA01891@life.ai.mit.edu>
Received: from MITVMA.MIT.EDU by mitvma.mit.edu (IBM VM SMTP V2R2)
   with BSMTP id 1564; Mon, 06 Dec 93 18:34:47 EST
Received: from WVNVM.WVNET.EDU (NJE origin MAILER@WVNVM) by MITVMA.MIT.EDU
 (LMail V1.1d/1.7f) with BSMTP id 5497; Mon, 6 Dec 1993 18:34:47 -0500
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 3827; Mon, 6 Dec 1993 18:32:16 -0500
X-Acknowledge-To: <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
Date:      Mon, 6 Dec 1993 18:32:15 EST
From: "Jerry Bryan" <BRYAN%WVNVM.BITNET@mitvma.mit.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Unique Antipodal of the 3x3x3 Edges

In answer to the question by Dan Hoey, I printed out the unique
antipodal of the 3x3x3 edges  --  the one configuration that is
15 moves from Start using only q-turns on the edges of the 3x3x3.

It is really quite extraordinary and wonderful.  I already knew
that there were only four equivalence classes with 24 elements.
Well, two of them are Start itself and its antipodal.  Without
further ado:


          *6*              *6*
          6*6              3*4
          *6*              *1*
          *2*              *5*
          2*2              3*4
          *2*              *2*
       *3**1**4*        *1**1**1*
       3*31*14*4        5*23*42*5
       *3**1**4*        *6**6**6*
          *5*              *2*
          5*5              3*4
          *5*              *5*

         Start          Antipodal

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From dseal@armltd.co.uk  Tue Dec  7 12:02:56 1993
Return-Path: <dseal@armltd.co.uk>
Received: from eros.britain.eu.net by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA08106; Tue, 7 Dec 93 12:02:56 EST
Received: from armltd.co.uk by eros.britain.eu.net with UUCP 
          id <sg.18978-0@eros.britain.eu.net>; Tue, 7 Dec 1993 16:42:43 +0000
Received: by armltd.co.uk (5.51/Am23) id AA04366; Tue, 7 Dec 93 16:13:04 GMT
Date: Tue, 07 Dec 93 16:13:51 GMT
From: dseal@armltd.co.uk (David Seal)
To: (Cube) cube-lovers@ai.mit.edu
Subject: Re: Unique antipode of edges only
Message-Id: <2D04ABBF@dseal>


> Someone else remarks that it's "got to be all edges flipped in place",
> and Jerry Bryan remarks that it is.
>
> >           *6*              *6*
> >           6*6              3*4
> >           *6*              *1*
> >           *2*              *5*
> >           2*2              3*4
> >           *2*              *2*
> >        *3**1**4*        *1**1**1*
> >        3*31*14*4        5*23*42*5
> >        *3**1**4*        *6**6**6*
> >           *5*              *2*
> >           5*5              3*4
> >           *5*              *5*
>
> I disagree.  Look at the 1-2 edge.  If it's "flipped in place", then
> since it appears to be fixed, the cube must flip around it.  But then
> the four 3 faces would be where the 4 faces actually are.  No, it's
> more complicated than just all-edges-flipped.
>
> "[Q]uite extraordinary and wonderful" it is.

It is in fact the position arrived at by flipping all edges in place, *then*
reflecting the entire configuration. I believe this also tells us what the
other two equivalence classes with just 24 elements are: they are the
results of doing each of these two operations separately.

David Seal
dseal@armltd.co.uk

From @wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU  Mon May 30 22:48:07 1994
Return-Path: <@wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA22299; Mon, 30 May 94 22:48:07 EDT
Message-Id: <9405310248.AA22299@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 2575; Mon, 30 May 94 21:36:09 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 6359; Mon, 30 May 1994 21:36:08 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Mon, 30 May 1994 21:36:07 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Branching Factors and God's Algorithm Search Trees

At various times, there have been discussions about what the maximum
distance from Start might be in God's algorithm.  One argument is made
with respect to worst/best case branching factors.  For example,
a simple calculation is that the first move has at most twelve
possibilities and that each subsequent move has eleven possibilities,
when dealing with Q-turns only.  For Q-turns plus H-turns, the same
argument would be eighteen possibilities for the first move and seventeen
possibilities for each subsequent move.

My experience is that search trees tend to develop relatively
constant branching factors after some sort of variable startup.
I expect Rubik's cube to be no different.  I just wonder if anyone
has calculated some number of levels for the full Rubik's cube,
enough levels for the hypothesized steady state branching factor
to be achieved.  I have not done so, but if anyone has, it might
shed considerable light on the question of the maximum distance
from Start.

Subsets of the cube such as corners only and edges only have been
calculated.  It is suggestive to examine branching factors for the
cases which have already been calculated.  The question of "average
branching factor" is subject to interpretation because it is not
necessarily clear when the distribution has achieved its steady
state.  I am including a number of tables giving branching factors
for the cases which have been calculated already.  I will preface
the tables with the following comments:

   1. The distributions for edges-only cubes have a variable branching
      factor during a startup phase, then have a relatively constant
      branching factor for several levels. and finally the distribution
      has sort of a tail.

   2. The distributions for corners-only cubes have a variable branching
      factor during a startup phase, and almost immediately the
      distribution has a tail.  The number of cases simply is not
      large enough to support an extended constant branching factor
      in the middle of the distribution.  It's sort of like a very
      short airplane flight where it is time to descend about the
      time the ascent is completed.

   3. I would expect the distributions for a full cube to have an
      even longer period with a constant branching factor than
      the distributions for edges-only cubes because the number
      of cases is so much larger.  There should be plenty of time
      for a plateau between the startup phase and any tail of the
      distribution.

   4. There are an equal number of odd and even permutations.  For
      the cases where you restrict yourself to Q-turns, there are
      therefore equal numbers of states an even distance from Start
      and an odd distance from Start.  Hence, the distribution tends
      either to have two adjacent levels with approximately equal
      numbers of states, or else tends to have one dominant level with
      a level on each side of the dominant level with about half
      the number of states in the dominant level.

   5. For the cases where you allow both Q-turns and H-turns, there
      tends to be one dominant level which contains most of the
      of the states.

   6. Those of you who followed all the traffic on this list in
      December and January will recall that my work with God's
      algorithm exploits symmetric conjugates in order to reduce
      the size of the problem.  It turns out that using conjugates
      does not change the average branching factor once you get
      past the startup portion of the distribution.  This effect
      can be a bit hard to see for corners-only cubes because the
      steady state portion of the distribution is so short, but
      the effect is very striking for edges-only cubes.  I would
      expect the effect to be very striking, as well, for the
      case of the full cube.

      ------------------------------------------------------------------

              2x2x2 Cube using Q-turns and H-turns

    Distance    Number of  Branching    Number of  Branching   Ratio of
        from        Cubes     Factor       M          Factor   Cubes to
       Start                           Conjugates            Conjugates

           0            1                       1                  1.00
           1            9       9.00            2       2.00       4.50
           2           54       6.00            5       2.50      10.80
           3          321       5.94           19       3.80      16.89
           4         1847       5.75           68       3.58      27.16
           5         9992       5.41          271       3.99      36.87
           6        50136       5.02         1148       4.24      43.67
           7       227536       4.54         4915       4.28      46.29
           8       870072       3.82        18364       3.74      47.38
           9      1887748       2.17        39707       2.16      47.54
          10       623800       0.33        13225       0.33      47.17
          11         2644       0.00           77       0.01      34.34

    Total/Avg     3674160     ? 4.83        77802     ? 3.54      47.22

      ------------------------------------------------------------------

              2x2x2 Cube using Q-turns

    Distance    Number of  Branching    Number of  Branching   Ratio of
        from        Cubes     Factor       M          Factor   Cubes to
       Start                           Conjugates            Conjugates

           0            1                       1                  1.00
           1            6       6.00            1       1.00       6.00
           2           27       4.50            3       3.00       9.00
           3          120       4.44            6       2.00      20.00
           4          534       4.45           17       2.83      31.41
           5         2256       4.22           59       3.47      38.24
           6         8969       3.98          217       3.68      41.33
           7        33058       3.69          738       3.40      44.79
           8       114149       3.45         2465       3.34      46.31
           9       360508       3.16         7646       3.10      47.15
          10       930588       2.58        19641       2.57      47.38
          11      1350852       1.45        28475       1.45      47.44
          12       782536       0.58        16547       0.58      47.29
          13        90280       0.12         1976       0.12      45.69
          14          276       0.00           10       0.01      27.60

    Total/Avg     3674160     ? 3.05        77802     ? 2.92      47.22

      ------------------------------------------------------------------

              Corners of 3x3x3 Cube using Q-turns and H-turns

    Distance    Number of  Branching    Number of  Branching   Ratio of
        from        Cubes     Factor       M          Factor   Cubes to
       Start                           Conjugates            Conjugates

           0            1                       1                  1.00
           1           18      18.00            2       2.00       9.00
           2          243      13.50            9       4.50      27.00
           3         2874      11.83           71       7.89      40.48
           4        28000       9.74          637       8.97      43.96
           5       205416       7.34         4449       6.98      46.17
           6      1168516       5.69        24629       5.54      47.44
           7      5402628       4.62       113049       4.59      47.79
           8     20776176       3.85       433611       3.84      47.91
           9     45391616       2.18       947208       2.18      47.92
          10     15139616       0.33       316823       0.33      47.79
          11        64736       0.00         1481       0.00      43.71

    Total/Avg    88179840     ? 4.74      1841970     ? 4.63      47.87

      ------------------------------------------------------------------

              Corners of 3x3x3 Cube using Q-turns

    Distance    Number of  Branching    Number of  Branching   Ratio of
        from        Cubes     Factor       M          Factor   Cubes to
       Start                           Conjugates            Conjugates

           0            1                       1                  1.00
           1           12      12.00            1       1.00      12.00
           2          114       9.50            5       5.00      22.80
           3          924       8.11           24       4.80      38.50
           4         6539       7.08          149       6.21      43.89
           5        39528       6.04          850       5.70      46.50
           6       199926       5.06         4257       5.01      46.96
           7       806136       4.03        16937       3.98      47.60
           8      2761740       3.43        57800       3.41      47.78
           9      8656152       3.13       180639       3.13      47.92
          10     22334112       2.58       466052       2.58      47.92
          11     32420448       1.45       676790       1.45      47.90
          12     18780864       0.58       392558       0.58      47.84
          13      2166720       0.12        45744       0.12      47.37
          14         6624       0.00          163       0.00      40.64

    Total/Avg    88179840     ? 4.48      1841970     ? 4.29      47.87

      ------------------------------------------------------------------

         Edges of 3x3x3 Cube Without Centers using Q-turns and H-Turns

    Distance    Number of  Branching    Number of  Branching   Ratio of
        from        Cubes     Factor       M          Factor   Cubes to
       Start                           Conjugates            Conjugates

           0            1                       1                  1.00
           1           18      18.00            2       2.00       9.00
           2          243      13.50            9       4.50      27.00
           3         3240      13.33           75       8.33      43.20
           4        42359      13.07          919      12.25      46.09
           5       538034      12.70        11344      12.34      47.43
           6      6666501      12.39       139325      12.28      47.85
           7     79820832      11.97      1664347      11.95      47.96
           8    888915100      11.14     18524022      11.13      47.99
           9   8056929021       9.06    167864679       9.06      48.00
          10  27958086888       3.47    582489607       3.47      48.00
          11   3883792136       0.14     80930364       0.14      47.99
          12         8827       0.00          314       0.00      28.11

    Total/Avg 40874803200    ? 12.26    851625008    ? 11.99      48.00


      ------------------------------------------------------------------

              Edges of 3x3x3 Cube Without Centers Using Q-turns

    Distance    Number of  Branching    Number of  Branching   Ratio of
        from        Cubes     Factor       M          Factor   Cubes to
       Start                           Conjugates            Conjugates

           0            1                       1                  1.00
           1           12      12.00            1       1.00      12.00
           2          114       9.50            5       5.00      22.80
           3         1068       9.37           25       5.00      42.72
           4         9759       9.14          215       8.60      45.39
           5        88144       9.03         1860       8.65      47.39
           6       786500       8.92        16481       8.86      47.72
           7      6916192       8.79       144334       8.76      47.92
           8     59623239       8.62      1242992       8.61      47.97
           9    495496593       8.31     10324847       8.31      47.99
          10   3695351994       7.46     76993295       7.46      48.00
          11  17853871137       4.83    371975385       4.83      48.00
          12  18367613703       1.03    382690120       1.03      48.00
          13    395043663       0.02      8235392       0.02      47.97
          14         1080       0.00           54       0.00      20.00
          15            1       0.00            1       0.02       1.00

    Total/Avg 40874803200     ? 8.80    851625008     ? 8.63      48.00

      ------------------------------------------------------------------

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU  Wed Jun 29 15:00:05 1994
Return-Path: <@wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA23837; Wed, 29 Jun 94 15:00:05 EDT
Message-Id: <9406291900.AA23837@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 4592; Wed, 29 Jun 94 13:56:03 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 1494; Wed, 29 Jun 1994 13:56:03 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Wed, 29 Jun 1994 13:56:02 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Comments on Cube Lengths (Long, 2 of 2)

   (continuation)

I have described this data base structure once before (a little
less formally before), but I wanted to describe it again because
there is some interesting (to me, at least) analysis that can be
derived from the data base, over and above God's algorithm.

First, it is interesting to compare |{m'Xmc}| to the various |Yc[i]|.
Recall that |Yc[i]| >= |{m'Xmc}| for all i in 1..24.  Also, by the
definition of |{m'Xmc}|, there is at least one i in 1..24 such that
|Yc[i]| = |{m'Xmc}|.

I posted a comparison of |{m'Xmc}| to |Yc[i]| for corners-only cubes
on 4 December 1993.  (I have the "without centers" part of the edges-only
data base done, but it will take many more months to
complete the "with centers" part.  So corners-only is the only
complete data base we have to work with.)

At the time, I received a couple of comments to the effect
that people didn't understand what I was comparing to what.  I hope
this note clarifies the situation.  For example (and referring to my
previous note with respect to corners-only cubes), there is only one
element of the form {m'Xmc} for which |{m'Xmc}| = 0.  The only element
for which the length is 0 is Start, but in a corners only cube without
centers, any rotation of Start is still at Start and still has length 0.

Here is a brief excerpt from my note of 4 December 1993.

              Corresponding Distances from Start
                     Using Only q-turns

        Without           With
        Centers         Centers         Number
     Distance from    Distance from    of Nodes
         Start         Start

           0
                           0                1
                           2                1
                           4                2
                           6                1

What this means is as follows.  First, we have |{m'Imc}| = 0.  Let
Y=Repr({m'Imc}).  Then, there is 1 element of the form Yc for which
|Yc|=0, 1 element of the form Yc for which |Yc|=2, 2 elements of the
form Yc for which |Yc|=4, and 1 element of the form Yc for which
|Yc|=6.

In words, suppose you have a corners-only cube (peel off the edge
tabs, but keep the corners and centers).  Then, suppose the
corners look "solved" if you ignore the centers.  The corners will
be rotated relative to the centers.  In all, there are 24 different
ways they can be rotated, including the identity, where they
are not rotated.

But under M-conjugancy, some of the 24 rotations are equivalent.
Under M-conjugancy, there is one way they can be 0 moves from Start,
one way they can be two moves from Start (RL' is equivalent to DU',
for example ), two ways they can be four moves from Start, and one way
they can be six moves from Start.  Among other things, this says that any
rotation of the corners (ignoring the edges) can be accomplished
in no more than six quarter turns.

This example illustrates why a set of the form {m'Xmc} may be
partitioned into "up to" twenty-four elements of the form
{m'Xm}, rather than "exactly" twenty-four elements.  Normally,
a set of the form  {m'Xmc} contains 1152 elements,
where 1152=24*48.  It can in turn be partitioned into twenty-four
elements of the form {m'Xm} which contain forty-eight elements each.
But cubes which are "symmetric" reduce the number because
various M-conjugates are equivalent.

I normally think of the God's algorithm data base as a matrix, with
the rows indexed by the representative elements Y, and the columns
indexed by C (or more simply, by 1..24).  Because of M-conjugate
symmetry, there are always a few empty cells in the matrix.

M-conjugate symmetry did not cause me any computational difficulty
when I was working with cubes without centers.  That is,
suppose {m'(X1)mc} and {m'(X2)mc} are the same set for X1 not equal
X2.  My "representative element calculator" would calculate the
same representative element Y in both cases.  But in the case of
cubes with centers, the "representative element calculator" had to
calculate both a representative element Y and an associated rotation
index Cind in 1..24.

When a set {m'Xmc} had exactly 1152 elements (most of the time), the
calculation of Cind was correct.  But when a set {m'Xmc} had fewer
than 1152 elements, I would get a different Cind depending on which
element of the set I started with.  That is, the loops in the program
actually calculate 1152 elements in any case, but if the set really has
less than 1152 elements, then some of the elements are generated
multiple times.  (The loops have no way of knowing ahead of time how
many elements are going to be in the set.)  The generation of the same
set elements multiple times severely messed up the calculation of Cind
until I figured out what was going on.

I want to finish by getting back to what I started with, the lengths
of cubes.  As I said, the God's algorithm results for edges without
centers are complete (posted to the list back in December), but the
God's algorithm calculations for edges with centers are still work
in progress.  However, I noticed something striking about the
partial edges with centers results when I compared them with the
completed edges without centers results.  For example, here is a
table which compares the results when using q-turns only.


    Distance    Number of  Branching    Number of  Branching
        from   M-Conjugate   Factor    M-Conjugate   Factor
       Start     Classes                 Classes
                Without                  With
                Centers                 Centers

           0           1                     1
           1           1       1.00          1         1.00
           2           5       5.00          5         5.00
           3          25       5.00         25         5.00
           4         215       8.60        215         8.60
           5        1860       8.65       1886         8.77
           6       16481       8.86      16902         8.96
           7      144334       8.76     150442         8.90
           8     1242992       8.61    1326326         8.81
           9    10324847       8.31   11505339         8.67
          10    76993295       7.46   96755918         8.40
          11   371975385       4.83  750089528         7.75
          12   382690120       1.03      ....
          13     8235392       0.02      work
          14          54       0.00       in
          15           1       0.02    progress

    Total      851625008

As you can see, with or without centers, there are the same number
of cubes (actually, equivalence classes) at each distance from
Start from level 0 through level 4.  From level 5 on, there are more
cubes with centers than without.  Why is the number the same
through level 4, and what happens at level 5 to make the numbers
different?  Actually, overall there are about twenty-four times more
cubes with centers than without, so it is not surprising to find
more cubes with centers than without at fairly low levels in the
search tree.  So fundamentally, the question is, why does the
divergence occur at level 5?

Well, I can't explain why it is level 5 exactly, but I can explain
what is going on.  Consider level 0.  There is one row in the data
base where |{m'Xmc}|=0.  There are twenty-four cells in the same row
for |Yc[i]|, corresponding to the twenty-four rotations of the
representative element Y.  For exactly one of these cells, we have
|Yc[i]|=0.  The remainder of the cells are either undefined (meaning
the cell represents a rotation which is M-conjugate equivalent with
another rotation), or else we have |Yc[i]|>=5.  Hence, any
rotation of the edges of the cube requires at least 5 q-turns to
accomplish.  After the data base is complete, we can determine
exactly how many q-turns are required to accomplish each rotation of
the edges, just as we can already do with the corners.

Similar comments apply to level 1 through 4.  There is exactly one
rotation of the representative element that has the same length as
representative element.  All the other rotations of the representative
element are either M-conjugate equivalent to the representative
element, or else have a length greater than or equal to 5.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU  Mon Jul 18 10:44:30 1994
Return-Path: <@wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA25760; Mon, 18 Jul 94 10:44:30 EDT
Message-Id: <9407181444.AA25760@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 6338; Mon, 18 Jul 94 10:41:50 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 7644; Mon, 18 Jul 1994 10:41:50 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Mon, 18 Jul 1994 10:41:49 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm, Additional Level

The following is for Q-turns only, whole cubes (both corners and
edges), and not considering M-conjugates.  I think it would be
possible to squeeze out another couple of levels by considering
M-conjugates.  The best previous result I have found in the
archives was through level 7 (reported on 7 December 1981, and again
on 3 August 1992).

            Distance              Number     Branching
              from                  of         Factor
             Start                Cubes


                 0                      1
                 1                     12     12.00
                 2                    114      9.50
                 3                  1,068      9.37
                 4                 10,011      9.37
                 5                 93,840      9.37
                 6                878,880      9.37
                 7              8,221,632      9.35
                 8             76,843,595      9.35   (new)


 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU  Tue Jul 19 19:09:07 1994
Return-Path: <@wvnvm.wvnet.edu:BRYAN@WVNVM.WVNET.EDU>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA00316; Tue, 19 Jul 94 19:09:07 EDT
Message-Id: <9407192309.AA00316@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 0827; Tue, 19 Jul 94 11:43:12 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.1d/1.7f) with BSMTP id 3312; Tue, 19 Jul 1994 11:43:12 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Tue, 19 Jul 1994 11:43:11 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm, Minor Progress, Q+H

Surprisingly, there seems not to be anything in the archives for
God's Algorithm for Q+H moves for the whole cube past level 3.
Here are some updated results:

                Distance           Number     Branching
                 from                 of       Factor
                Start               Cubes

                   0                    1
                   1                   18     18.000
                   2                  243     13.500
                   3                3,240     13.333
                   4               43,239     13.345  (new)
                   5              574,908     13.296  (new)
                   6            7,618,438     13.252  (new)
                   7          100,803,036     13.231  (new)

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From @mail.uunet.ca:mark.longridge@canrem.com  Tue Aug  9 15:17:23 1994
Return-Path: <@mail.uunet.ca:mark.longridge@canrem.com>
Received: from seraph.uunet.ca ([142.77.1.1]) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA02832; Tue, 9 Aug 94 15:17:23 EDT
Received: from portnoy.canrem.com ([198.133.42.251]) by mail.uunet.ca with SMTP id <86930-4>; Tue, 9 Aug 1994 15:17:13 -0400
Received: from canrem.com by portnoy.canrem.com (4.1/SMI-4.1)
	id AA15464; Tue, 9 Aug 94 15:14:38 EDT
Received: by canrem.com (PCB-UUCP 1.1f)
	id 1A9A39; Tue,  9 Aug 94 13:57:35 -0400
To: cube-lovers@life.ai.mit.edu
Reply-To: CRSO.Cube@canrem.com
Sender: CRSO.Cube@canrem.com
Subject: < U, R> Group
From: mark.longridge@canrem.com (Mark Longridge)
Message-Id: <60.783.5834.0C1A9A39@canrem.com>
Date: Tue, 9 Aug 1994 01:48:00 -0400
Organization: CRS Online  (Toronto, Ontario)

Well I decided to pull a "Jerry Byran" and take another look at
 some cube results, plus take a look at some new groups.


        Analysis of the 3x3x3 squares group
        -----------------------------------

                  (h only)      branching
Moves Deep       arrangements    factor      loc max (h only)

  0                    1           --             0
  1                    6           6              0
  2                   27           4.5            0
  3                  120           4.444          0
  4                  519           4.325          0
  5                1,932           3.722          0
  6                6,484           3.356          1  (6 X pattern)
  7               20,310           3.132          0
  8               55,034           2.709         65
  9              113,892           2.069      1,482
 10              178,495           1.567      7,379
 11              179,196           1.004     25,980
 12               89,728           0.501     50,320
 13               16,176           0.180     11,328
 14                1,488           0.092        912
 15                  144           0.096        144
                 -------                     ------
                 663,552                     97,611

        Analysis of the 3x3x3 <U, R> group
        ----------------------------------

                                          branching
Moves Deep       arrangements (q only)     factor

  0                    1                      --
  1                    4                       4
  2                   10                       2.5
  3                   24                       2.4
  4                   58                       2.416
  5                  140                       2.413
  6                  338                       2.414
  7                  816                       2.414
  8                1,970                       2.414
 program starts to really bog down after this...

  I leave it to Jerry or Dan to check my results. I checked up to 2
moves deep by hand and verified 10 different positions. What I don't
understand is how Jerry manages to look at so many cube positions:

On full 3x3x3 cube,   7     100,803,036     13.231  (new)

  Using 10 bytes to store a single cube position would still
need over 1 billion bytes, or am I missing something?

  I also used GAP (quite a good program) to calculate the size of
  < U1, R1 > on the magic dodecahedron: 7,999,675,084,800.

  Once again, I welcome any verification.

  -> Mark <-

From BRYAN@wvnvm.wvnet.edu  Wed Aug 10 08:38:50 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA15904; Wed, 10 Aug 94 08:38:50 EDT
Message-Id: <9408101238.AA15904@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 1777; Tue, 09 Aug 94 23:18:07 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 0972; Tue, 9 Aug 1994 23:18:07 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Tue, 9 Aug 1994 23:18:06 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: <Cube-Lovers@ai.mit.edu>
Subject:   Re: < U, R> Group
In-Reply-To: Message of 08/09/94 at 01:48:00 from mark.longridge@canrem.com

On 08/09/94 at 01:48:00 mark.longridge@canrem.com said:

>  I leave it to Jerry or Dan to check my results. I checked up to 2
>moves deep by hand and verified 10 different positions. What I don't
>understand is how Jerry manages to look at so many cube positions:

>On full 3x3x3 cube,   7     100,803,036     13.231  (new)

>  Using 10 bytes to store a single cube position would still
>need over 1 billion bytes, or am I missing something?

Well, when I deal with the big problems I want to solve to the
bitter end, I use the M-conjugate and centerless cube tricks
I have described at much too great length in the past.  This one
is a quick and dirty program using no conjugate tricks.  The
only real "trick" is that I externalize the data.  I decided
long ago that the problems I wanted to solve were too big to
keep in memory.  Hence, I keep everything in simple (but large)
flat files and sort and merge the files like crazy.  In this quick
and dirty program, the cube itself is 13 bytes and the level is
1 byte, for a total of 14 bytes per cube.  I guess that makes
the file size about 1.4 gigabytes (10^9).  I am
leery of using the word "billion" on E-mail forums because
E-mail is international and "billion" means 10^12 in some
countries.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From BRYAN@wvnvm.wvnet.edu  Fri Aug 19 16:26:59 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA12976; Fri, 19 Aug 94 16:26:59 EDT
Message-Id: <9408192026.AA12976@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 8482; Fri, 19 Aug 94 16:00:54 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 1846; Fri, 19 Aug 1994 16:00:54 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Fri, 19 Aug 1994 16:00:53 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Updated Upper Limits, Q-turns

On 9 January 1981, Dan Hoey provided a recursive procedure which
gives the best known upper bound on the number of
cubes at each distance from Start.  With Dan's recursive procedure,
the upper bound for any level is a function of the known value or
upper bound for the immediately preceding four levels.  Dan's procedure
takes into account identities of the form XX'=I and RL=LR.

At the time Dan performed his calculations, only level 0 through level 4
were known for sure.  We now have 8 levels, so Dan's calculations can be
updated.  I am going to give the new calculations, and I am also
going to include Dan's original calculations for comparison purposes.
In both tables, P[n] is the number of cubes which are n moves from
Start.

Dan's recursion formula is:

>   P[n]  <= 4*2*P[n-1] + 6*2*P[n-2] + 4*2*P[n-3] + 1*2*P[n-4]


Dan's calculations:

> P[0]  =           1   P[9]  <  724,477,008     P[18] <  4.048*10^17
> P[1]  =          12   P[10] <  6.792*10^9      P[19] <  3.795*10^18
> P[2]  =         114   P[11] <  6.366*10^10     P[20] <  3.557*10^19
> P[3]  =       1,068   P[12] <  5.967*10^11     P[21] <  3.334*10^20
> P[4]  =      10,011   P[13] <  5.594*10^12     P[22] <  3.125*10^21
> P[5]  <=     93,840   P[14] <  5.243*10^13     P[23] <  2.930*10^22
> P[6]  <     879,624   P[15] <  4.915*10^14     P[24] <  2.746*10^23
> P[7]  <   8,245,296   P[16] <  4.607*10^15     P[25] <  2.574*10^24
> P[8]  <  77,288,598   P[17] <  4.319*10^16


New Calculations:

  P[0]  =           1   P[9]  <= 720,627,064     P[18] <= 4.026*10^17
  P[1]  =          12   P[10] <= 6.755*10^09     P[19] <= 3.774*10^18
  P[2]  =         114   P[11] <= 6.332*10^10     P[20] <= 3.538*10^19
  P[3]  =       1,068   P[12] <= 5.935*10^11     P[21] <= 3.316*10^20
  P[4]  =      10,011   P[13] <= 5.563*10^12     P[22] <= 3.108*10^21
  P[5]  =      93,840   P[14] <= 5.215*10^13     P[23] <= 2.914*10^22
  P[6]  =     878,880   P[15] <= 4.888*10^14     P[24] <= 2.731*10^23
  P[7]  =   8,221,632   P[16] <= 4.582*10^15     P[25] <= 2.560*10^24
  P[8]  =  76,843,595   P[17] <= 4.295*10^16

I think that the two most interesting things about the new calculations
are: 1) they are nearly the same as the old calculations, and 2) they
are not exactly the same as the old calculations.  In both cases, the
question is "why?".

My interpretation is that Dan's analysis not only puts an upper
bound on the number cubes at each level, it also puts an upper bound
on the branching factor.  We trivially have an absolute upper limit
on the branching factor of 12.  After level 1, we trivially have an
upper limit on the branching factor of 11 (i.e., "don't undo the move
you just made", or "don't have a sequence of the form XX'").  As before,
moves of opposite faces commute.  Taking commutations of opposite faces
into account, the branching factor is reduced (empirically ) to an upper
limit of about 9.37.

This empirical analysis is starting with a high branching factor and
subtracting out the cubes we should not count, so that we are
dealing with identities of the form XX' and commutations of the form
RL=LR separately.  Dan's analysis deals with cubes we *should* count,
and he thereby deals with identities of the form XX' and commutations
of the form RL=LR in one fell swoop.

But Dan's analysis does not yield exact figures, only limits.  It seems
therefore that there must be other cases our empirical approach must
choose not to count.  What might those other cases be?  It seems that
there must be cases where a sequence X1 X2 ... Xn
is equal to a sequence Y1 Y2 ... Ym, but where there is no obvious
way to characterize the relationship between two sequences (e.g., they
are not simple commutations of each other), and where we cannot even
find the sequences without some sort of exhaustive search.

I would interpret that fact that the new upper limits do not equal the
old upper limits as meaning that such "duplicate" sequences do exist
close to Start.  I would interpret the fact that the new upper limits
are close to the old upper limits as meaning that there are not very
many such "duplicate" sequences close to Start.

But consider another quote from Dan in the same article:

>The recurrence on which this bound relies is due to the
>relations F^4 = FBF'B' = I (and their M-conjugates.)  It may be
>possible to improve the recurrence by recognizing other short
>relations.  Exhaustive search has shown that there are none of
>length less than 10.

I am afraid I need Dan to explain this further.  Dan's logic seems
impeccable.  But on the other hand
there must be cases where X1 X2 ... Xn = Y1 Y2 ... Ym, where
the sum of the length of the sequences is less than 10, and where
the equality is not explained by the relations F^4 = FBF'B' = I.
Otherwise, Dan's calculations would yield exact values rather than
upper limits close to Start, and the "new calculations" for upper
limits would equal the "old calculations".

Let me think out loud just for a second.  Consider relations such as
LRLRLRLR = I or RR'RR'RR'RR' = I.  These are *sequences* of length 8
but *cubes* of length 0.  Is it possible that such sequences are being
counted too many or not enough times when the recursion is four
levels deep?

Finally, I have argued on purely empirical grounds that the branching
factor will remain relatively constant from about level 3 to some
unknown level (maybe about level 18 or 19 or 20?), where the branching
factor will decay rapidly because you run out of cubes.  Well, I think
I want to argue further that during this "relatively constant" portion
of the distribution the branching factor *will* decay.  It might not
decay very much, and I don't see any easy way to calculate how much
it will decay.  The argument is very simple.  Any time a "duplicate
sequence" occurs, it reduces the branching factor at that level, but
also at subsequent levels.  That is, longer sequences can contain the
"duplicate sequence" as a sub-sequence.  Hence, any decay in the branching
factor at one level is propagated to all subsequent levels.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From hoey@aic.nrl.navy.mil  Thu Aug 25 14:43:40 1994
Return-Path: <hoey@aic.nrl.navy.mil>
Received: from Sun0.AIC.NRL.Navy.Mil ([192.26.18.51]) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA19746; Thu, 25 Aug 94 14:43:40 EDT
Received: by Sun0.AIC.NRL.Navy.Mil (4.1/SMI-4.0)
	id AA03267; Thu, 25 Aug 94 14:43:13 EDT
Date: Thu, 25 Aug 94 14:43:13 EDT
From: hoey@aic.nrl.navy.mil (Dan Hoey)
Message-Id: <9408251843.AA03267@Sun0.AIC.NRL.Navy.Mil>
To: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>, <mouse@collatz.mcrcim.mcgill.edu>
Cc: <Cube-Lovers@ai.mit.edu>
Subject: Re: Updated Upper Limits, Q-turns

Jerry Bryan was looking at some formulas I had in the archives:

    >> Dan's recursion formula is:
    >>>   P[n]  <= 4*2*P[n-1] + 6*2*P[n-2] + 4*2*P[n-3] + 1*2*P[n-4]

    ...

    I just rechecked Dan's original note of 9 January 1981.  He
    specifically says the formula is good for n > 4.  Mea culpa.
    However, I still do not fully understand *why* this should be the
    case.

I thought I put the bound in....  I've been meaning to look that up
and explain it, but time's been short.

The analysis is done by breaking up the minimal processes into
"syllables", where a syllable is a maximal sequence of commuting turns.
So for each pair (x,y) in {(F,B),(T,D),(L,R)} there are
    four syllables of length 1: x, x', y, and y';
    six syllables of length 2: xx, xy, xy', x'y, x'y', and yy;
    four syllables of length 3: xxy, xxy', xyy, and x'yy;
    one syllable of length 4: xxyy.

(It's not really a coincidence that this is most of the fifth line of
Pascal's triangle.)

Now for the first syllable, we can pick any of the three pairs for
(x,y).  But for succeeding syllables, we must pick a pair that is not
equal to the preceding pair.  So each term in the recurrence refers to
the length of the last syllable:

Length of last syllable=1            2            3            4

  n=1    P[n] = 4*3 P[n-1];
  n=2    P[n] = 4*2 P[n-1] + 6*3 P[n-2]
  n=3    P[n] = 4*2 P[n-1] + 6*2 P[n-2] + 4*3 P[n-3]
  n=4    P[n] = 4*2 P[n-1] + 6*2 P[n-2] + 4*2 P[n-3] + 1*3 P[n-4]
  n>4    P[n] = 4*2 P[n-1] + 6*2 P[n-2] + 4*2 P[n-3] + 1*2 P[n-4]

The second part of each coefficient is 2, except that when the length
of the last syllable is equal to n (so that we are counting the first
syllable), the second part of the coefficient is 3.

In response to my description:
> >The recurrence on which this bound relies is due to the
> >relations F^4 = FBF'B' = I (and their M-conjugates.)  It may be
> >possible to improve the recurrence by recognizing other short
> >relations.  Exhaustive search has shown that there are none of
> >length less than 10.

Jerry continues:
> ... there must be cases where X1 X2 ... Xn = Y1 Y2 ... Ym, where
> the sum of the length of the sequences is less than 10, and where
> the equality is not explained by the relations F^4 = FBF'B' = I.
> Otherwise, Dan's calculations would yield exact values rather than
> upper limits close to Start, and the "new calculations" for upper
> limits would equal the "old calculations".

No.  The bounds fail to be exact when we have a relation r=s with
|r|=|s|=n.  This corresponds to a relation r s'=I of length 2n.  The
shortest relations of length >4 are the ones of length 12 (as I
reported on 22 March 1981) so my bounds become inexact at length 6.

Chris Worrell listed the length-12 relations on 08/02/81, and I
reported that his list was complete on 14 August 1981 0111-EDT.  The
12-qtw identities (up to M-conjugacy) are:

I12-1	FR' F'R    UF' U'F    RU' R'U
I12-2	FR' F'R   UF'   F'L FL'   U'F
I12-3	FR' F'R   UF'   UL' U'L   FU'

As Allan C. Wechsler noted on 17 August 1981, any two of them can be
combined to form the third.

> Consider relations such as LRLRLRLR = I or RR'RR'RR'RR' = I.

The first is a consequence of the relations L^4=R^4=LRL'R'=I.  The
second is a consequence of group theory; no relations are needed.  The
recurrence deals with these: it models the freeest group specified by
the given relations.

I have tried unsuccessfully to create a recurrence that will deal with
the 12-qtw identities, but it's complicated.  For instance, repeatedly
putting I12-1 in the center of another I12-1 yields identities of the
form:

     F (R'F' RU)^n F'U' (FR U'R')^n U

There are a bunch of other cases, too.

Dan
Hoey@AIC.NRL.Navy.Mil

From BRYAN@wvnvm.wvnet.edu  Wed Aug 31 17:17:08 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA18279; Wed, 31 Aug 94 17:17:08 EDT
Message-Id: <9408312117.AA18279@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 5436; Wed, 31 Aug 94 15:23:48 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 7373; Wed, 31 Aug 1994 15:23:48 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Wed, 31 Aug 1994 15:23:47 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: <cube-lovers@ai.mit.edu>
Subject:   Re: < U, R> Group
In-Reply-To: Message of 08/09/94 at 01:48:00 from mark.longridge@canrem.com

On 08/09/94 at 01:48:00 mark.longridge@canrem.com said:

>        Analysis of the 3x3x3 <U, R> group
>        ----------------------------------

>                                          branching
>Moves Deep       arrangements (q only)     factor

>  0                    1                      --
>  1                    4                       4
>  2                   10                       2.5
>  3                   24                       2.4
>  4                   58                       2.416
>  5                  140                       2.413
>  6                  338                       2.414
>  7                  816                       2.414
>  8                1,970                       2.414
> program starts to really bog down after this...

>  I leave it to Jerry or Dan to check my results. I checked up to 2
>moves deep by hand and verified 10 different positions.

Ok, here it is.  This search is narrower and deeper than any
I have ever done before.  Frey and Singmaster give <U,R>
a good bit of attention in their book, pointing out that it
is trickier than it might first appear.

It is called the Two-Generator Group.  The size of the group
can be calculated as (7!5!/2)(3^6/3) = 73,483,200.  The
3^6 factor accounts for twisting the corners, but there is no
2^n factor as the edges cannot be flipped.

These results are in terms of Q turns without any conjugate
class checking.  I would regard the following as open problems:
local maxima, results with Q+H turns, and results in terms of
conjugate classes.  In this particular case, it would not be
M-conjugates.  I would have to look at Dan Hoey's 98 subgroups
of M to see which subgroup applies to <U,R>.

  0                    1
  1                    4                       4
  2                   10                       2.5
  3                   24                       2.4
  4                   58                       2.416
  5                  140                       2.413
  6                  338                       2.414
  7                  816                       2.414
  8                1,970                       2.414
  9                4,756                       2.414
 10               11,448                       2.407
 11               27,448                       2.398
 12               65,260                       2.378
 13              154,192                       2.363
 14              360,692                       2.339
 15              827,540                       2.294
 16            1,851,345                       2.237
 17            3,968,840                       2.144
 18            7,891,990                       1.988
 19           13,659,821                       1.755
 20           18,471,682                       1.352
 21           16,586,822                       0.898
 22            8,039,455                       0.485
 23            1,511,110                       0.188
 24               47,351                       0.031
 25                   87                       0.002

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From BRYAN@wvnvm.wvnet.edu  Mon Sep 12 17:56:28 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA09587; Mon, 12 Sep 94 17:56:28 EDT
Message-Id: <9409122156.AA09587@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 0953; Mon, 12 Sep 94 15:35:41 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 2448; Mon, 12 Sep 1994 15:35:41 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Mon, 12 Sep 1994 15:35:32 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   God's Algorithm, Q-Moves Through Level 10

Distance   Number   Branching       Number   Branching   Ratio of
from         of      Factor           of      Factor     Cubes to
Start      Cubes                 M-Conjugate             M-Conjugate
                                    Classes               Classes

 0              1                         1
 1             12     12.000              1   1.000        12.000
 2            114      9.500              5   5.000        22.800
 3          1,068      9.368             25   5.000        42.720
 4         10,011      9.374            219   8.760        45.712
 5         93,840      9.374          1,978   9.032        47.442
 6        878,880      9.366         18,395   9.300        47.778
 7      8,221,632      9.355        171,529   9.325        47.931
 8     76,843,595      9.347      1,601,725   9.338        47.976
 9    717,789,576      9.341     14,956,266   9.338        47.993
10  6,701,836,858      9.337    139,629,194   9.336        47.997

Some of you may remember previous results where I calculated equivalence
classes of the form {m'Xmc} for all 48 elements m in M, the set of all
cube rotations and reflections, and for all 24 elements c in C, the set
of all cube rotations.  This is effectively calculating M-conjugate classes
for centerless cubes.  My previous data bases have contained
representative elements Y for each equivalent class {m'Xmc}.  To get
cubes with centers (where rotational orientation makes a difference),
I then calculated Yc for each c in C, forming a matrix indexed by
Y and c.

The previous approach permits a very compact representation of God's
algorithm, and I used it for corners-only cubes and am presently
using it for edges-only cubes.  However, I find that the {m'Xmc}
approach does not work well for whole cubes.  The problem is that
the matrix is extremely sparse close to Start.  With corners-only
or edges-only cube, I can calculate the entire problem.  With the
whole cube, I cannot even come close to calculating the whole problem,
and the matrix representation wastes space rather than saving space.

Hence, for whole cubes, I am calculating equivalence classes (which
are M-conjugate classes) of the form {m'Xm} for all 48 elements m in M.
My data base includes a representative element Z for each M-conjugate
class {m'Xm}.  This reduces the size of the problem by about 48 times,
and lets me calculate about two more levels of the search tree with the
same level of effort as before.

Just to reiterate some obvious points that have appeared before:

   1) X is an arbitrary element of {m'Xm}, but Z is a particular element
      of {m'Xm} chosen with a selection function.

   2) Z is in {m'Xm} and we have {m'Zm} = {m'Xm}.

   3) |Z| = |X| = |m'Xm| = |m'Zm| for all m in M and for all X in
      {m'Xm}.  This trivial equivalence is what makes M-conjugate
      classes a viable approach for brute force calculation of
      God's algorithm.

   4) Most M-conjugate classes of the form {m'Xm} contain 48 elements.
      The size of {m'Xm} can be used as a measure of the symmetry of
      X, with |{m'Xm}|=1 for the most symmetric cubes and |{m'Xm}|=48
      for the least symmetric cubes.  Conversely, Symm(X) is the
      set of all m in M such that m'Xm=X.  |Symm(X)|=48 for the
      most symmetric cubes, |Symm(X)|=1 for the least symmetric cubes,
      and |{m'Xm}| * |Symm(X)| = 48 in all cases.

   5) The ratio of cubes to M-conjugate classes is close to, but not
      exactly equal to, 48.  The reason the equality is inexact is
      symmetry (see item #4 above). The ratio is closer to 48 when
      you get further from Start because the proportion of asymmetric
      cubes is higher when you are further from Start.

I actually calculated (and previously reported) God's Algorithm directly
through level 8.  For levels 9 and 10, I only calculated the number of
M-equivalence classes directly.  I then calculated the size of each
M-equivalence class to obtain the number of cubes.  This particular data
base has 14 bytes for each cube (actually for each representative element
Z).  Hence, 14*139,629,194= 1,954,808,716 bytes are required to store
level 10 (each level is in a separate file).  This is about
2 gigabytes of storage, which is quite large, but which is by no means
outrageous.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From BRYAN@wvnvm.wvnet.edu  Tue Sep 27 01:22:13 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA10639; Tue, 27 Sep 94 01:22:13 EDT
Message-Id: <9409270522.AA10639@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 7161; Mon, 26 Sep 94 14:29:38 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 3724; Mon, 26 Sep 1994 14:29:38 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Mon, 26 Sep 1994 14:29:31 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: <cube-lovers@ai.mit.edu>
Subject:   Re: < U, R> Group (W-conjugate results)
In-Reply-To: Message of 08/09/94 at 01:48:00 from mark.longridge@canrem.com

I have completed the God's Algorithm calculations for the <U,R> group
in terms of W-conjugate classes (or really, in terms of representative
elements of W-conjugate classes), with the results below.  In general,
the use of W-conjugates reduces the size of the problem by about
four times.  However, I was surprised to see that for levels 1, 3, 5,
7, 9, and 11 the number of cubes was exactly four times larger than the
number of W-conjugate classes.  My interpretation is that all cubes
in <U,R> at these levels are completely "asymmetric" with respect to
W.  (They are somewhat symmetric with respect to M, of course.)  However,
when level 13 turned out not to have a ratio of exactly 4 between cubes
and W-conjugate classes, I was rescued from the task of explaining why
all cubes at an odd distance from Start were asymmetric.


Level   W-Conjugate  Branching      Total   Branching   Ratio
           Classes     Factor       Cubes     Factor      of
                                                        Cubes to
                                                        Classes

  0             1                        1              1
  1             1      1                 4     4        4
  2             3      3                10     2.5      3.333
  3             6      2                24     2.4      4
  4            15      2.5              58     2.416    3.866
  5            35      2.333           140     2.413    4
  6            85      2.429           338     2.414    3.976
  7           204      2.4             816     2.414    4
  8           493      2.417         1,970     2.414    3.996
  9         1,189      2.412         4,756     2.414    4
 10         2,863      2.408        11,448     2.407    3.999
 11         6,862      2.397        27,448     2.398    4
 12        16,324      2.379        65,260     2.378    3.998
 13        38,550      2.362       154,192     2.363    3.9997
 14        90,192      2.340       360,692     2.339    3.9992
 15       206,898      2.294       827,540     2.294    3.9997
 16       462,893      2.237     1,851,345     2.237    3.9996
 17       992,268      2.144     3,968,840     2.144    3.9998
 18     1,973,209      1.989     7,891,990     1.988    3.9996
 19     3,415,314      1.731    13,659,821     1.755    3.9996
 20     4,618,491      1.352    18,471,682     1.352    3.9995
 21     4,147,448      0.898    16,586,822     0.898    3.9993
 22     2,010,449      0.485     8,039,455     0.485    3.9988
 23       378,110      0.118     1,511,110     0.188    3.9965
 24        11,894      0.031        47,351     0.031    3.9811
 25            27      0.002            87     0.002    3.222

Total  18,373,824               73,483,200              3.9993

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From BRYAN@wvnvm.wvnet.edu  Fri Oct  7 14:48:43 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA25784; Fri, 7 Oct 94 14:48:43 EDT
Message-Id: <9410071848.AA25784@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 1254; Fri, 07 Oct 94 10:52:59 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 2941; Fri, 7 Oct 1994 10:52:59 -0400
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Fri, 7 Oct 1994 10:52:58 EDT
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: <cube-lovers@ai.mit.edu>
Subject:   Re: < U, R> Group  -- Q+H
In-Reply-To: Message of 08/09/94 at 01:48:00 from mark.longridge@canrem.com

Distance    Number     Branching       Number    Branching     Ratio of
 from         of        Factor           of       Factor       Cubes to
 Start   W-Conjugate                    Cubes                  W-Conjugate
           Classes                                              Classes

      0          1                            1                  1
      1          2          2                 6     6            3
      2          5          2.5              18     3            3.6
      3         14          2.8              54     3            3.857
      4         41          2.929           162     3            3.951
      5        122          2.976           486     3            3.984
      6        365          2.992         1,457     2.998        3.992
      7      1,091          2.989         4,360     2.992        3.996
      8      3,256          2.984        13,016     2.985        3.998
      9      9,627          2.957        38,482     2.957        3.997
     10     28,282          2.938       113,094     2.939        3.9987
     11     82,243          2.908       328,920     2.908        3.9994
     12    235,611          2.865       942,351     2.865        3.9996
     13    654,297          2.777     2,616,973     2.777        3.9997
     14  1,693,858          2.589     6,774,848     2.589        3.9997
     15  3,776,718          2.230    15,105,592     2.230        3.9997
     16  6,058,483          1.604    24,231,019     1.604        3.9995
     17  4,856,334          0.802    19,421,274     0.802        3.9992
     18    961,504          0.198     3,843,568     0.198        3.997
     19     11,954          0.012        47,465     0.012        3.971
     20         16          0.001            54     0.002        3.375

  Total 18,373,824                   73,483,200                  3.9993

Notice that using Q+H turns instead of Q turns reduces the maximum
distance from Start from 25 down to 20.

When I first calculated God's Algorithm for <U,R> for Q turns, I calculated
it for cubes first, then for W-conjugate classes.  In this case, I
really did it only for W-conjugate classes (problem is four times
smaller).  The "Number of Cubes" column is then derived by calculating
the size of each W-conjugate class; no real search is needed to
obtain the number of cubes if the W-conjugate classes are already
in hand.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)              (304) 293-5192
Associate Director, WVNET                  (304) 293-5540 fax
837 Chestnut Ridge Road                     BRYAN@WVNVM
Morgantown, WV 26505                        BRYAN@WVNVM.WVNET.EDU

If you don't have time to do it right today, what makes you think you are
going to have time to do it over again tomorrow?

From hoey@aic.nrl.navy.mil  Fri Nov  4 11:46:53 1994
Received: from Sun0.AIC.NRL.Navy.Mil by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA24797; Fri, 4 Nov 94 11:46:53 EST
Received: from sun13.aic.nrl.navy.mil by Sun0.AIC.NRL.Navy.Mil (4.1/SMI-4.0)
	id AA10296; Fri, 4 Nov 94 11:46:51 EST
Return-Path: <hoey@aic.nrl.navy.mil>
Received: by sun13.aic.nrl.navy.mil; Fri, 4 Nov 94 11:46:50 EST
Date: Fri, 4 Nov 94 11:46:50 EST
From: hoey@aic.nrl.navy.mil
Message-Id: <9411041646.AA21659@sun13.aic.nrl.navy.mil>
To: Cube-Lovers@life.ai.mit.edu
Subject: The real size of cube space

In January of this year, Jerry Bryan and I wrote of counting the
number of M-conjugacy classes of Rubik's cube.  In the sense that (for
instance) there is really only one position 1 QT from start, even
though that QT may be applied in twelve different ways, this task
amounts to counting the true number of positions of the cube.  The
earlier discussion centered on calculations involving computer
analysis of large numbers of positions.  However, a look in Paul B.
Yale's book _Geometry and Symmetry_ gave me a clue: the Polya-Burnside
theorem is a tool that allows us to perform this calculation by hand.

The Polya-Burnside theorem describes a relation between a finite group
J and a _representation_ of the group.  For our purposes, a represen-
tation is a homomorphism of J into a permutation group, R: J -> S[X].
Here, S[X] refers to the group of all permutations of a set X; the
image of J, called R(J), need not be the whole of S[X], but R(J) will
be a subgroup of S[X].  The _orbits_ of R(J) are the equivalence
classes of X under the relation x~y, said to be true if there is some
permutation p in R(J) for which p(x)=y.  The _fixed points_ of a
permutation p in R(J) are the elements x of X for which p(x)=x.  The
Polya-Burnside theorem states that the average number of fixed points
of permutations in R(J) is equal to the number of orbits of R(J).
That is,
         |R(J)| |Orbits(R(J))| = Sum[p in R(J)] |FixedPoints(p)|.
The average may also be taken over J:
            |J| |Orbits(R(J))| = Sum[j in J] |FixedPoints(R(j))|,
a nontrivial distinction, since R may not be one-to-one (though it is
for our application).  The Polya-Burnside theorem is not very
inaccessible nor hard to prove, but I will not prove it here.

For our purpose, we take the group J to be M, the 48-element group of
symmetries of the cube.  X will be the set of all cube positions,
which we usually call Gx (for GE, GC, or G, depending on whether we
consider edges, corners, or both; we are considering the positions
relative to fixed face centers in all three cases).  And the repre-
sentation R is the operation of M-conjugation: (R(m))(g) = m' g m.
Verifying that R is a homomorphism is an exercise in associativity
that Jim Saxe and I carried out in the Symmetry and Local Maxima
paper, in the archives [cube-mail-1, 14 December 1980].

R has been so chosen because we wish to calculate the number of
M-conjugacy classes of Gx, |Gx\Conj(M)|, which is be the number of
orbits of R(M).  To apply the Polya-Burnside theorem for this, we need
to calculate, for each element of m of M, the number of fixed points
of R(m).  That is the number of elements g of Gx for which m' g m = g.
Multiplying by m, this becomes g m = m g: the fixed points we wish to
count are just those elements g of Gx that commute with m.

There are several tools to make the counting easier.  First, I'll note
that just as there are M-conjugacy classes of Gx, there are
M-conjugacy classes of M itself.  The number of fixed points of R(m)
is the same for any m in a given conjugacy class.  So to calculate the
total number of fixed points over R(M), we need only calculate the
number of g in Gx commuting with each of the ten classes of cube
symmetry and multiply by the size of the class.

The fundamental principle we use in finding whether g commutes with m
can be found by examining the cycles of m.  Suppose m permutes a cycle
(c1,c2,...,ck), so that c2=m(c1), c3=m(c2),...,ck=m(c[k-1]),c1=m(ck).
For g to commute with m, we have g(c2)=m(g(c1)), g(c3)=m(g(c2)), ...,
g(ck)=m(g(c[k-1]), and g(c1)=m(g(ck)).  So (g(c1),g(c2),...,g(ck)) is
also a cycle of m.  Thus g must map each k-cycle of m to another
k-cycle of m, and in the same order.  Conversely, if g acts thus on
cycles, then g will commute with m, and so g is a fixed point of R(m).

Suppose that m has j different k-cycles of cubies.  There are j! k^j
possibilities for g's action on the cubies in those k-cycles: j!
permutations of cycles, and for each g:(c1,c2,...,ck)->(d1,d2,...,dk),
k choices for g(c1) among {d1,...,dk}.  It turns out to be a fairly
easy exercise to show that half of those possibilities are even
permutations and half odd, though the partition by parity is
surprisingly different depending on whether k is even or odd.  This
will allow us to combine the results for GE and GC simply by
multiplying together and dividing by two.

Now consider orientation of cubies.  This is similar to the case of
permutation, in that the orientation that g imposes on a cubie is a
constant for all cubies in a cycle.  I will first discuss the edge
orientation, which is fairly straightforward, and continue to corner
orientation, which has some surprising features.

For edge orientation, if all the cycles have even length, then g's
orientation parity is zero over each cycle, and so zero over the
entire cube.  So we can choose the orientation of imposed by c1->g(c1)
for each cycle (c1,...,ck) in 2^j ways.  If there are odd-length
cycles, then half of the orientations will have nonzero orientation
parity, and only 2^(j-1) possible orientations can be achieved.

For corners, we might expect there to be 3^(j-1) orientations, except
3^j for cycles of length a multiple of three, and this is often so.
But there are two important exceptions.  First, if m is a reflection
(i.e., not a proper rotation in C) then alternate cubies in each cycle
must be given the opposite orientation by g.  If the cycle has even
length, this conserves orientation, so there will be 3^j possibili-
ties.  If the cycle has odd length, this implies that the orientation
of each cubie must be its own opposite (i.e., zero twist).  Thus,
there there is only one possible orientation of the 1-cycles in the
diagonal reflections.  The second exception, an even bigger surprise,
occurs when m is either the 120-degree rotation or the 60-degree in-
verted rotation.  It turns out that the orientation constraint forbids
any permutation that exchanges the two 1-cycles in these positions.
(This constraint on permutations would throw off the equality between
even and odd permutations, except that these classes of m have other
corner cycles that restore the balance.)  The impossibility of m
commuting with an exchange of the two corners can be verified by
examining the possible orientations, but I haven't got any good way of
characterizing when it would be be a problem in general.  In fact, I
did not notice it until I investigated discrepancies with the
exhaustive computer analysis.

Using the above analysis, we may carry out the calculation as in the
three tables below.  The first two tables count the number of fixed
points of R(m) for an element m of each class, multiply by the class
size, and divide by |J|=48 to get the number of orbits as in the
Polya-Burnside theorem.  The third table calculates the number of
fixed points by combining the results of the first two tables, divided
by the class size (which was multiplied in both for edges and for
corners), and divided by 2 (because only half the combined positions
have matching permutation parity).

     Counting M-conjugacy classes of the edges of Rubik's cube.

M class            Cycles                     Total F.P.      Numeric
  (class size)      of m     Perms   Oris     in class       Total/48
==============  ===========  ======  ======   ==========  ===========
Identity   (1)  12 1-cycles  12!     2^12/2   12! 2^11    20437401600

Axis Rot/2 (3)   6 2-cycles  6! 2^6  2^6      6! 3 2^12        184320

Rot/3      (8)   4 3-cycles  4! 3^4  2^4/2    4! 3^4 2^6         2592

Diag Rot/2 (6)   5 2-cycles  5! 2^5  2^5
                 2 1-cycles  2       2^2/2    5! 3 2^13         61440

Rot/4      (6)   3 4-cycles  3! 4^3  2^3      3! 3 2^10           384

Inv Rot/4  (6)   3 4-cycles  3! 4^3  2^3      3! 3 2^10           384

Diag Ref   (6)   5 2-cycles  5! 2^5  2^5
                 2 1-cycles  2       2^2/2    5! 3 2^13         61440

Inv Rot/6  (8)   2 6-cycles  2! 6^2  2^2      2! 3^2 2^7           48

Axis Ref   (3)   4 2-cycles  4! 2^4  2^4  
                 4 1-cycles  4!      2^4/2    4! 3^2 2^14       73728

Inversion  (1)   6 2-cycles  6! 2^6  2^6      6! 2^12           61440
                                                          -----------
                                        | GE\Conj(M) | =  20437847376


     Counting M-conjugacy classes of the corners of Rubik's cube.

M class            Cycles                   Total F.P.    Numeric
  (class size)      of m     Perms   Oris   in class     Total/48
===============  ==========  ======  =====  ===========   =======
Identity   (1)   8 1-cycles  8!      3^8/3  8! 3^7        1837080

Axis Rot/2 (3)   4 2-cycles  4! 2^4  3^4/3  4! 3^4 2^4        648

Rot/3      (8)   2 3-cycles  2! 3^2  3^2  
                 2 1-cycles  1       3^2/3  3^5 2^4            81

Diag Rot/2 (6)   4 2-cycles  4! 2^4  3^4/3  4! 3^4 2^5       1296

Rot/4      (6)   2 4-cycles  2! 4^2  3^2/3  3^2 2^6            12

Inv Rot/4  (6)   2 4-cycles  2! 4^2  3^2    3^3 2^6            36

Diag Ref   (6)   2 2-cycles  2! 2^2  3^2
                 4 1-cycles  4!      1      4! 3^3 2^4        216

Inv Rot/6  (8)   1 6-cycle   6       3
                 1 2-cycle   1       3      3^3 2^4             9

Axis Ref   (3)   4 2-cycles  4! 2^4  3^4    4! 3^5 2^4       1944

Inversion  (1)   4 2-cycles  4! 2^4  3^4    4! 3^4 2^4        648
                                                          -------
                                        | GC\Conj(M) | =  1841970


    Counting M-conjugacy classes of the entire Rubik's cube

M class             Edge         Corner       Corner times edge
  (class size)      F.P.          F.P.             / (96*class size)
===============  ==========     =========    =======================
Identity   (1)   12! 2^11       8! 3^7       901,083,401,551,872,000

Axis Rot/2 (3)    6! 3 2^12     4! 3^4 2^4               955,514,880

Rot/3      (8)    4! 3^4 2^6    3^5 2^4                      629,856

Diag Rot/2 (6)    5! 3 2^13     4! 3^4 2^5               318,504,960

Rot/4      (6)    3! 3 2^10     3^2 2^6                       18,432

Inv Rot/4  (6)    3! 3 2^10     3^3 2^6                       55,296

Diag Ref   (6)    5! 3 2^13     4! 3^3 2^4                53,084,160

Inv Rot/6  (8)    2! 3^2 2^7    3^3 2^4                        1,296

Axis Ref   (3)    4! 3^2 2^14   4! 3^5 2^4             1,146,617,856

Inversion  (1)    6! 2^12       4! 3^4 2^4               955,514,880
                                             -----------------------
                             | G\Conj(M) | = 901,083,404,981,813,616

These results have been corroborated and expanded by use of
combinatorial computer programs, to be described in a later message.

Dan Hoey
Hoey@AIC.NRL.Navy.Mil

From mschoene@math.rwth-aachen.de  Mon Nov  7 19:20:36 1994
Return-Path: <mschoene@math.rwth-aachen.de>
Received: from samson.math.rwth-aachen.de by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA13091; Mon, 7 Nov 94 19:20:36 EST
Received: from hobbes.math.rwth-aachen.de by samson.math.rwth-aachen.de with smtp
	(Smail3.1.28.1 #11) id m0r4eGO-000MP6C; Tue, 8 Nov 94 01:18 MET
Received: by hobbes.math.rwth-aachen.de (Smail3.1.28.1 #19)
	id m0r4eGN-0000R9C; Tue, 8 Nov 94 01:18 PST
Message-Id: <m0r4eGN-0000R9C@hobbes.math.rwth-aachen.de>
Date: Tue, 8 Nov 94 01:18 PST
From: Martin.Schoenert@math.rwth-aachen.de
To: Cube-Lovers@life.ai.mit.edu
Cc: hoey@aic.nrl.navy.mil
In-Reply-To: hoey@aic.nrl.navy.mil's message of Fri, 4 Nov 94 11:46:50 EST <9411041646.AA21659@sun13.aic.nrl.navy.mil>
Subject: Re: The real size of cube space

Dan Hoey writes in his e-mail message of 1994/11/04

    In January of this year, Jerry Bryan and I wrote of counting the
    number of M-conjugacy classes of Rubik's cube.  In the sense that (for
    instance) there is really only one position 1 QT from start, even
    though that QT may be applied in twelve different ways, this task
    amounts to counting the true number of positions of the cube.  The
    earlier discussion centered on calculations involving computer
    analysis of large numbers of positions.  However, a look in Paul B.
    Yale's book _Geometry and Symmetry_ gave me a clue: the Polya-Burnside
    theorem is a tool that allows us to perform this calculation by hand.

    ...a very nice application of the Polya-Burnside theorem,
       to compute the number of M-conjugacy classes in G...

Yes, a little bit of group theory can answer many questions arising from
the cube.  In fact I have noticed that quite a few of well known results
in group theory have been rediscovered in this forum.  Note that I don't
think this is a bad thing.  At least for me results that I ``knew'' are
now, that they have been demonstrated for the cube, much easier to grasp
than they were before (grasp is certainly an appropriate term in
connection with the cube).

Dan continues

    For our purpose, we take the group J to be M, the 48-element group of
    symmetries of the cube.  X will be the set of all cube positions,
    which we usually call Gx (for GE, GC, or G, depending on whether we
    consider edges, corners, or both; we are considering the positions
    relative to fixed face centers in all three cases).  And the repre-
    sentation R is the operation of M-conjugation: (R(m))(g) = m' g m.
    Verifying that R is a homomorphism is an exercise in associativity
    that Jim Saxe and I carried out in the Symmetry and Local Maxima
    paper, in the archives [cube-mail-1, 14 December 1980].

The way I view this is as follows.  The entire cube group C is a
permutation group group on 6*9 points, generated by the six face turns U,
D, L, R, F, B; the three middle slice turns M_U, M_L, M_F; and the
reflection S.  This group has a subgroup M of symmetries of the cube (of
order 48), generated by U M_U D', L M_L R', F M_F B', and S.  Another
subgroup is G, generated by the six face turns, which has index 48 in G.
G is a normal divisor of C, G is the semidirect product of M and G.  The
same is true for GE and GC.

Obviously M operates by conjugation on G, and this implies that the
mapping R is a homomorphisms.

Another way to say this is that M is a subgroup of the outer autmorphism
group of G (which in this case can be easily represented as a supplement
of G).  Note that the elements of M are also a autmorphisms of the Cayley
graph.  That means that elements of M respects the length of operations.
That is if g_1 and g_2 are elements of G that are in one conjugacy class
under M, then the lenght of the shortest process effecting them is equal.
This follows from the fact that M fixes the set of the generators of G
and their inverses.  M is fact the largest subgroup of the outer
autmorphism group with this property, which makes it rather important.

Dan continues

    R has been so chosen because we wish to calculate the number of
    M-conjugacy classes of Gx, |Gx\Conj(M)|, which is be the number of
    orbits of R(M).  To apply the Polya-Burnside theorem for this, we need
    to calculate, for each element of m of M, the number of fixed points
    of R(m).  That is the number of elements g of Gx for which m' g m = g.
    Multiplying by m, this becomes g m = m g: the fixed points we wish to
    count are just those elements g of Gx that commute with m.

This set is called the *centralizer* of m in Gx.  Usually the centralizer
in a group X is only defined for elements in X, but it is obvious how to
extend this definition.

Dan continues

    The fundamental principle we use in finding whether g commutes with m
    can be found by examining the cycles of m.  Suppose m permutes a cycle
    (c1,c2,...,ck), so that c2=m(c1), c3=m(c2),...,ck=m(c[k-1]),c1=m(ck).
    ...nice discussion of what must happen to cycles if two
       permutations commute...

This can be used directly to compute the centralizer of an element in the
full symmetric group.  Since G's structure is very similar to a symmetric
group (or more accurately the direct product of two symmetric groups), it
allows to describe the centralizer of an element in G.  The more a group
differs from a symmetric group the less this analysis helps (for those
that know what I'm talking about: the more a group differs from the
symmetric group, the worse a backtrack computation using cycle structure
analysis is).

Dan continues

        Counting M-conjugacy classes of the entire Rubik's cube
    
    M class             Edge         Corner       Corner times edge
      (class size)      F.P.          F.P.             / (96*class size)
    ===============  ==========     =========    =======================

Minor typo.  You don't mean ``Corner times edge / (96 * class size)'' but
``Corner times edge / 96 * class size'', which is in fact what you
computed for the following table.

Dan continues

                             | G\Conj(M) | = 901,083,404,981,813,616

Here is how you compute this value in GAP (excuse me the plug).

    gap-3.4 -b -g 4m 
    gap> Sum( ConjugacyClasses( M ),
    >         c -> Size( Centralizer(G,Representative(c)) ) / 48 * Size(c) );
    901083404981813616

Have a nice day.

Martin.

-- .- .-. - .. -.  .-.. --- ...- . ...  .- -. -. .. -.- .-
Martin Sch"onert,   Martin.Schoenert@Math.RWTH-Aachen.DE,   +49 241 804551
Lehrstuhl D f"ur Mathematik, Templergraben 64, RWTH, 52056 Aachen, Germany

From BRYAN@wvnvm.wvnet.edu  Sat Dec 17 11:10:56 1994
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA17733; Sat, 17 Dec 94 11:10:56 EST
Message-Id: <9412171610.AA17733@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 5988; Sat, 17 Dec 94 11:10:53 EST
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 3919; Sat, 17 Dec 1994 11:10:54 -0500
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Sat, 17 Dec 1994 11:10:52 EST
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   How Big is Big?

Some of the notes in the last day or two about whether or not ten levels
deep is too large to search reminded me of a note I have been meaning
to send for a long time.  Just how big is 4.3*10^19, and can we ever
hope to search it all?

First of all, 4.3*10^19 is really about 10^18.  That is, we could safely
confine ourselves to searching M-conjugate classes, and there are about
0.9*10^18 classes, which we might as well call about 10^18.  But how big
is that?

Suppose were trying to buy enough disk space.  I claim that you
could store each position in a byte with clever indexing.  Actually,
you could store each position in 5 bits, or 5/8 of a byte, but leave
it as a byte per position.  Let's say that you can purchase
a gigabyte for about 1,000 U.S. Dollars (10^12 bytes for about
10^3 USD).  (We are buying good quality used disks for mainframes
for about 1,000 USD per gigabyte; new prices are closer to 4,000 or
5,000 USD per gigabyte.  Both SCSI and IDE disks for the desktop,
PC or UNIX, are just now down to around 500 USD per gigabyte, and I
have seen firesale type prices closer to 300 USD per gigabyte).

At 10^3 USD per 10^12 bytes, the cost would be 10^9 USD per 10^18
bytes.  Well, 10^9 USD is a lot of money, but it is a lot less
than the cost of going to the moon, or the cost of an aircraft carrier.
In fact, Bill Gates could afford it if he so chose.

There are other ways to think about the problem.  The size of
chess is about 10^75 states, and Go is about 10^120 states.  The
standard 3x3x3 Rubik's cube is vastly smaller than either of these.
In fact, Go (and maybe chess, I can't remember for sure) is usually
described as being bigger than the universe.

A handy number in these types of comparisons and in determining "how big
is the universe" is Avogadro's number, which is about 6*10^23.
Avogadro's number is the number of molecules (or atoms, for substances
which occur atomically) in the gram molecular weight of a substance.
For example, molecular hydrogen has a molecular weight of 2, so
2 grams of hydrogen contain 6*10^23 molecules.  Iron is atomic with
an atomic weight of 56, so 56 grams of iron contain about 6*10^23
atoms.  If you had 56 grams of iron, and if you could store magnetically
each cube position in no more than 6*10^5 iron atoms, then you could
store the whole Rubik's cube.

By comparison to the size of the universe, the mass of the sun is
about 10^30 grams, consisting mostly of atomic hydrogen, so there
are about (10^30)*(10^23)=10*53 hydrogen atoms in the sun.  I can't
remember for sure, but I think there are about 10^11 stars in the
Milky Way.  If the sun is typical star, that would leave about
10^64 hydrogen atoms in the Milky Way.  I don't know how many galaxies
there are, but we are clearly getting close to the size of Chess
at 10^75 being about the same as the size of the universe, and of Go
at 10^120 being much larger than the size of the universe.  Rubik's
cube is small potatoes.

A couple of more items: the human genome is being mapped.  I cannot
remember the exact size of the problem, but I do remember when I
read about it that it was a larger problem than Rubik's cube.  Finally,
the Chronicle of Higher Education had an article in the last few weeks
about particle physicists and the Internet.  Traditionally, these people
send hundreds or thousands of magnetic tapes to each other via standard
mail (snail mail to E-mail folks  --  but mailing magnetic tapes can
yield tremendous data transfer rates if you actually calculate bytes
per second).  According to the article,
the physicists are already sending gigabytes over the Internet.  They are
planning soon to start sending petabytes (10^15) over the Internet.
10^15 is getting interesting close to the size of Rubik's cube
(never mind that I thought that the proper term for 10^15 bytes was
terabytes.)

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From mreid@ptc.com  Sat Jan  7 19:32:56 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA06222; Sat, 7 Jan 95 19:32:56 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA09534; Sat, 7 Jan 95 19:31:01 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA07043; Sat, 7 Jan 1995 19:43:27 -0500
Date: Sat, 7 Jan 1995 19:43:27 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501080043.AA07043@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: two stage filtration
Content-Length: 4359

kociemba's algorithm uses the filtration

G = <U, D, F, R, B, L>        of order   43252003274489856000
H = <U, D, F2, R2, B2, L2>    of order            19508428800
1 = <>                        of order                      1

i've run an exhaustive search on the coset space  G / H.  the number
of cosets at each distance is:

 distance    quarter turns       face turns

        0                1                1
        1                4                4
        2               34               50
        3              312              592
        4             2772             7156
        5            24996            87236
        6           225949          1043817
        7          2017078         12070278
        8         17554890        124946368
        9        139132730        821605960
       10        758147361       1199128738
       11       1182378518         58202444
       12        117594403              476
       13            14072

the computation for face turns was already done by dik winter (see his
message of may 28, 1992), so in particular, this confirms his calculation.

the cosets  G / H  are described by triples  (c, e, l),  where

   c = corner orientation
   e = edge orientation
   l = location of middle layer edges (FR, FL, BR, BL)

there are  3^7   = 2187 corner configurations,
           2^11  = 2048 edge configurations, and
          / 12 \
          \  4 / =  495 location configurations,

to give a total of  2187 * 2048 * 495 = 2217093120  configurations.
to reduce this number somewhat, we can utilize symmetry.  there are 16
symmetries of the cube that preserve the  U-D axis,  and therefore
preserve the subgroup  H.  up to these symmetries, the number of distinct
corner configurations is 168, so we need only consider a mere
168 * 2048 * 495 = 170311680  configurations.

(so far, this is the same approach that dik used for his calculation.)

each configuration is stored with 2 bits of memory and thus the whole
space consumes about 42 megabytes.  each configuration is assigned
one of 4 values:

        distance is currently unknown
        distance = current search depth
        distance = current search depth - 1
        distance < current search depth - 1

from here, i just used a simple breadth first search.

unfortunately, something unpleasant happened along the way ...

at some point, i realized that the symmetries do not act on the edge
configurations.  to define edge flip, one must choose one facelet from
each of the 4 middle layer edges to correspond to the  U  or  D  facelet
of the other 8 edges.  (i chose the  F  and  B  facelets, but this is
completely arbitrary.)  but now we've lost some symmetry; these 12 facelets
are not preserved under the 16 symmetries, in particular, the rotation
C_U  does not preserve them.

therefore, we need lookup tables for the action of the symmetries on
edge x location space.  this gives 16 symmetries * 2048 edge configurations
* 495 location configurations * 4 bytes per integer = 64 megabytes of
lookup tables.  ouch!

i was too far along at this point to start all over, and i had the memory
available, so i just continued with this approach.  however, in hindsight,
i'd probably use one of the following ideas if i had to start over:

      i) only use the 8 symmetries that preserve my choice of
         12 edge facelets.

     ii) combine the two coordinates edge and location into a single
         coordinate and divide this coordinate by the 16 symmetries.

run times were improved significantly by using a simple trick that i hadn't
used in earlier programs.  during the first few depth levels, i use
"forward searching", i.e. i examine the neighbors of each configuration
found at the previous depth.  however, after at least half the search space
has been found, i switch to "backward searching", i.e. examine the
configurations (and their neighbors) that haven't yet been found.

(have others been using this same idea when running similar search programs?)

closer analysis of this technique suggests that the switch from forward to
backward searching should occur even before half the space has been found.
i didn't do this here since the run times were quite satisfactory:
40 minutes for quarter turns, 47 minutes for face turns.  this was done
on a DEC 3000 alpha 700, apparently a very fast machine.

mike

From mreid@ptc.com  Sat Jan  7 19:53:08 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA06520; Sat, 7 Jan 95 19:53:08 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA09551; Sat, 7 Jan 95 19:51:46 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA07071; Sat, 7 Jan 1995 20:04:09 -0500
Date: Sat, 7 Jan 1995 20:04:09 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501080104.AA07071@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: two stage filtration
Content-Length: 3087

i've also run an exhaustive search on the subgroup
H = <U, D, F2, R2, B2, L2>.   here are the number of
positions at each distance.

 distance    quarter turns       face turns

        0                1                1
        1                4               10
        2               10               67
        3               36              456
        4              123             3079
        5              368            19948
        6             1192           123074
        7             3792           736850
        8            11263          4185118
        9            34352         22630733
       10           102638        116767872
       11           287320        552538680
       12           810144       2176344160
       13          2261028       5627785188
       14          5941838       7172925794
       15         16291708       3608731814
       16         41973415        224058996
       17        107458884          1575608
       18        269542476             1352
       19        628442876
       20       1367654200
       21       2613422312
       22       3997726648
       23       4444701268
       24       3661653732
       25       1906936668
       26        407132392
       27         34358944
       28          1664168
       29            14840
       30              160

a position at distance 18 face turns was exhibited by hans kloosterman
on may 30 1992.  (he also found three others that differ only in the
middle layer edges.)  it was then observed by dik winter (also on may 30
1992) that kociemba's algorithm took exceptionally long for this position.
however, this does not appear to be the case for most of the antipodes.
(i will give the antipodes for each metric in separate messages.)

the 4 positions found by kloosterman are also antipodes in the quarter
turn metric, and, up to symmetry, are the only positions which are
antipodal in both metrics.  hmmm...

elements of  H  are described by triples  (c, e, m),  where

        c = corner permutation,
        e = U D edge permutation,
        m = middle layer edge permutation,

and the total parity is even.  there are

        8! = 40320 corner configurations,
        8! = 40320 U D edge configurations and
        4! =    24 middle layer edge configurations,

for a total of  40320 * 40320 * 24 / 2 = 19508428800  positions.

if we divide by symmetry along the corner coordinate, we get 2768 corner
configurations (of course we get the same number if we divide by symmetry
along the U D edge coordinate), so we can reduce to 1339269120 positions.
at 2 bits per configuration, this requires 327 megabytes, which is too
large.

however, if we also divide out by inversion, we can reduce the number of
corner configurations to 1672, the total number of positions to 808980480,
and the memory required to 200 megabytes.  this is still a lot, but is
within reach.

the calculations were done on the same machine: DEC 3000 alpha 700,
configured with 256 Mb RAM.  run times were much more modest:
10 hours for quarter turns, 7.5 hours for face turns.

mike

From mreid@ptc.com  Sat Jan  7 20:14:05 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA07520; Sat, 7 Jan 95 20:14:05 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA09581; Sat, 7 Jan 95 20:12:09 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA07129; Sat, 7 Jan 1995 20:24:35 -0500
Date: Sat, 7 Jan 1995 20:24:35 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501080124.AA07129@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: new upper bounds
Content-Length: 2083

from these calculations, we get new upper bounds on the length of
"god's algorithm":  42 quarter turns, 29 face turns.  (no, i didn't
add incorrectly.)  the previous upper bounds were 56 quarter turns,
37 face turns.  the best known lower bounds are 21 quarter turns,
18 face turns.

here's how to get these upper bounds.  note that the last twist in
stage 1 is always a quarter turn of either  F, R, B  or  L,  and the
direction doesn't matter.  thus by choosing the direction of this
quarter turn properly, we hope to be able to avoid the positions at
maximal distance in stage 2.

the program verified that no two positions at distance 30 quarter
turns differ by  F2, R2, B2  or  L2,  so we may avoid these bad cases.
i expected to be able to avoid the positions at distance 29 quarter
turns as well, but alas, things do not always go as planned.  the
following two positions at distance 29 quarter turns differ by  B2:

position 1:
D1 R2 D3 L2 D3 R2 U3 D3 R2 U1 B2 D3 L2 D3 R2 D3 F2 D1 B2 D1   29q

position 2:
R2 U3 L2 U3 D3 L2 D1 L2 D1 R2 F2 D1 F2 D3 L2 B2 D1 B2 D1   29q

there are probably many other examples.

similarly, the positions at distance 18 face turns were checked and
no two of these differ by  F2, R2, B2  or  L2,  so these positions
may be avoided.

this gives upper bounds of  13 + 29 = 42  quarter turns and
12 + 17 = 29  face turns.

i expect to be able to reduce the 42 quarter turns slightly.  for
example, to improve it to 41 quarter turns, i just need to check
that any position in stage 2 can be solved in at most 28 quarter
turns, where we now allow all turns.  of course, this only requires
testing the positions at distance 29 and 30.  i expect this to be
straightforward, but i don't know how much improvement i can get
with this approach.

the same approach doesn't seem plausible for face turns.  in order
to get just 1 face turn improvement, all positions at distance 17
face turns would need to be solvable in at most 16 face turns.
this doesn't seem promising.  probably most of these require 17
face turns even with all turns available.

mike

From mreid@ptc.com  Sat Jan  7 20:33:56 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA08623; Sat, 7 Jan 95 20:33:56 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA09617; Sat, 7 Jan 95 20:32:02 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA07165; Sat, 7 Jan 1995 20:44:27 -0500
Date: Sat, 7 Jan 1995 20:44:27 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501080144.AA07165@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: antipodes in quarter turn metric
Content-Length: 2017

these are the antipodes of  H = <U, D, F2, R2, B2, L2>  in the quarter
turn metric, divided by the 16 symmetries.  btw, these symmetries
are generated by  C_U,  C_F2  and  reflection through the  U-D  plane.

  1)   D3 B2 D1 F2 R2 B2 R2 U1 R2 U3 F2 D3 R2 D1 R2 U3 L2 B2 U3     30q
  2)   D3 B2 D3 L2 F2 B2 D1 L2 U3 L2 F2 D1 F2 U3 B2 U1 L2 F2 U3     30q
  3)   D3 B2 L2 D3 B2 R2 L2 B2 R2 L2 D3 B2 R2 U3 D3 F2 L2 D1        30q
  4)   D3 B2 L2 D3 B2 R2 L2 B2 R2 L2 D3 B2 R2 U2 R2 F2 U1           30q
  5)   D3 B2 D3 B2 L2 B2 U1 F2 U1 R2 L2 U1 F2 L2 D3 F2 L2 F2        30q
  6)   D3 B2 D3 B2 L2 B2 D1 R2 D1 R2 L2 D1 L2 B2 U3 F2 L2 F2        30q
  7)   D3 B2 L2 D1 F2 B2 L2 F2 B2 L2 D1 F2 L2 U1 D1 B2 R2 D1        30q
  8)   D3 B2 D3 B2 U1 F2 U3 L2 D3 F2 D1 R2 B2 R2 L2 D1 B2 R2 U1     30q
  9)   D3 B2 D3 F2 L2 U3 R2 D1 B2 R2 D3 R2 U1 F2 L2 D1 B2 R2 U1     30q
 10)   D3 B2 L2 D3 B2 R2 L2 B2 R2 L2 D3 B2 R2 U3 D3 F2 L2 U3        30q
 11)   D3 B2 L2 D1 F2 B2 L2 F2 B2 L2 D1 B2 R2 U3 D3 F2 L2 U3        30q
 12)   D3 B2 L2 D1 F2 B2 L2 F2 B2 L2 D1 F2 L2 U1 D1 B2 R2 U3        30q
 13)   D3 B2 D3 F2 L2 D3 F2 U1 F2 L2 D3 L2 U1 B2 R2 U1 L2 B2 U1     30q
 14)   D3 B2 L2 D1 F2 B2 L2 F2 B2 L2 D1 B2 R2 U1 D1 B2 R2 U1        30q
 15)   D3 B2 L2 D3 B2 R2 L2 B2 R2 L2 D3 B2 R2 U2 R2 F2 D1           30q
 16) inverse of 15
 17)   D3 B2 L2 D3 B2 R2 L2 B2 R2 L2 D3 B2 R2 U1 D1 B2 R2 U1        30q
 18)   D3 B2 D3 B2 L2 B2 U1 F2 U1 R2 L2 U1 F2 L2 U3 R2 F2 R2        30q
 19)   D3 B2 L2 D3 B2 R2 L2 B2 R2 L2 D3 F2 L2 U3 D3 F2 L2 U1        30q
 20)   D3 B2 D3 B2 L2 U1 L2 U3 F2 L2 D1 R2 U3 B2 U1 B2 R2 D3 F2     30q
 21) inverse of 20
 22)   D3 B2 D3 B2 U1 R2 L2 F2 U3 B2 R2 D1 F2 L2 U1 B2 U3 F2 D3     30q
 23)   D3 B2 D3 B2 L2 U3 L2 U1 F2 D1 F2 D3 L2 F2 B2 D1 F2 R2 D3     30q
 24)   D3 B2 D3 L2 D1 L2 U3 B2 U1 B2 L2 U1 B2 R2 L2 D3 F2 U3 R2     30q
 25)   D3 B2 D3 B2 L2 D3 B2 U1 L2 D1 L2 D3 B2 R2 L2 D1 L2 F2 D3     30q

the position identified by hans kloosterman is number 14.  there are
also a few closely related positions.

mike

From mreid@ptc.com  Sat Jan  7 21:03:01 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA09743; Sat, 7 Jan 95 21:03:01 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA09649; Sat, 7 Jan 95 21:01:07 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA07228; Sat, 7 Jan 1995 21:13:32 -0500
Date: Sat, 7 Jan 1995 21:13:32 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501080213.AA07228@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: antipodes in face turn metric
Content-Length: 8220

these are the antipodes of  H = <U, D, F2, R2, B2, L2>  in the face
turn metric, divided by the 16 symmetries.

  1)   D3 B2 D3 B2 D2 L2 D1 L2 B2 D2 F2 D1 R2 F2 U1 R2 F2 R2    18f
  2)   D3 B2 D3 B2 D2 L2 D1 L2 B2 D2 F2 U1 F2 L2 D1 R2 F2 R2    18f
  3)   D3 B2 D3 F2 D2 L2 U3 L2 F2 B2 U2 F2 U1 B2 U1 L2 B2 R2    18f
  4)   D3 B2 D3 L2 D2 R2 L2 F2 D3 B2 D2 R2 D3 F2 U1 B2 L2 F2    18f
  5)   D3 B2 D3 B2 U2 R2 D1 R2 F2 U2 F2 U1 F2 L2 D1 R2 F2 R2    18f
  6) inverse of 5
  7)   D3 B2 D3 L2 U2 R2 L2 B2 U3 R2 D2 F2 D3 L2 D1 B2 L2 F2    18f
  8)   D3 B2 D3 L2 U1 B2 U3 B2 R2 D3 B2 R2 U3 F2 D1 R2 B2 R2    18f
  9) inverse of 8
 10)   D3 B2 D3 L2 D1 L2 D3 B2 R2 U3 L2 B2 D3 F2 D1 R2 B2 R2    18f
 11)   D3 B2 D3 L2 D1 L2 U3 L2 B2 D3 L2 B2 D3 F2 D1 R2 B2 R2    18f
 12) inverse of 11
 13)   D3 B2 D3 L2 D1 L2 U3 L2 B2 D3 L2 B2 U3 R2 U1 R2 B2 R2    18f
 14)   D3 B2 L2 D2 L2 D3 B2 L2 U1 F2 U2 R2 U3 F2 B2 R2 D1 B2    18f
 15) inverse of 14
 16)   D3 B2 U2 R2 D1 L2 F2 R2 F2 D1 R2 D2 R2 B2 U1 B2 U1 B2    18f
 17) inverse of 16
 18)   D3 B2 L2 D2 L2 D3 B2 L2 D3 F2 D2 R2 U1 R2 L2 B2 U1 B2    18f
 19)   D3 B2 U2 R2 D1 L2 F2 R2 F2 U1 F2 D2 F2 R2 D1 B2 U1 B2    18f
 20)   D3 B2 D3 R2 F2 B2 U1 R2 L2 B2 D3 R2 D1 R2 F2 U1 L2 D3    18f
 21) inverse of 20
 22)   D3 B2 D3 F2 B2 R2 U1 R2 U3 L2 F2 R2 F2 D3 B2 U1 R2 D3    18f
 23)   D3 B2 D3 F2 B2 R2 U1 R2 D3 B2 L2 F2 L2 U3 B2 U1 R2 D3    18f
 24) inverse of 23
 25)   D3 B2 D3 F2 L2 U3 L2 D1 F2 U3 L2 D1 L2 B2 D1 F2 L2 B2    18f
 26)   D3 B2 D3 F2 B2 R2 D1 B2 U3 F2 R2 B2 R2 U3 F2 D1 F2 U3    18f
 27) inverse of 26
 28)   D3 B2 D2 L2 D1 L2 D1 L2 B2 D2 F2 D1 R2 U3 F2 L2 F2 B2    18f
 29) inverse of 28
 30)   D3 B2 D2 L2 D1 L2 U1 B2 R2 U2 R2 U1 R2 U3 F2 L2 F2 B2    18f
 31)   D3 B2 D3 F2 B2 R2 U1 R2 D3 B2 L2 F2 L2 D3 R2 D1 R2 D3    18f
 32)   D3 B2 L2 U3 F2 R2 B2 R2 D1 B2 U3 F2 U1 F2 D1 F2 D3 B2    18f
 33)   D3 F2 B2 L2 D1 B2 U1 R2 D3 L2 D1 L2 D1 R2 F2 U1 F2 R2    18f
 34)   D3 B2 R2 D3 F2 L2 B2 L2 D1 L2 D3 R2 U1 F2 D1 R2 U3 L2    18f
 35)   D3 B2 L2 D3 L2 F2 R2 F2 D1 R2 D3 B2 D1 L2 D1 L2 U3 B2    18f
 36)   D3 B2 L2 D3 L2 F2 R2 F2 D1 R2 U3 L2 D1 F2 D1 F2 D3 B2    18f
 37) inverse of 36
 38)   D3 B2 R2 U3 R2 F2 L2 F2 U1 L2 D3 R2 D1 R2 U1 R2 U3 L2    18f
 39)   D3 B2 L2 D3 R2 D2 B2 D3 R2 B2 U2 F2 D1 B2 D3 R2 B2 R2    18f
 40)   D3 B2 L2 D3 R2 U2 F2 U3 F2 R2 D2 R2 U1 B2 D3 R2 B2 R2    18f
 41)   D3 B2 L2 D1 B2 D2 R2 D1 R2 B2 U2 F2 U1 R2 U3 R2 B2 R2    18f
 42)   D3 B2 L2 D1 B2 D2 R2 U1 F2 R2 U2 L2 D1 R2 U3 R2 B2 R2    18f
 43)   D3 B2 L2 D3 R2 D2 B2 U3 B2 L2 D2 L2 D1 R2 U3 R2 B2 R2    18f
 44) inverse of 43
 45)   D3 B2 L2 D3 R2 D2 B2 D3 R2 B2 U2 F2 U1 R2 U3 R2 B2 R2    18f
 46)   D3 B2 D3 B2 L2 D2 F2 L2 F2 R2 D2 F2 R2 D1 F2 B2 R2 U3    18f
 47)   D3 B2 D3 B2 L2 U2 L2 F2 D2 F2 R2 U1 B2 R2 L2 B2 R2 U3    18f
 48)   D3 B2 D3 B2 L2 D2 L2 F2 D2 B2 L2 U1 B2 R2 L2 B2 R2 U3    18f
 49)   D3 B2 D3 B2 L2 U2 B2 L2 F2 L2 D2 B2 L2 D1 F2 B2 R2 U3    18f
 50)   D3 B2 U1 B2 U3 L2 U1 L2 U3 B2 R2 D3 F2 D1 L2 B2 L2 F2    18f
 51)   D3 B2 D1 B2 D3 R2 U1 F2 D3 R2 B2 D3 B2 D1 F2 R2 F2 L2    18f
 52) inverse of 51
 53)   D3 B2 D1 B2 D3 R2 D1 R2 D3 B2 L2 D3 L2 U1 F2 R2 F2 L2    18f
 54) inverse of 53
 55)   D3 B2 D1 B2 D3 R2 U1 F2 U3 B2 L2 D3 L2 U1 F2 R2 F2 L2    18f
 56)   D3 B2 D1 F2 L2 D3 R2 F2 D3 L2 D1 B2 R2 U1 F2 U3 B2 R2    18f
 57)   D3 B2 D1 F2 L2 D3 R2 F2 U3 F2 U1 B2 R2 D1 R2 D3 B2 R2    18f
 58)   D3 B2 D1 B2 U3 B2 U1 R2 D3 B2 L2 D3 L2 U1 F2 R2 F2 L2    18f
 59)   D3 B2 U1 F2 R2 U3 L2 F2 D3 F2 U1 R2 B2 U1 B2 U3 R2 B2    18f
 60) inverse of 59
 61)   D3 B2 L2 D3 R2 U1 F2 R2 L2 D3 L2 F2 U3 L2 U3 L2 D1 R2    18f
 62)   D3 B2 D2 L2 D1 R2 U3 F2 L2 U2 L2 D3 R2 D1 F2 R2 F2 L2    18f
 63) inverse of 62
 64)   D3 B2 D2 L2 U1 B2 R2 B2 L2 D3 R2 U2 L2 B2 D3 F2 U3 R2    18f
 65)   D3 B2 D2 L2 D1 L2 B2 L2 F2 D3 B2 U2 F2 L2 D3 R2 D3 R2    18f
 66)   D3 B2 D2 L2 D1 L2 B2 L2 F2 U3 L2 D2 L2 B2 D3 F2 U3 R2    18f
 67)   D3 B2 D2 L2 D1 R2 D3 L2 B2 D2 F2 D3 B2 U1 F2 R2 F2 L2    18f
 68)   D3 B2 D2 L2 D1 L2 B2 L2 F2 D3 B2 D2 B2 R2 U3 F2 U3 R2    18f
 69)   D3 B2 U2 R2 U1 B2 U3 R2 F2 U2 F2 D3 B2 U1 F2 R2 F2 L2    18f
 70)   D3 B2 D1 B2 D3 L2 F2 U1 B2 D3 F2 B2 L2 D1 B2 L2 D3 L2    18f
 71) inverse of 70
 72)   D3 B2 U1 R2 D3 B2 L2 U1 R2 D3 R2 L2 B2 D1 R2 B2 U3 L2    18f
 73)   D3 B2 D2 R2 U1 L2 F2 R2 F2 D3 F2 D2 B2 L2 D3 R2 D3 R2    18f
 74)   D3 B2 D2 R2 U1 L2 F2 R2 F2 U3 R2 U2 R2 B2 D3 F2 U3 R2    18f
 75)   D3 B2 D2 R2 D1 F2 R2 B2 R2 D3 R2 U2 R2 B2 D3 F2 U3 R2    18f
 76)   D3 B2 D2 R2 U1 L2 F2 R2 F2 D3 F2 U2 F2 R2 U3 F2 U3 R2    18f
 77)   D3 B2 D2 R2 D1 F2 R2 B2 R2 D3 R2 U2 R2 B2 U3 R2 D3 R2    18f
 78)   D3 B2 D3 F2 D2 L2 D3 F2 U2 L2 F2 B2 D3 R2 D3 L2 F2 R2    18f
 79) inverse of 78
 80)   D3 B2 D3 F2 D2 L2 D3 F2 D2 R2 F2 B2 U3 F2 U3 L2 F2 R2    18f
 81)   D3 B2 D3 F2 D2 L2 D1 R2 F2 B2 U2 F2 U1 F2 U3 L2 F2 R2    18f
 82) inverse of 81
 83)   D3 B2 D1 B2 D1 B2 U2 R2 D3 L2 F2 L2 B2 D1 B2 U2 F2 L2    18f
 84)   D3 B2 D3 F2 U2 R2 D3 B2 U2 R2 F2 B2 U3 F2 U3 L2 F2 R2    18f
 85) inverse of 84
 86)   D3 B2 D3 F2 U2 R2 U1 B2 R2 L2 U2 R2 U1 R2 D3 L2 F2 R2    18f
 87)   D3 B2 D1 B2 D1 B2 D2 L2 D3 R2 B2 R2 F2 D1 F2 D2 F2 L2    18f
 88)   D3 B2 D3 F2 D2 L2 U1 F2 R2 L2 U2 L2 D1 F2 U3 L2 F2 R2    18f
 89)   D3 B2 D3 F2 D2 L2 U1 F2 R2 L2 D2 R2 U1 R2 D3 L2 F2 R2    18f
 90)   D3 B2 D3 R2 D2 F2 D3 L2 D2 B2 U1 F2 R2 L2 U3 L2 B2 R2    18f
 91) inverse of 90
 92)   D3 B2 D3 R2 D2 F2 U3 F2 D2 L2 U1 R2 F2 B2 D3 L2 B2 R2    18f
 93)   D3 B2 D3 R2 D2 B2 R2 L2 U1 L2 U2 B2 U3 L2 D3 R2 B2 L2    18f
 94) inverse of 93
 95)   D3 B2 D3 R2 D2 B2 R2 L2 D3 R2 U2 B2 D1 L2 D3 R2 B2 L2    18f
 96)   D3 B2 D3 R2 D2 B2 R2 L2 U3 B2 U2 L2 U1 L2 D3 R2 B2 L2    18f
 97) inverse of 96
 98)   D3 B2 D3 R2 D2 B2 R2 L2 U1 L2 U2 B2 D3 B2 U3 R2 B2 L2    18f
 99)   D3 B2 D3 R2 D2 F2 U3 F2 U2 R2 D1 F2 R2 L2 U3 L2 B2 R2    18f
100)   D3 B2 D3 R2 D2 F2 D1 B2 D2 L2 D3 R2 F2 B2 D3 L2 B2 R2    18f
101)   D3 B2 D3 R2 D2 B2 R2 L2 D3 R2 U2 B2 U1 B2 U3 R2 B2 L2    18f
102)   D3 B2 D2 L2 D1 B2 R2 F2 R2 U1 F2 D2 B2 R2 D1 R2 U1 F2    18f
103)   D3 B2 D3 F2 D1 R2 U3 B2 L2 U3 B2 L2 U3 R2 D1 R2 F2 R2    18f
104)   D3 B2 U2 R2 D1 F2 L2 B2 L2 D1 L2 U2 L2 B2 U1 R2 U1 F2    18f
105)   D3 B2 U3 R2 D1 B2 D3 B2 L2 U3 B2 L2 U3 R2 D1 R2 F2 R2    18f
106)   D3 B2 D3 F2 U1 F2 D3 F2 R2 D3 L2 F2 D3 R2 D1 R2 F2 R2    18f
107) inverse of 106
108)   D3 B2 U2 R2 U1 L2 B2 R2 B2 U1 R2 D2 L2 B2 U1 R2 U1 F2    18f
109)   D3 B2 U3 R2 D1 B2 U3 L2 F2 U3 L2 F2 D3 R2 D1 R2 F2 R2    18f
110)   D3 B2 D3 B2 R2 L2 D1 F2 B2 R2 U3 B2 U1 B2 L2 D1 F2 D3    18f
111)   D3 B2 D2 L2 D1 F2 U1 F2 R2 D2 R2 D1 R2 D3 B2 L2 F2 B2    18f
112)   D3 B2 U3 L2 F2 B2 U1 F2 B2 R2 D3 R2 D1 B2 L2 U1 L2 U3    18f
113)   D3 B2 D3 B2 U1 L2 F2 L2 B2 D1 R2 U3 R2 F2 B2 D1 B2 D3    18f
114)   D3 B2 D3 B2 D1 F2 R2 F2 L2 D1 B2 D3 R2 F2 B2 U1 R2 U3    18f
115) inverse of 114
116)   D3 B2 D3 B2 D1 F2 R2 F2 L2 D1 B2 D3 R2 F2 B2 D1 B2 D3    18f
117)   D3 B2 D2 L2 U1 L2 U1 L2 F2 U2 B2 U1 R2 D3 B2 L2 F2 B2    18f
118)   D3 B2 D3 F2 U2 F2 B2 L2 D3 F2 D2 L2 D3 L2 D1 R2 F2 L2    18f
119) inverse of 118
120)   D3 B2 D3 F2 D2 F2 B2 R2 D1 R2 D2 B2 U1 F2 U1 R2 F2 L2    18f
121)   D3 B2 D3 L2 D2 B2 D1 L2 U2 F2 R2 L2 D3 R2 D1 F2 R2 B2    18f
122)   D3 B2 D3 F2 U2 F2 B2 L2 U1 B2 U2 R2 D1 F2 U1 R2 F2 L2    18f
123)   D3 B2 D3 F2 D2 F2 B2 R2 D1 R2 U2 F2 D1 L2 D1 R2 F2 L2    18f
124)   D3 B2 D3 F2 D2 F2 B2 R2 U3 L2 U2 F2 D3 F2 U1 R2 F2 L2    18f
125)   D3 B2 L2 D3 B2 D1 R2 B2 D2 B2 D1 F2 R2 U1 R2 D2 R2 B2    18f
126) inverse of 125
127)   D3 B2 L2 D3 B2 D1 R2 B2 U2 F2 U1 R2 B2 D1 L2 U2 R2 B2    18f
128)   D3 B2 L2 U3 L2 D1 B2 L2 U2 R2 U1 B2 L2 U1 L2 U2 R2 B2    18f
129)   D3 B2 L2 U3 L2 D1 B2 L2 U2 R2 D1 L2 F2 D1 R2 D2 R2 B2    18f
130)   D3 B2 L2 D3 B2 U1 F2 R2 D2 R2 U1 B2 L2 U1 L2 U2 R2 B2    18f
131)   D3 B2 L2 D3 B2 D1 R2 B2 D2 B2 U1 L2 F2 D1 R2 D2 R2 B2    18f
132)   D3 B2 R2 U3 F2 D3 R2 U1 L2 F2 L2 B2 U1 R2 D1 L2 U3 B2    18f
133) inverse of 132
134)   D3 B2 L2 D3 F2 D3 R2 B2 U2 L2 B2 U1 R2 D1 B2 L2 U2 L2    18f
135)   D3 B2 R2 D3 L2 U3 B2 R2 D2 F2 R2 U1 R2 D1 R2 F2 U2 B2    18f
136)   D3 B2 L2 U3 R2 D3 B2 L2 U2 F2 L2 D1 L2 D1 F2 R2 D2 L2    18f
137)   D3 B2 L2 D3 F2 U3 B2 L2 U2 F2 L2 U1 B2 U1 B2 L2 U2 L2    18f
138)   D3 B2 L2 D3 F2 D3 R2 B2 D2 R2 F2 U1 L2 D1 F2 R2 D2 L2    18f

kloosterman's position is number 46.

mike

From mreid@ptc.com  Thu Jan 12 19:36:23 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA23412; Thu, 12 Jan 95 19:36:23 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA08082; Thu, 12 Jan 95 19:34:56 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA25588; Thu, 12 Jan 1995 19:47:42 -0500
Date: Thu, 12 Jan 1995 19:47:42 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501130047.AA25588@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: superflip
Content-Length: 1768

i've also done some searching for short maneuvers for superflip,
although not to the extent that dik has.  i was never really
satisfied with my efforts to exploit its symmetry and centrality.
however, i've recently had some new thoughts about this which
look promising.

consider two cases:

case 1:
suppose that there is a minimal sequence for superflip which
contains a half-turn.  then, by applying  R' U2 to superflip,
we've moved  3q  (or  2f )  closer to start.

case 2:
otherwise, every minimal sequence contains only 90 degree turns.
then either  R' U'  gets us  2q  (or  2f )  closer to start,
or  R' U  gets us  2q  (or  2f )  closer to start.  (and probably
both do.)

it would be nice to reduce this latter case to only one of  R' U'
or  R' U .  can anyone do this?


this was how i found the  24q  sequence for superflip.  i figured
that case 1 was fairly likely, so i tested the position

        superflip  R' U2

kociemba's algorithm found in succession  11 + 22 = 33q,
11 + 20 = 31q,  12 + 17 = 29q,  13 + 14 = 27q,  13 + 12 = 25q,
which gives superflip in  28q.  there was no improvement for quite
some time until depth 17 in stage 1 when it found  17 + 6 = 23q.
it searched for several days more and finished depth 17 and depth 18
in stage 1.  i was about to give up when i saw that it found
19 + 2 = 21q,  to give superflip in  24q.

here's a nice (and quite surprising application) of the above
use of symmetry and centrality:

when searching for superflip in the face turn metric, it's
sufficient to search through depth 17 in stage 1!

suppose we have a  19f  sequence for superflip.  then, by considering
parity, some turn must be a half-turn.  now we may suppose (as above)
that the last two face turns are  U R2 ,  which is in stage 2!

mike

From mreid@ptc.com  Sat Jan 14 17:07:00 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA28724; Sat, 14 Jan 95 17:07:00 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA14825; Sat, 14 Jan 95 17:05:36 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA27289; Sat, 14 Jan 1995 17:18:30 -0500
Date: Sat, 14 Jan 1995 17:18:30 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501142218.AA27289@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: more on superflip
Content-Length: 3294

recently i said:

> when searching for superflip in the face turn metric, it's
> sufficient to search through depth 17 in stage 1!

since posting this, i've realized that we can do much better.
here's my current approach.  everything below refers to the
face turn metric.  (i have similar reductions for quarter turns,
but they're not quite as good.)

proposition 1.  there is a minimal sequence for superflip of the form

                      sequence_1  sequence_2

                where  sequence_1  is in stage 1,  sequence_2  is in
                stage 2, and  sequence_1  is at most  17f  long.

proof.  consider the different possibilities for the length of a
        minimal sequence for superflip:  20f, 19f, 18f, 17f  or less.
        in the first case, we already know a maneuver of the form.
        in the second case, my discussion on thursday shows that
        we'll have such a maneuver.  in the case of  18f , we may
        suppose that the last face turned is  U , so we'll have such
        a maneuver.  and in the last case, we may take  sequence_2
        to be the empty sequence.  this proves prop. 1.

proposition 2.  there is a minimal sequence for superflip of the form

                    R1  sequence_1  sequence_2

                where  sequence_1  is in stage 1,  sequence_2  is in
                stage 2, and  sequence_1  is at most  16f  long.

proof.  consider the maneuver given by prop. 1.  by applying one of
        the 16 symmetries that fix the  U - D axis, we may suppose
        that the first turn of  sequence_1  is either  U1, U2, R1,
        or  R2.  in the case of

                    U1  sequence_1  sequence_2,

        replace this by

                    sequence_1  sequence_2  U1,

        and try again.  handle the cases starting with  U2  and  R2
        similarly.  we will either exhaust the stage 1 part of the
        sequence (which is impossible, since superflip isn't in
        the subgroup of stage 2) or we'll wind up with a manuever
        starting with  R1 , as desired.  this proves prop. 2.

there's still some more symmetry left to exploit.

proposition 3.  there is a minimal sequence for superflip of one of the
                forms

                          R1 F1  sequence_1  sequence_2,
                          R1 F2  sequence_1  sequence_2,
                          R1 F3  sequence_1  sequence_2,
                          R1 U1  sequence_1  sequence_2,
                          R1 U2  sequence_1  sequence_2,
                          R1 U3  sequence_1  sequence_2,
                          R1 L1  sequence_1  sequence_2,   or
                          R1 L3  sequence_1  sequence_2,

                where  sequence_1  is in stage 1,  sequence_2  is in
                stage 2, and  sequence_1  is at most  15f  long.

proof.  by applying the symmetry  C_R2  if necessary, we may suppose
        that the second turn of the maneuver given by prop. 2 is one
        of  F1, F2, F3, U1, U2, U3, L1, L2  or  L3.  this gives nine
        cases.  in the case

                R1 L2  sequence_1  sequence_2,

        replace this by

                R1  sequence_1  sequence_2  L2

        and try again.  this proves prop. 3.


i have these cases running right now, and i hope to have results soon!

mike

From mreid@ptc.com  Wed Jan 18 10:02:03 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA20530; Wed, 18 Jan 95 10:02:03 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA06914; Wed, 18 Jan 95 10:00:38 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA00811; Wed, 18 Jan 1995 10:13:45 -0500
Date: Wed, 18 Jan 1995 10:13:45 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501181513.AA00811@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: superflip requires 20 face turns
Content-Length: 3124

superflip is now known to require 20 face turns.  in particular, the
diameter of the cube group is at least 20 face turns (and i conjecture
that it's larger).  as far as i can tell, this is the first improvement
to the lower bound (18f) given by a simple counting argument.

in my previous two messages, i gave a proof of the fact that there is a
minimal sequence for superflip in one of the following forms:

    R1 F1  sequence_1  sequence_2,
    R1 F2  sequence_1  sequence_2,
    R1 F3  sequence_1  sequence_2,
    R1 U1  sequence_1  sequence_2,
    R1 U2  sequence_1  sequence_2,
    R1 U3  sequence_1  sequence_2,
    R1 L1  sequence_1  sequence_2,   or
    R1 L3  sequence_1  sequence_2,

where  sequence_2  is in the subgroup of stage 2 of kociemba's algorithm,
and  sequence_1  is at most  15f  long.  as of monday morning, the first
six cases were completely searched, but the final two seemed to be much
slower.  fortunately, there is more symmetry available here (which is at
least part of the reason that these cases are so slow).

in the case starting with  R1 L1,  we have four symmetries (generated by
C_R2  and  C_U2)  which fix the subgroup of stage 2.  using these
symmetries, we may suppose that the third face turn is one of  U1, U2, U3,
F1, F2  or  F3.

in the case starting with  R1 L3,  we again have four symmetries which fix
the subgroup of stage 2.  in this case, the symmetries are generated by
C_R2  and reflection through the  R - L plane.  using these symmetries,
we may suppose that the third face turn is one of  U1, U2, F1  or  F2.

even with these reductions, the last two cases are still somewhat
stubborn.  finally they were completed this morning.

here's a summary of what i tested:

position tested:  depth tested

superflip  R1 F1:  15f deep in stage 1
best solution found:  15 + 3 = 18f

superflip  R1 F2:  15f deep in stage 1
best solution found:  15 + 3 = 18f

superflip  R1 F3:  15f deep in stage 1
best solution found:  15 + 3 = 18f

superflip  R1 U1:  15f deep in stage 1
best solution found:  11 + 8 = 19f

superflip  R1 U2:  15f deep in stage 1
best solution found:  13 + 5 = 18f

superflip  R1 U3:  15f deep in stage 1
best solution found:  12 + 7 = 19f


superflip  R1 L1 U1:  14f deep in stage 1
best solution found:  11 + 7 = 18f

superflip  R1 L1 U2:  14f deep in stage 1
best solution found:  10 + 7 = 17f

superflip  R1 L1 U3:  14f deep in stage 1
best solution found:  11 + 7 = 18f

superflip  R1 L1 F1:  14f deep in stage 1
best solution found:  12 + 5 = 17f

superflip  R1 L1 F2:  14f deep in stage 1
best solution found:  10 + 8 = 18f

superflip  R1 L1 F3:  14f deep in stage 1
best solution found:  12 + 5 = 17f


superflip  R1 L3 U1:  14f deep in stage 1
best solution found:  14 + 3 = 17f

superflip  R1 L3 U2:  14f deep in stage 1
best solution found:  10 + 8 = 18f

superflip  R1 L3 F1:  14f deep in stage 1
best solution found:  12 + 5 = 17f

superflip  R1 L3 F2:  14f deep in stage 1
best solution found:  13 + 5 = 18f


total run time was about 210 cpu hours (somewhat more than i'd hoped for)
distributed across several machines of varying ability.

mike

From mreid@ptc.com  Wed Jan 18 10:39:55 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA22619; Wed, 18 Jan 95 10:39:55 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA07119; Wed, 18 Jan 95 10:38:31 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA00837; Wed, 18 Jan 1995 10:51:39 -0500
Date: Wed, 18 Jan 1995 10:51:39 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501181551.AA00837@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: searching for superflip in quarter turn metric
Content-Length: 3083

here's my approach to searching for superflip in the quarter turn metric.
i gave a maneuver of length  24q  for superflip on january 10.  suppose
there is a maneuver of length 22q (or shorter).  consider three cases:

case 1.  there is a minimal maneuver which contains a half-turn.

case 2.  no minimal maneuver contains a half-turn, but there is a
         minimal maneuver which contains consecutive turns of
         opposite faces.

case 3.  neither case 1 nor case 2 hold.


in case 1, we may find a minimal sequence of the form

         sequence_1  sequence_2,

where  sequence_2  is at least  3q  long.  as in the face turn metric,
we may also suppose that  sequence_1  starts with one of

        R1 F1,   R1 F2,   R1 F3,   R1 U1,   R1 U2,   R1 U3,
        R1 L1 U1,   R1 L1 U2,   R1 L1 U3,   R1 L1 F1,   R1 L1 F2,
        R1 L1 F3,   R1 L3 U1,   R1 L3 U2,   R1 L3 F1,   R1 L3 F2.

furthermore, the case starting with  R1 F2  may be included in the
case starting with  R1 F1,  and similarly for other cases.  thus we
may suppose that  sequence_1  starts with one of

        R1 F1,   R1 F3,   R1 U1,   R1 U3,
        R1 L1 U1,   R1 L1 U3,   R1 L1 F1,   R1 L1 F3,
        R1 L3 U1,   R1 L3 F1.


in case 2, we may find a minimal sequence of the form

         sequence_1  sequence_2,

where  sequence_2  is at least  2q  long.  as in case 1, we may suppose
that  sequence_1  starts with one of the ten sequences above.


in case 3, the best we can do is  1q  in stage 2.  however, i claim
that we can find three consecutive turns of mutual adjacent faces.
otherwise, we'd have a maneuver for superflip using only the four faces
F, R, B, L,  (for example)  which is ridiculous, because edges can't
change orientation using only these turns.

therefore, we may suppose that a minimal sequence starts with three
consecutive turns of mutual adjacent faces.  up to symmetry, there
are eight cases for these turns:

      U1 R1 F1,   U1 R1 F3,   U3 R1 F1,   U3 R1 F3,
      D1 R1 F1,   D1 R1 F3,   D3 R1 F1,   D3 R1 F3.

replace   U1 R1 F1  sequence   by   R1 F1  sequence  U1  ,  and
similarly for the other seven cases.  thus we have a minimal
maneuver in the form   sequence_1  sequence_2 ,  where  sequence_2
is  1q  long  and  sequence_1  starts with either  R1 F1  or  R1 F3.


combining all the above cases, a maneuver for superflip in  22q  or less
(assuming one exists) may be found in one of the forms:

        R1 L1 U1  sequence_1  sequence_2,
        R1 L1 U3  sequence_1  sequence_2,
        R1 L1 F1  sequence_1  sequence_2,
        R1 L1 F3  sequence_1  sequence_2,
        R1 L3 U1  sequence_1  sequence_2,
        R1 L3 F1  sequence_1  sequence_2,

where  sequence_1  is at most  17q  long,

        R1 U1  sequence_1  sequence_2,
        R1 U3  sequence_1  sequence_2,

where  sequence_1  is at most  18q  long,

        R1 F1  sequence_1  sequence_2,
        R1 F3  sequence_1  sequence_2,

where  sequence_1  is at most  19q  long.


i don't know how feasible this is (but it sure looks formidable).
to get some idea, first i'll test for  20q  or less.

mike

From mreid@ptc.com  Fri Jan 20 15:46:17 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA12414; Fri, 20 Jan 95 15:46:17 EST
Received: from ducie.ptc.com by ptc.com (5.0/SMI-SVR4-NN)
	id AA19444; Fri, 20 Jan 95 15:44:52 EST
Received: by ducie.ptc.com (1.38.193.4/sendmail.28-May-87)
	id AA10072; Fri, 20 Jan 1995 15:58:08 -0500
Date: Fri, 20 Jan 1995 15:58:08 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501202058.AA10072@ducie.ptc.com>
To: cube-lovers@ai.mit.edu
Subject: superflip in quarter turn metric
Content-Length: 3456

i've finished searching for superflip in  20q , and no solutions were
found.  thus superflip requires at least  22q , which gives a new lower
bound for the diameter of the cube group in the quarter turn metric.
total cpu spent on the search was 29 cpu hours.  based on this, i would
make a rough estimate of 2.5 to 3 months cpu time for an exhaustive
search through depth  22q.

this time i collected some statistics the way dik did.  this should be
helpful for troubleshooting.  it's not foolproof, but it's a reasonable
start.  i will rerun the face turn search and collect the same data
along the way.

mike


statistics follow:

depth in        number of times          solutions
stage 1        stage 2 is reached          found

superflip  R1 L1 U1:

 9q                     64               33q, 31q, 29q
10q                    272
11q                   3728               27q
12q                  26440
13q                 164664               25q
14q                 911112
15q                5516208
 
superflip  R1 L1 U3:

 9q                     64               31q, 29q, 27q
10q                    272
11q                   3728
12q                  26440
13q                 164664
14q                 911112               25q
15q                5516208

superflip  R1 L1 F1:

 9q                    288               31q, 29q, 27q
10q                   2192
11q                  13496
12q                  65280
13q                 352056               25q, 23q
14q                1810744
15q                9753608

superflip  R1 L1 F3:

 9q                    288               31q, 29q, 27q
10q                   2192
11q                  13496
12q                  65280               25q
13q                 352056
14q                1810744
15q                9753608

superflip  R1 L3 U1:

 9q                     64               33q, 31q, 29q, 27q
10q                    272
11q                   3728
12q                  26440               25q
13q                 164664
14q                 911112               23q
15q                5516208

superflip  R1 L3 F1:

 9q                    288               33q, 31q, 29q
10q                   2192               27q
11q                  13496               25q
12q                  65280
13q                 352056
14q                1810744
15q                9753608

superflip R1 U1:

10q                      6               32q
11q                    106               28q
12q                   4216               26q
13q                  30318
14q                 212208
15q                1414882
16q                9807890

superflip R1 U3:

10q                      6               32q
11q                    106               30q, 28q
12q                   4216               26q
13q                  30318
14q                 212208               24q
15q                1414882
16q                9807890

superflip R1 F1:

10q                     78               32q, 30q, 28q
11q                    352
12q                   5338               26q, 24q
13q                  35996
14q                 241230
15q                1549382
16q               10531798
17q               71358512

superflip R1 F3:

10q                     78               28q
11q                    352
12q                   5338               26q, 24q
13q                  35996
14q                 241230
15q                1549382
16q               10531798
17q               71358512


From BRYAN@wvnvm.wvnet.edu  Fri Jan 20 20:41:10 1995
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA27138; Fri, 20 Jan 95 20:41:10 EST
Message-Id: <9501210141.AA27138@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 0675; Fri, 20 Jan 95 17:07:06 EST
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 0198; Fri, 20 Jan 1995 17:07:06 -0500
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Fri, 20 Jan 1995 17:07:05 EST
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: <mreid@ptc.com>, "Cube Lovers List" <cube-lovers@ai.mit.edu>
Subject:   Re: superflip in quarter turn metric
In-Reply-To: Message of 01/20/95 at 15:58:08 from mreid@ptc.com

On 01/20/95 at 15:58:08 mreid@ptc.com said:
>i've finished searching for superflip in  20q , and no solutions were
>found.  thus superflip requires at least  22q , which gives a new lower
>bound for the diameter of the cube group in the quarter turn metric.
>total cpu spent on the search was 29 cpu hours.  based on this, i would
>make a rough estimate of 2.5 to 3 months cpu time for an exhaustive
>search through depth  22q.

Rats.  You beat me by about a half hour.  I just finished comparing
Level 10 of my data base with the same Level 10 superflipped.  There
were no matches.

I just about have Level 11 completed.  This will provide interesting
new information in and of itself, because previously there has only
been an exhaustive search through level 10.  Once I complete Level 11,
I will superflip it and see what happens.

The superflip is especially amenable to a "two half depth search".
Normally, you would have to build one tree with Start at the root,
and a second tree with X at the root, where X is the position you
were testing.  But a search tree with superflip at the root is
identical to a search tree with Start at the root except that the
superflip tree has each element superflipped as compared to the
respective element of the tree with Start at the root.  Hence,
building the tree with Superflip at the root is quite easy once
the tree with Start at the root is in hand.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From @uconnvm.uconn.edu:dmoews@xraysgi.ims.uconn.edu  Sun Jan 22 01:25:28 1995
Return-Path: <@uconnvm.uconn.edu:dmoews@xraysgi.ims.uconn.edu>
Received: from UConnVM.UConn.Edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA25252; Sun, 22 Jan 95 01:25:28 EST
Received: from venus.ims.uconn.edu by UConnVM.UConn.Edu (IBM VM SMTP V2R2)
   with TCP; Sun, 22 Jan 95 01:25:48 EST
Received: from xraysgi.ims.uconn.edu by venus.ims.uconn.edu (4.1/SMI-4.1)
	id AA05317; Sat, 27 Apr 02 04:47:10 EST
Received: by xraysgi.ims.uconn.edu (920330.SGI/911001.SGI)
	for @venus.ims.uconn.edu:cube-lovers@ai.mit.edu id AA25808; Mon, 23 Jan 95 01:24:21 -0500
Date: Mon, 23 Jan 95 01:24:21 -0500
From: dmoews@xraysgi.ims.uconn.edu (David Moews)
Message-Id: <9501230624.AA25808@xraysgi.ims.uconn.edu>
To: cube-lovers@ai.mit.edu, dmoews@xraysgi.ims.uconn.edu
Subject: Shamir's method on the superflip

I can also report that the superflip requires at least 19 face turns.   I
got this result using Shamir's algorithm, which Mike Reid describes briefly
in his message <9412162233.AA27627@ducie.ptc.com>.  To repeat him: Shamir's 
method allows you to generate in lexicographic order all permutations st,
where s and t are elements of lists S and T of permutations, respectively,
while using only space proportional to the sum of the sizes of the lists.
What I did was to first check that the superflip f couldn't be done in 11 or
fewer face turns (easy) and to then try to solve f=stuv, where s and v have
4 face turns and t and u have 2 to 5 face turns.  This is done by scanning
through the (ordered) lists of all st's and all f v^(-1) u^(-1)'s and checking
to see if there is a common element. Shamir's method then has to be applied to
S and T and to V and T, where T is a list of permutations with 2 to 5 face
turns, S is a list of permutations s with 4 face turns, and V is a list of
permutations f v^(-1), where v has 4 face turns.  The number of candidates
for s and v can be reduced by making use of the fact that f is central, has 
order 2, and is invariant under conjugation by the symmetry group of the cube. 
The computation took 52 hours of CPU time on an SGI Crimson (R4000 50/100 MHz
CPU.)  More than half the CPU time is spent composing permutations and updating
priority queues (see below.)

Some have expressed concern that Shamir's method is a memory hog.  Applying 
it to S and T requires a rather complicated tree of permutations in T and a 
priority queue of permutations in S.  I used the wreath product representation 
of the cube group (so `permutation' is something of a misnomer,) and my memory 
usage was then as follows:

Per element of S:
48 bytes      permutation s in S (can be shared with other S's and T's)
40 bytes      composition st   (not absolutely necessary, but speeds things up)
16 bytes      pointers internal to the queue and to an element t of T
---------
104 bytes

Per element of T:
48 bytes      permutation t in T (can be shared, as before)
8 bytes       pointer immediately above t
<=16 bytes    Amortized cost of higher-up regions of the tree
----------
<=72 bytes

The T tree is not altered during traversal, so if you are applying the method
to S and T and V and T simultaneously you just need one T tree.  
All told, my memory usage was around 46M.

Looking for a 20 face turn representation by this method would probably take
around 59M of memory and 710 hours of CPU time (on this machine.)
-- 
David Moews                                dmoews@xraysgi.ims.uconn.edu


From @uconnvm.uconn.edu:dmoews@xraysgi.ims.uconn.edu  Sun Jan 22 17:06:42 1995
Return-Path: <@uconnvm.uconn.edu:dmoews@xraysgi.ims.uconn.edu>
Received: from UConnVM.UConn.Edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA23273; Sun, 22 Jan 95 17:06:42 EST
Received: from venus.ims.uconn.edu by UConnVM.UConn.Edu (IBM VM SMTP V2R2)
   with TCP; Sun, 22 Jan 95 17:07:00 EST
Received: from xraysgi.ims.uconn.edu by venus.ims.uconn.edu (4.1/SMI-4.1)
	id AA05345; Sat, 27 Apr 02 20:28:20 EST
Received: by xraysgi.ims.uconn.edu (920330.SGI/911001.SGI)
	for @venus.ims.uconn.edu:cube-lovers@ai.mit.edu id AA27851; Mon, 23 Jan 95 17:05:33 -0500
Date: Mon, 23 Jan 95 17:05:33 -0500
From: dmoews@xraysgi.ims.uconn.edu (David Moews)
Message-Id: <9501232205.AA27851@xraysgi.ims.uconn.edu>
To: cube-lovers@ai.mit.edu, dmoews@xraysgi.ims.uconn.edu
Subject: Symmetry reductions of the superflip


As I mentioned in my last message, I used symmetries to reduce the
number of candidate sequences for the superflip.  Here's how:

Suppose we have a sequence for the superflip that has at least 4 syllables.
(Here, a syllable is a maximal sequence of commuting face turns, i.e., a
maximal sequence of face turns on the same axis.)  The sequence of axes
in these syllables must look like

(1) Z X ... X Y, (2) Z Y ... X Y, (3) X Z ... X Y, or (4) X Y ... X Y,

for some distinct axes X, Y, and Z.  Remember that the superflip is
central, so we can cyclically permute the sequence of syllables.  If
doing this always results in pattern (4), we only use two axes, but
this can't flip any edges; hence, we can get (1), (2) or (3).  By inverting
the (order 2) superflip we can change (2) to (3).  Then we have (1)
or (3).  By applying a symmetry of the cube, we can let X, Y and Z be
the FB, UD, and LR axes, respectively.

We still have some of the symmetry group to work with, namely the set of
the eight symmetries of the cube that fix all cube axes.  If we need to,
we can apply a 180-degree rotation of the cube about the UD or LR axes,
which lets us restrict the first FB syllable to 9 of the 15 possibilities;
then, rotating about the FB axis, we can do the same for the last UD syllable.
Finally, we can reflect the cube through the plane between R and L; this lets
us restrict the first LR syllable to 9 possibilities, although it expands the
number of possibilities for the last UD and first FB syllables to 10 each.

Some more estimated runtimes for my Shamir implementation: 20 CPU hr for 
a 20 qtw superflip; 190 CPU hr for a 22 qtw superflip.
-- 
David Moews                                   dmoews@xraysgi.ims.uconn.edu


From mreid@ptc.com  Mon Jan 30 11:04:29 1995
Return-Path: <mreid@ptc.com>
Received: from ptc.com (poster.ptc.com) by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA02836; Mon, 30 Jan 95 11:04:29 EST
Received: from ducie by ptc.com (5.0/SMI-SVR4-NN)
	id AA28955; Mon, 30 Jan 95 11:03:02 EST
Received: by ducie (1.38.193.4/sendmail.28-May-87)
	id AA15148; Mon, 30 Jan 1995 11:16:56 -0500
Date: Mon, 30 Jan 1995 11:16:56 -0500
From: mreid@ptc.com (michael reid)
Message-Id: <9501301616.AA15148@ducie>
To: cube-lovers@ai.mit.edu
Subject: Re: superflip requires 20 face turns
Content-Length: 5225

as promised, i reran the face turn search and collected data along
the way.  total run time was 143.7 cpu hours (just a shade under
six days) on an HP 9000 series 715, 100MHz clock.  so this machine
is a bit faster than some of the others that helped out on the
original run.  (there was also some overlap between different
machines.)

these figures also show why the cases starting with  R1 L1  and
R1 L3  are so slow:  many more sequences in stage 1 to check.

mike


statistics below:

depth in        number of times          solutions
stage 1        stage 2 is reached          found

superflip  R1 F1:

 9f                      2               23f, 22f
10f                    942               21f, 20f
11f                  19180
12f                 255716               19f
13f                2967572
14f               32053344
15f              330809868               18f

superflip  R1 F2:

10f                    948               22f, 21f
11f                  19032               20f, 19f
12f                 251312
13f                2913516
14f               31351632
15f              321390912               18f

superflip  R1 F3:

 9f                      2               21f
10f                    942
11f                  19180               20f, 19f
12f                 255716
13f                2967572
14f               32053344
15f              330809868               18f

superflip  R1 U1:

 9f                      2               21f
10f                    826
11f                  17140               20f, 19f
12f                 231130
13f                2702062
14f               29334386
15f              303689360

superflip  R1 U2:

10f                    812               22f
11f                  17080               21f
12f                 232452               20f, 19f
13f                2735896               18f
14f               29776092
15f              307802732

superflip  R1 U3:

 9f                      2               23f, 22f
10f                    826
11f                  17140               21f, 20f
12f                 231130               19f
13f                2702062
14f               29334386
15f              303689360

superflip  R1 L1 F1:

 7f                     96               20f, 19f
 8f                   1824               18f
 9f                  21768
10f                 229616
11f                2267728
12f               21151120               17f
13f              189906448
14f             1660964664

superflip  R1 L1 F2:

 8f                    384               22f, 21f, 20f
 9f                   8448               19f
10f                 113440               18f
11f                1268896
12f               12941696
13f              124124064
14f             1141576128

superflip  R1 L1 F3:

 7f                     96               20f, 19f
 8f                   1824               18f
 9f                  21768
10f                 229616
11f                2267728
12f               21151120               17f
13f              189906448
14f             1660964664

superflip  R1 L1 F3:

 7f                     96               20f, 19f
 8f                   1824               18f
 9f                  21768
10f                 229616
11f                2267728
12f               21151120               17f
13f              189906448
14f             1660964664

superflip  R1 L1 U1:

 9f                    832               22f, 21f, 20f
10f                  16912               19f
11f                 224248               18f
12f                2597672
13f               27754280
14f              279317240

superflip  R1 L1 U2:

 8f                    384               22f, 21f, 20f
 9f                   8448               19f, 18f
10f                 113440               17f
11f                1268896
12f               12941696
13f              124124064
14f             1141576128

superflip  R1 L1 U3:

 9f                    832               21f, 20f
10f                  16912               19f
11f                 224248               18f
12f                2597672
13f               27754280
14f              279317240

superflip  R1 L3 F1:

 7f                     96               21f, 20f, 19f
 8f                   1824               18f
 9f                  21768
10f                 229616
11f                2267728
12f               21151120               17f
13f              189906448
14f             1660964664

superflip  R1 L3 F2:

 8f                    384               22f, 21f, 20f
 9f                   8448               19f
10f                 113440
11f                1268896
12f               12941696
13f              124124064               18f
14f             1141576128

superflip  R1 L3 U1:

 9f                    832               23f, 22f, 21f, 19f
10f                  16912
11f                 224248
12f                2597672               18f
13f               27754280
14f              279317240               17f

superflip  R1 L3 U2:

 8f                    384               21f, 20f
 9f                   8448               19f
10f                 113440               18f
11f                1268896
12f               12941696
13f              124124064
14f             1141576128


From BRYAN@wvnvm.wvnet.edu  Sat Feb  4 12:08:24 1995
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA17871; Sat, 4 Feb 95 12:08:24 EST
Message-Id: <9502041708.AA17871@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 4730; Sat, 04 Feb 95 09:25:25 EST
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 9067; Sat, 4 Feb 1995 09:25:25 -0500
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Sat, 4 Feb 1995 09:25:24 EST
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Level 11, Whole Cube, Q-turns


 Distance        X  Branching      {m'Xm} Branching Ratio   Local
 from                Factor                Factor    of       Max
 Start                                              Cubes
                                                  to Classes
 0               1                      1                       0
 1              12  12.000              1   1.000    12.000     0
 2             114   9.500              5   5.000    22.800     0
 3           1,068   9.368             25   5.000    42.720     0
 4          10,011   9.374            219   8.760    45.712     0
 5          93,840   9.374          1,978   9.032    47.442     0
 6         878,880   9.366         18,395   9.300    47.778     0
 7       8,221,632   9.355        171,529   9.325    47.931     0
 8      76,843,595   9.347      1,601,725   9.338    47.976     0
 9     717,789,576   9.341     14,956,266   9.338    47.993     0
10   6,701,836,858   9.337    139,629,194   9.336    47.997
11  62,549,615,248   9.333  1,303,138,445   9.333    47.9992

This chart includes a column for local maxima, which my charts
usually do not.  With all the data kept in files instead of memory,
it is not a very natural calculation to determine which positions
are local maxima.  With the data in memory, for any position X
you would calculate the 12 neighbors Xq, and immediately determine
which of the 12 neighbors were one move closer to Start.  It is
easy to identify local maxima in this situation.  With the data
written to files, the neighbors Xq are sorted before determining
which are closer to Start, and there is no (easy) way to relate
a given Xq back to its original X.

However, let me describe the sorting/merging process in a little
more detail.  There is a file containing all cubes X such that
|X|=n.  The neighbors Xq are written to a file.  The file
is sorted, with duplicates deleted.  (Actually, the problem is so
large that there are *many* files containing the neighbors Xq.
Each file is sorted, and then the results are merged).  Finally, the
resulting file is matched against another file containing all
cubes Y such that |Y|=(n-1).  Any matches are deleted, and whatever
is left over becomes the file containing all cubes Z such that
|Z|=(n+1).  The difference between the number of matches deleted
and the number of cubes in the n-1 file is the number of local
maxima of length n-1.  (Remember that all the X's and Y's and Z's
and Xq's are representative elements of M-conjugacy classes.)

The last time through this process, I generated neighbors of level
10 to create level 11, sorted and deleted duplicates, and matched
against level 9 deleting matches.  Hence, the last level for which
I have local maxima information is level 9.

There are not any local maxima through level 9.  I am not really
expecting any until Pons Asinorum at level 12.  However, it would
be nice to verify that Pons Asinorum is the shortest local maximum.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From BRYAN@wvnvm.wvnet.edu  Sun Feb 19 23:21:13 1995
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA27346; Sun, 19 Feb 95 23:21:13 EST
Message-Id: <9502200421.AA27346@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 2606; Sun, 19 Feb 95 23:20:23 EST
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 5418; Sun, 19 Feb 1995 23:20:23 -0500
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Sun, 19 Feb 1995 23:20:22 EST
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Qturn Lengths of M-Symmetric Positions

1. The length of Start is of course 0 qturns.

2. The length of Pons Asinorum is of course 12 qturns.  This result
   has been known since 1980.  However, in the process of testing
   out half-depth searches, I tested Pons Asinorum and encountered
   a minor surprise.  There are five "halfway" positions which
   are unique up to M-conjugacy.  I only expected three.  They
   are:

      a. (RRLL)(FF)          expected -- continue BB etc.
      b. (RRLL)(FB)          expected -- continue FB etc.
      c. (RRLL)(FB')         expected -- continue FB' etc.
      d. (FB')(RRLL)         a surprise to me
      e. (RL')(FB')(RL')     a surprise to me

3. The length of Pons Asinorum composed with Superflip is
   20 qturns.  Half-depth searches through level 9 found nothing.
   A half-depth search at level 10 found ten "halfway" positions which
   are unique up to M-conjugacy.  I have my usual trouble of spinning
   tapes containing representative elements in order to find the
   processes, but I should have them in a couple of days or so.
   I expect we will find that many (or all) of them are really
   closely related, differing only by commuting in fairly trivial
   ways, just as do the five half-way positions for Pons Asinorum.

4. The length of Superflip is 24 qturns.  Half-depth searches
   through level 11 found nothing, so the length is greater than
   22.  Mike Reid has found a Superflip process of length 24.
   Hence, the length is 24.  It would be more satisfying if I
   could perform a half-depth search to level 12, but the
   problem is just too big.  Hence, I have no idea how
   many "halfway" positions there are which are unique up to
   M-conjugacy.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From BRYAN@wvnvm.wvnet.edu  Wed Feb 22 13:06:05 1995
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA19585; Wed, 22 Feb 95 13:06:05 EST
Message-Id: <9502221806.AA19585@life.ai.mit.edu>
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 2290; Wed, 22 Feb 95 11:09:14 EST
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 6020; Wed, 22 Feb 1995 11:09:14 -0500
X-Acknowledge-To: <BRYAN@WVNVM.WVNET.EDU>
Date:      Wed, 22 Feb 1995 11:08:56 EST
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Run Times, Storage Requirements, etc.

I have been asked to post some run times, storage requirements, etc.
related to my recent work.

The current model for the whole cube (which I treat as Q[C,E]  --
corners and edges, without storing Face centers explicitly) requires
14 bytes per position.  I know you can identify a position with the
permutation operation which yields that position when applied to Start,
but I certainly think of the data base as consisting of positions
rather than as of operations.

8 corner facelets and 12 edge facelets are stored in
5 bits each, for a total of 100 bits, or 12.5 bytes.  I waste 4 bits,
so 13 bytes are required.  I could get by with 7 corner facelets and
11 edge facelets (saving 10 bits), but it would increase the
processing time.  Most of the time (but not for every single project!)
I only store representative elements of M-conjugate classes.
My representative element function fixes one facelet,
so I could save 5 bits there (and have done so on some previous
versions of the model).  However, I wanted to be able to represent
all cubes in the same format as representative elements (remember that
representative elements of M-conjugate classes are cubes, too!), so
I go ahead and store the fixed facelet.  The 14th byte is the length
of the cube.

I am presently storing cubes of each length in a separate file.  For
short lengths, it is easy to keep the files on disk instead of tape
because they are so small.  This greatly assists the backtracking
process to convert positions to processes.  The files for qturn
lengths 0 through 8 are on disk.  Length 9 is on one tape, length 10
is on nine tapes, and length 11 is on eighty-two tapes.  Each tape
holds about 16 million positions.  All tapes are not exactly the
same length, so some tapes hold a bit more than 16 million and some
a bit less.

These are mainframe cartridge tapes.  Their capacity is not all that
great (225MB) compared to some tapes used for backup on desktop systems,
but their data transfer rate is as fast or faster than disk  --  4.5 Mbyte
per second (36 Mbit per second), vastly faster than most desktop backup
systems I know anything about.

Because the cube positions are segregated into files based on length,
it is not strictly necessary to store the length at all.  Also, the
length could be stored in the four "wasted" bits of byte 13.  Or,
the length could be stored as (length mod 3) to reduce the storage
requirements to 2 bits.  For this model, I have rejected all such
accommodations.  For example, the little project I did to compare
lengths in <U,R> to lengths in <U,R,U2,R2> was greatly assisted by
having the full length stored explicitly.  Also, it is much easier
to deal with the sort program I am using when the sort control
field (which is the cube position) is lined up on byte boundaries.
So I think the various "wasted" space in the model is a good
compromise with some practical processing requirements.

When doing normal qturn searches, generating the neighbors of each
position yields an output file which is initially (before sorting
and eliminating duplicate positions) 12 times larger than the original
file.  With the Pons Asinorum-Superflip project, each X in the data
base is pre-multiplied by PA, Superflip, or their composition rather than
post-multiplied by qturns, and the output file is exactly the same size
as the input file.  The output file has to be sorted anyway, but you know
a priori that there will be no duplicate positions.

For the Pons Asinorum-Superflip project,
it took about 90 minutes to process and sort each input tape.  For
Superflip, I had to go all the way to length 11, so it took about
125 hours to convert 82 input tapes into 82 separate files on 82
separate output tapes.  (Actually, because all tapes aren't the same
length, about half the time the output file extended a few feet of
tape onto a second tape.)  Then, the 82 separate output files had to
be merged into one large output file spanning 82 tapes.  We have
24 tape drives, but we only allow 4 to be used by one job.  Hence,
each merge can only combine 3 files into 1.  (A file can be multiple
tapes,  read one after the other.)  One bunch of merges
reduced the 82 files to 28, a second bunch of merges reduced the 28
files to 10, etc. until only 1 file was left.  Each bunch of merges had
about 82 input tapes total, and about 82 output tapes total, and
each bunch of merges took about 10 hours.  However, I had to spread the
runs over a couple of weeks to keep our operators from shooting me.
Finally, the 82 tapes for positions 11 moves from Superflip were
matched against the 82 tapes for positions 11 moves from Start, again
taking about 10 hours.  (I also checked the shorter lengths along the
way, but it didn't take anywhere near as long for the shorter lengths).

I never found any "halfway" positions for Superflip (would have required
going to length 12).  Finding the "halfway" positions for PA+Superflip
required matching the nine tapes holding positions 10 moves from Start
against the nine tapes holding positions 10 moves from PA+Superflip.
Having found them, I then did mini-searches.

First, the "halfway" positions were the root.  After 3 levels, the
results were matched against the data base for level 7 (which is a disk
file, not tape!).  The matches at that level became the root for a
new mini-search that leaped from level 7 to level 4, etc.

The backtracking search was greatly assisted by the "leaping"
procedure (first suggested to me by Dan Hoey).  The backtracking search
was also assisted by keeping each length segregated, so that the files
for lengths close to Start could be small files, and could be on disk.

The backtracking search is still very much complicated by the fact that
only representative elements are stored, so the backtracking process
rotates and reflects out from under you as you generate it.  I have a
solution for the problem.  It amounts to carrying along both
a cube and the cube's representative element during the backtracking
search, and applying qturns to the cube rather than to the representative
element.  (The representative element is still the one that has to be
matched against the data base.)  In a normal "forward" search where the
data base is being generated, the qturns are applied to the representative
elements and new representative elements are calculated immediately.
The original "unrepresentative" cubes are not used in the forward
search at all as I now do in the backward search.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From BRYAN@wvnvm.wvnet.edu  Mon Jul 10 10:46:59 1995
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA14144; Mon, 10 Jul 95 10:46:59 EDT
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 4200; Mon, 10 Jul 95 10:46:57 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 9475; Mon, 10 Jul 1995 10:46:57 -0400
Message-Id: <wvmail32.1995jul10.100359.bryan@wvnvm.wvnet.edu>
Date:      Mon, 10 Jul 1995 10:46:56 -0400 (EDT)
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <cube-lovers@ai.mit.edu>
Subject:   Re: Run Times, Storage Requirements, etc.
In-Reply-To: Message of 04/21/95 at 11:37:18 from mreid@ptc.com

On 04/21/95 at 11:37:18 mreid@ptc.com said:

>jerry writes

>> What would be really nice (and which may not be possible) is some
>> representation for the cube such that a cube Z and its neighbors
>> Zq or Zh are stored very close together.

>remember that the diameter of the group is small.  (my guess is
>21 face turns, 24 quarter turns.)  so this isn't possible without
>resorting to a liberal definition of "very close".

This is something I have been thinking about for a long time.  The
idea is that if large searches were run on either massively
parallel machines, or even on farms of workstations, it would be
really nice if most neighbors stayed on the same machine.

Some of my searches get so large that I have to decompose them in
a manner somewhat similar to the manner in which I envision decomposing
searches for parallel processing.  Let me use an example a project
I am working on as we speak.  I am trying to do a complete search
for edges only (with centers).

The data base for level 10 of the search is on four tapes (not so big,
really).  The data base is sorted.  The neighbors will be sorted
according to the same collating sequence.  In order to create level 11,
all neighbors have to be generated and sorted (deleting duplicates),
and then matched against the level 9 data base (again deleting duplicates).

I desire to partition the sorted neighbors using as boundary points for
the partition the first record on each of the four tapes for level 10.
My experience is that boundary points that partition one level of the
data base equally also partitions deeper levels of the data base
equally.  Having partitioned level 11, the sizes of the output files are
rather striking:

                  Neighbors in   Neighbors in   Neighbors in   Neighbors in
                    Tape 1         Tape 2         Tape 3         Tape 4
                   Partition      Partition      Partition      Partition


  Lvl 10 Tape 1    5.2 tapes      2.0 tapes      1.2 tapes      0.2 tapes
  Lvl 10 Tape 2    1.3 tapes      5.0 tapes      1.9 tapes      1.2 tapes
  Lvl 10 Tape 3    1.2 tapes      1.4 tapes      5.1 tapes      2.2 tapes
  Lvl 10 Tape 4    0.2 tapes      1.1 tapes      1.6 tapes      6.0 tapes

In real round numbers, the level 11 data base is going to have about
32 tapes, with about 8 tapes in each partition (the branching factor
is about 8 at this level of the search).  But as the chart above shows,
there is a strong tendency for neighbors to stay in the same partition.
(The chart does not reflect it, but to complete the processing for
level 11, the "Tape 1 partition" will all have to be merged together, as
will the "Tape 2 partition", etc.)

I would emphasize that these "partitions" I am talking about are totally
arbitrary subdivisions of the data into smaller chunks to make the
problem manageable.  But imagine if you will that instead of four tapes,
I had four machines, each with a sizable hard disk.  Each machine would
be assigned one of the four partitions.  As it generated neighbors, each
machine would either store the neighbor locally or would send the
neighbor on to one of the other three machines as required.  Obviously,
the more of the neighbors you can keep locally the better.

With various problems I have worked on, I have had various numbers of
partitions of the data  --  10, 16, 32, 128, etc.  The effect I am
describing is always there, and I am not totally sure why.  I have
some theories, but nothing definitive.  I think the effect is stronger
because I am using representative elements of conjugacy classes or
other equivalence classes than if I were storing all individual cubes.

Also, the effect I am describing can be characterized by the almost
silly statement that "one twist of the cube doesn't change the cube
very much".  But it's true.  For example, the dominant part of the sort
is the Front face, which isn't changed by twists of the Back.  Also,
twists of the Front don't change the Front very much when you
consider that representative elements are being stored.  It is only
twists of the Up, Down, Right, and Left faces which change the Front
very much.  Finally, the sort order for the Front face is the Upper
part, the Right part, the Down part, and the Left part, so that even
a twist of the Left face doesn't change the Front face very much with
respect to its sort order.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From BRYAN@wvnvm.wvnet.edu  Wed Jul 19 21:47:46 1995
Return-Path: <BRYAN@wvnvm.wvnet.edu>
Received: from WVNVM.WVNET.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA04627; Wed, 19 Jul 95 21:47:46 EDT
Received: from WVNVM.WVNET.EDU by WVNVM.WVNET.EDU (IBM VM SMTP V2R2)
   with BSMTP id 8401; Wed, 19 Jul 95 21:47:48 EDT
Received: from WVNVM.WVNET.EDU (NJE origin BRYAN@WVNVM) by WVNVM.WVNET.EDU
 (LMail V1.2a/1.8a) with BSMTP id 8646; Wed, 19 Jul 1995 21:47:48 -0400
Message-Id: <wvmail32.1995jul19.214439.bryan@wvnvm.wvnet.edu>
Date:      Wed, 19 Jul 1995 21:47:47 -0400 (EDT)
From: "Jerry Bryan" <BRYAN@wvnvm.wvnet.edu>
To: "Cube Lovers List" <Cube-Lovers@ai.mit.edu>
Subject:   Level 11, Edges-with-Face-Centers, Qturns

 Level   M-Conjugacy   Branching  Lcl     Positions   Branching  Lcl
            Classes      Factor   Max                   Factor   Max

   0               1               0              1               0
   1               1      1.000    0             12     12.000    0
   2               5      5.000    0            114      9.500    0
   3              25      5.000    0           1068      9.368    0
   4             215      8.600    0           9819      9.194    0
   5            1886      8.772    0          89392      9.104    0
   6           16902      8.962    0         807000      9.028    0
   7          150442      8.900    0        7209384      8.934    0
   8         1326326      8.816    1       63624107      8.825    2
   9        11505339      8.675    0      552158812      8.678    0
  10        96755918      8.410          4643963023      8.411
  11       750089528      7.752         36003343336      7.753

Note that there are no local maxima at level 9, although one showed
up at level 8.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                        (304) 293-5192
Associate Director, WVNET                            (304) 293-5540 fax
837 Chestnut Ridge Road                              BRYAN@WVNVM
Morgantown, WV 26505                                 BRYAN@WVNVM.WVNET.EDU

From hoey@aic.nrl.navy.mil  Wed Nov 29 12:18:52 1995
Received: from Sun0.AIC.NRL.Navy.Mil by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA23715; Wed, 29 Nov 95 12:18:52 EST
Received: from sun13.aic.nrl.navy.mil by Sun0.AIC.NRL.Navy.Mil (4.1/SMI-4.0)
	id AA26702; Wed, 29 Nov 95 12:14:41 EST
Return-Path: <hoey@aic.nrl.navy.mil>
Received: by sun13.aic.nrl.navy.mil; Wed, 29 Nov 95 12:14:40 EST
Date: Wed, 29 Nov 95 12:14:40 EST
From: hoey@aic.nrl.navy.mil
To: mschoene@math.rwth-aachen.de (Martin Schoenert),
        frb6006@cs.rit.edu (Frank R Bernhart), Cube-Lovers@life.ai.mit.edu
Newsgroups: sci.math
Subject: Generating Rubik's Cube
Message-Id: <9511291210.Hoey@AIC.NRL.Navy.Mil>
References: <DIsoBz.Eu7@rci.ripco.com> <mschoene.817657981@astoria> <1995Nov29.054118.9651@cs.rit.edu>
Distribution: 

About generating the cube's group with arbitrary elements of that
group, mschoene@Math.RWTH-Aachen.DE (Martin Schoenert) writes:

> ... Rubik's cube can be generated by 2 elements.
> Moreover almost any random pair of elements will do the trick....

Actually, I think it's more accurate to say that a random pair of
elements has nearly a 75% probability of generating the cube.  At
least, I'm pretty sure that's an upper bound, and I don't see any
reason why it shouldn't be fairly tight.  That's for the group where
the whole cube's spatial orientation is irrelevant.  I think it's more
like 56% (9/16) if you also need to generate the 24 possible
permutations of face centers.

About the minimal presentation of the cube group on the usual generators,
frb6006@cs.rit.edu (Frank R Bernhart) writes:

> The answers may be in SINGMASTER, et.al.
>    "Handbook of Cubic Math"  or BANDEMEISTER (sp?) "Beyond R. Cube"

I recall Singmaster wanted to know if anyone found a reasonably-sized
presentation; I don't know if any have been found in the intervening
fifteen years.  The best I know of is a few thousand relations, some
of them several thousand letters long.  I've been meaning to try
chopping that down a bit.

Dan                                     posted and e-mailed
Hoey@AIC.NRL.Navy.Mil

From mschoene@math.rwth-aachen.de  Mon Dec  4 09:10:17 1995
Return-Path: <mschoene@math.rwth-aachen.de>
Received: from hurin.math.rwth-aachen.de by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA23100; Mon, 4 Dec 95 09:10:17 EST
Received: from samson.math.rwth-aachen.de by hurin.math.rwth-aachen.de with smtp
	(Smail3.1.28.1 #30) id m0tMZOr-0009KuC.951204.150809; Mon, 4 Dec 95 12:49 MET
Received: from hobbes.math.rwth-aachen.de by samson.math.rwth-aachen.de with smtp
	(Smail3.1.28.1 #11) id m0tMZOr-000I7wC; Mon, 4 Dec 95 12:49 MET
Received: by hobbes.math.rwth-aachen.de (Smail3.1.28.1 #26)
	id m0tMZOq-0009ejC.951204.124936; Mon, 4 Dec 95 12:49 MET
Message-Id: <m0tMZOq-0009ejC.951204.124936@hobbes.math.rwth-aachen.de>
Date: Mon, 4 Dec 95 12:49 MET
From: Martin Schoenert <mschoene@math.rwth-aachen.de>
To: hoey@aic.nrl.navy.mil
Cc: Cube-Lovers@life.ai.mit.edu
In-Reply-To: hoey@aic.nrl.navy.mil's message of Sun, 3 Dec 95 14:46:30 EST
	<9512031946.AA24122@sun13.aic.nrl.navy.mil>
Subject: Re: Re: Generating Rubik's Cube

I have used GAP to compute the subgroup generated by 300 random pairs of
elements of G.  151 of those pairs generated the entire group, so the
probability is about 50%.

I don't think we can figure out the exact number, since we don't know the
maximal subgroups of G.  One maximal subgroup we know is the derived
subgroup (on which the upper bound of 75% is based).  Then there are the
8 stabilizers of the corners (of index 8) and the 12 stabilizers of the
edges (of index 12).  Using those it should be possible to push the upper
bound down to something about 60%.

Martin.

-- .- .-. - .. -.  .-.. --- ...- . ...  .- -. -. .. -.- .-
Martin Sch"onert,   Martin.Schoenert@Math.RWTH-Aachen.DE,   +49 241 804551
Lehrstuhl D f"ur Mathematik, Templergraben 64, RWTH, 52056 Aachen, Germany


From JBRYAN@pstcc.cc.tn.us  Tue Feb  6 13:15:48 1996
Return-Path: <JBRYAN@pstcc.cc.tn.us>
Received: from PSTCC4.PSTCC.CC.TN.US by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA06910; Tue, 6 Feb 96 13:15:48 EST
Resent-From: JBRYAN@pstcc.cc.tn.us
Resent-Message-Id: <9602061815.AA06910@life.ai.mit.edu>
Received: from pstcc.cc.tn.us by pstcc.cc.tn.us (PMDF V5.0-3 #11457)
 id <01I0W7H2EIZK8WWAHI@pstcc.cc.tn.us> for cube-lovers@ai.mit.edu; Tue,
 06 Feb 1996 13:17:49 -0400 (EDT)
Resent-Date: Tue, 06 Feb 1996 13:17:49 -0400 (EDT)
Date: Tue, 06 Feb 1996 13:17:44 -0400 (EDT)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Large Searches with Small Memory
Sender: JBRYAN@pstcc.cc.tn.us
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.91.960206130728.538983702A-100000@pstcc.cc.tn.us>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-Transfer-Encoding: 7BIT


I have access to less computing resources than I used to have. 
As a result, I have been thinking about ways to conduct large
searches with less memory.  There are no results here, just
some thoughts.

I will assume a quarter turn metric.  It would be easy to
generalize the proposals below to other metrics, but I will
not do so.

We let C[n] be the set of all positions of length n.  C[0] is
just {Start}, and C[1] is just Q, the set of twelve quarter
turns.  We let T[n] be the union of C[k] for k in 0..n.

We assume that any computerized breadth first search for God's
Algorithm would build (in turn) C[0], C[1], etc., and would
store each C[k] in memory in some reasonable indexed and
searchable data structure.  The details of the data structure
do not (I think) matter for the purposes of this note.

We assume that the primary constraint on the search is memory
size rather than time.  These days, most anybody has access to
a machine (or machines) where a problem can be allowed to run
for hundreds or thousands of hours if necessary.  A 486 or
Pentium on your desk would serve nicely, and a UNIX work
station would be even better.  I have used both a 486 (running
OS/2 for multitasking) and a UNIX work station in this manner. 
The machines could be used for other things while the cube
problems were running.

We assume that n is the largest n for which we can store C[n]. 
We assume that if we can store C[n], we can also store T[n]. 
For all practical purposes, T[n] and C[n] are about the same
size close to Start because C[n] is a little more than nine
times larger than C[n-1].

With this structure in hand, we could form all products XY for 
X and Y in T[n].  We would simply form the products; we would 
not try to store them.  But having done so, we would have created 
all positions in T[2n].  In some ways, this is not very useful.  
That is, in general we would not know the length of any 
particular XY, nor would we know the size of C[k] for k in
n+1..2n. 

But as we formed the products, we could check them against any
position of interest, or against a small set of positions of
interest.  We could then determine if any of the interesting
positions were in T[2n], and thus bound their length.  (We
assume that none of the interesting positions are in T[n]. 
Otherwise, we could determine their length directly and none
of these Draconian measures would be necessary.)  Such a 
half-depth search has been discussed quite a few times before in
Cube-Lovers.

But here follows what I think is a new idea.  What if we
formed all products XY for X in C[n] and Y in C[1].  Since
C[1] is Q, this is really just the procedure for a standard
depth first search.  But we can't store C[n+1].  Can we
determine the size of C[n+1] anyway?

Try the following.  The length of each XY is either n-1 or
n+1.  Verify which case we have by reference to C[n-1], and
throw away the products of length n-1.  But if the length of
XY is n+1, do we count it, or do we not?

The problem is that we might have XY=VW for X and V in C[n], Y
and W in C[1], X not equal V, and Y not equal W.  Which do we
count and which do we not?  Actually, there may be up to
twelve such products, so we need a way uniquely to determine
which product to count and which not to count.

Suppose we have XY in hand and wish to know whether to count
it.  Form all products (XY)Z for Z in C[1].  There are twelve
such products, and at least one of them will be in C[n].  We
assume that C[1] can be ordered (probably already is) by our
data structure.  Hence, we count XY only if Y'=Z*, where Z* is
the first Z such that XY(Z) is in C[n].  (Strictly speaking,
we would not have to form all products XY(Z).  We would stop
once we found the first Z such that (XY)Z was in C[n].  We
would then either have Y'=Z*, or we wouldn't.  But this only
reduces the number of products down from twelve to an average
of six.) 

It seems to me that this procedure would work in principle,
but I am not sure how practical it would be.  The problem is
that there would be a lot of products XY(Z) to calculate and
test.  Is there any shorter method to determine whether or not
to count XY?

I normally write my sets C[k] out to a file.  Any analysis I
wish to do is then run against the file after the fact.  With
the new procedure I am describing, any analysis of C[n+1]
would have to be done as the products were being formed.

We can use a similar procedure to determine the size of
C[n+2], C[n+3], etc. up through C[2n], but things get more
complicated and more impractical.

For C[n+2], form all XY for X in C[n] and Y in C[2].  All such
products are in C[n-2], C[n], or C[n+2].  As before, we look
up XY in C[n-2] and in C[n], and throw it away if it is
already there.  We then form all XY(Z) for Z in C[2] (there
will be 114 such products), and count the product only if
Y'=Z*, where Z* is the first Z in C[2] such that XY(Z) is in
C[n].  But this case is even more time consuming than the
C[n+1] case because we will on the average have to look at 57
products (57=114/2).

     As an aside, I have considered creating C[n+1] as the
     product of XY with X in C[n-1] and Y in C[2], rather than
     as the product of XY with X in C[n] and Y in C[1], even
     before running out of memory to store the results.  We
     still have to check for positions whose length is less
     than n+1, and we still have to check for duplicate
     positions of length n+1.  But using C[n-1] and C[2] 
     would automatically eliminate from the search duplicate
     positions such as ZRR'=Z or ZRL=ZLR.  Or better still,
     perhaps to create C[n+1] we should take X from C[n/2] and
     Y from C[(n/2)+1]?  Has anybody tried anything like that?

C[n+3] gets worse still.  If we form all XY for X in C[n] and
Y in C[3], the length of XY may be n-3, n-1, n+1, or n+3.  We
dispose of the n-3 and n-1 cases as before, but then we would
have to have a way to distinguish between the n+1 and n+3
cases.  I think the procedure becomes truly impractical at
this point.

Anyway, that's it.  Has anybody ever tried anything along the
lines I have outlined for a problem too big to store?  If so,
did it work? 

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7127
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990


From JBRYAN@pstcc.cc.tn.us  Thu Feb 15 10:41:04 1996
Return-Path: <JBRYAN@pstcc.cc.tn.us>
Received: from PSTCC4.PSTCC.CC.TN.US by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA00157; Thu, 15 Feb 96 10:41:04 EST
Resent-From: JBRYAN@pstcc.cc.tn.us
Resent-Message-Id: <9602151541.AA00157@life.ai.mit.edu>
Received: from pstcc.cc.tn.us by pstcc.cc.tn.us (PMDF V5.0-3 #11457)
 id <01I18MLFP5KI8WYZ5B@pstcc.cc.tn.us> for cube-lovers@ai.mit.edu; Thu,
 15 Feb 1996 10:39:58 -0400 (EDT)
Resent-Date: Thu, 15 Feb 1996 10:39:58 -0400 (EDT)
Date: Thu, 15 Feb 1996 10:39:54 -0400 (EDT)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Shamir on Breadth First Searches
Sender: JBRYAN@pstcc.cc.tn.us
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.91.960215102318.539108975F-100000@pstcc.cc.tn.us>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-Transfer-Encoding: 7BIT


Armed with some newfound understanding of Shamir's method,
I would like to revisit the issue of large searches in
small memory.  However, I will be proposing the
application of Shamir's method in a slightly different
form than it has been applied before.

The best discussion of Shamir's method in the archives is
probably Alan Bawden's note of 27 May 87 "Shamir's talk
really was about how to solve the cube!".  The thrust of
Shamir's talk was how to determine the minimal solution
for a given position in a reasonable time and with a
modest (relatively speaking!) amount of memory.

My take on the Shamir's method is two-fold.  First, let
T[n] be the set of positions no greater than n moves from
Start, and let x be the position in question.  Shamir's
method first involves taking the intersection of T[n] with
xT[n].  If the intersection is null, then x is greater
than 2n moves from Start.  Otherwise, the distance from
Start can be determined rather easily.  This is our old
friend which I call the half-depth search.

The efficacy of a half-depth search is dependent on n.  A
reasonable n of say 5 or 6 only permits testing x up to a
distance of about 10 or 12 moves from Start.

The second component of Shamir's method is the clever
part.  You store T[n] and create sort of a virtual T[2n]
which doesn't have to be stored.  You do the same thing
with xT[n] to create a virtual xT[2n].  Forming the
intersection of T[2n] with xT[2n] lets you test positions
up to a distance of 4n from Start while only storing T[n]
and xT[n].  So for n=5, we can test for distances up to 20
moves from Start.

My primary interest lies in creating T[n] for the largest
possible n, rather than testing for particular positions. 
Hence, I want to talk about just the portion of Shamir's
method that lets us get from a real T[n] to a virtual
T[2n].

Let me start be reviewing my understanding of key points
of Shamir's method.  Given two sets of positions S and T,
Shamir tells us how to form all the products st for s in S
and t in T with the products being created in
lexicographic order.  The storage required is order N
rather than order N^2 (provided of course that the
products are only created and are not stored).

For the algorithm to work, T itself has to be in
lexicographic order.  I don't think S has to be in
lexicographic order (see below).  But S and T may well be
the same set, and in any case there is no loss of
generality in requiring that S be in lexicographic order
as well.

Furthermore, T must be stored as a tree, and we might just
as well store S as a tree, too.

Alan gives an excellent description of the required tree
structure.  The structure itself is a very old concept and
is not unique to Shamir's method.  It could be used, for
example, to store a dictionary for a spell-checker.  Such
a tree would branch 26 ways (American alphabet) for each
of the 26 possible first letters.  The tree would branch
again in up to 26 ways for the second letter and for each
subsequent letter, etc.

For Shamir's tree, the "letters" are (usually one byte)
numbers defining the permutations, where the permutation
is simply a vector listing (in order) the values of the
permutation.

Choose a particular s[j] in S and consider all the
products (s[j])(t[k]) for t[k] in T and for k in 1..n. 
There is some ordering of the t[k] values which will put
the {s[j])(t[k]) values in proper lexicographic order. 
The t[k] values themselves are obviously not in
lexicographic order, and may indeed appear to be in a 
"random" order.  But the order is far from random; it is
quite carefully considered.  The genius of Shamir's method
is that it tells us exactly how to accomplish the proper
ordering of the t[k] values to yield lexicographic
ordering of the {s[j])(t[k]) values.

Notice that the required order of the t[k] values is
different for each s[j].  My brief description of the
magic is that (s[j])' is used as a template to tell us how
to traverse the T tree to make the t[k] values come out in
the required order to make the (s[j])(t[k]) values come
out in lexicographic order.  See Alan's note for
additional details.

(Alan doesn't mention (s[j])' explicitly, but that is what
it comes down to.  Shamir reverse engineers s[j], runs it
backwards if you will, to figure out how to make
(s[j])(t[k]) come out right.)

The rest of the algorithm is a little fuzzy to me, but
here is how I think it has to work.  Suppose S contains m
elements and T contains n elements.  What we have done so
far is to create a single sequence of products
(s[j])(t[k]) for some particular, fixed s[j].  The
sequence contains n elements (one for each t in T), and is
in lexicographic order.

We must produce m such sequences, one for each s[j]. 
Then, we must perform an m-way merge of the m sequences. 
The result of our merge is the desired sequence of
products st in lexicographic order.  It is the fact of
this merge that leads me to believe that the s values do
not have to be in lexicographic (or any other particular)
order.

If m is very large (more than a few dozen), such a merge
is not quite so easy as it sounds, and it is the details
of the merge that are most fuzzy to me in Alan's note. 
The merge would normally be accomplished by forming an
ordered queue containing the first element of each
sequence.  The first element would be popped off the
queue, then the next element from that sequence would be
calculated and put into the queue.

The tricky part is that the queue has to be kept ordered. 
It has to be ordered in the first place.  Then, when an
element is popped off and a new element added, the new
element has to be added in the correct place.  Hence, I
would probably implement the queue itself as another tree,
separate from the S and T trees.

Now, we return to our main discussion.  Let Q[k] be the
set of positions which are k quarter turns from Start.  (I
used C[k] in my last note).  Q[1] is just Q, the set of 12
quarter turns.  Store each Q[k] for k in 0..n in its own
"Shamir tree".

Create a virtual Q[n+1] as the lexicographically ordered
set of products st for s in Q[n] and t in Q[1].  Shamir
does not do everything for us.  We have to do some of the
work ourselves at this point.

The first issue is that some of the products will be
duplicate.  But the lexicographical ordering makes the
duplicates easy to detect.  So detect the duplicates and
throw them away.

The second issue is that some of the products are in 
Q[n-1] rather than in Q[n+1].  But since Q[n-1] is also in
lexicographical order, we can keep a finger or toe pointed
to Q[n-1], scanning through it in step with the products
which are generated.  Any product which is found in Q[n-1]
is not counted as being in Q[n+1].

Creating virtual Q[n+2] is like unto creating virtual
Q[n+1].  We form products from Q[n] and Q[2].  An
additional complication is that our fingers and toes must
point to and step along both Q[n] and Q[n-2] looking for
products which are shorter than n+2 quarter turns, and
which therefore are not to be counted.

Now comes the really interesting part  --- creating
virtual Q[n+3].  We form the products from Q[n] and Q[3]. 
As we create the products, we must track along through the
Shamir trees for Q[n-3], Q[n-1], and Q[n+1].  But the
Shamir tree for Q[n+1] is virtual, and isn't really there!

Here is how we do it.  We must create virtual Q[n+1] and
virtual Q[n+3] at the same time, keeping them more or less
in step, with Q[n+1] equal to or one step ahead of Q[n+3]. 
That way, we have the one real element available of the
virtual Q[n+1] that we need to test the virtual Q[n+3]
against.  As a really *old* programmer, I would describe
what we are doing with Q[n+1] and Q[n+3] as a match/merge.

Given the requirement to generate Q[n+1] as we generate
Q[n+3], there is no real reason to generate Q[n+1] by
itself.  If we have enough fingers and toes to point to
and count everything, we might just as well produce Q[n+1]
and Q[n+3] on the same pass of the data.  For that matter,
we might just as well get Q[n+1], Q[n+3], through Q[2n-1]
on the same pass.  Similarly, we might as well get Q[n+2],
Q[n+4], through Q[2n] on the same pass.

This is all very simple in principle.  But in my
experience, keeping track of all those pointers and
counters is a real pain to program.

Can we go again?  That is, can we go from Q[2n] to Q[4n]? 
I think not.  Shamir's method requires that of the S and T
trees, at least the T tree really be there.  We have to
traverse it many times and in all kinds of orders.  Being
there virtually is not enough.

Finally, what about local maxima?  We cannot detect local
maxima by forming Xq for a position X and for all q in Q,
testing to see of all Xq are closer to Start.  (The Xq are
not in lexicographical order.)  I am thinking about the
following as a way to find local maxima, but it may be
bogus.  See what you think.

Suppose a position in one of the virtual Q[n+k]'s that we
are creating is not the product of any st for s in Q[n]
and t in Q[k+2].  For example, suppose there is an element
p in Q[n+1] which is not the product of any st for s in
Q[n] and t in Q[3].  (We could find all such p easily in
our scan of the virtual Q[n+k] trees.)  Could we say that
all such p are local maxima?  I am not sure.

This method works for sure to find local maxima in Q[n-1]
when creating Q[n+1].  In fact, this method is the way I
find local maxima with my large tape searches.  That is,
the method works when you are only going one step ahead. 
If you use Q[n] and Q[1] to create Q[n+1], then all the
products are in Q[n+1] or Q[n-1], and any element of 
Q[n-1] which is not a product of Q[n] and Q[1] is a local
maximum.  But can we say that any element of Q[n+1] that
is not a product of Q[n] and Q[3] is a local maximum?  I
just don't know.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7127
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990


From awechsle@bbn.com  Thu Feb 15 11:20:11 1996
Return-Path: <awechsle@bbn.com>
Received: from chaplin.bbn.com by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA02896; Thu, 15 Feb 96 11:20:11 EST
Received: from chara.BBN.COM (CHARA.BBN.COM [128.33.161.114]) by chaplin.bbn.com (8.6.12/d4m-bbn) with ESMTP id LAA20529; Thu, 15 Feb 1996 11:20:10 -0500
From: Allan Wechsler <awechsle@bbn.com>
Received: by chara.BBN.COM (8.6.10) id LAA03366; Thu, 15 Feb 1996 11:20:09 -0500
Date: Thu, 15 Feb 1996 11:20:09 -0500
Message-Id: <199602151620.LAA03366@chara.BBN.COM>
To: tmartin@accucomm.net
Cc: Cube-Lovers@ai.mit.edu
In-Reply-To: <199602151206.MAA09438@accucomm.net> (tmartin@accucomm.net)
Subject: Re: Resolution of the cube
Reply-To: awechsle@bbn.com

   Date: Thu, 15 Feb 1996 12:06:18 GMT
   From: "Thomas H. Martin" <tmartin@accucomm.net>

   My son has dug out my cube and has a burning interest in it now.  Also, he
   has revived my interest in it.  My question is, is there somewhere I can get
   the solution for him?  

   Tommy Martin
   Dublin, GA
   tmartin@accucomm.net

Now you've pushed my button.

When the cube first came out, a bunch of us at MIT were wild to solve
it.  There were _no_ published solutions.  At least three or four of
us solved the cube by ourselves, independently.  We twisted and
turned, drew arcane diagrams to show what went where, and although it
sometimes took a couple of weeks, we each managed it.

Then the books started to come out, and as far as I can tell, no one
ever solved it independently again.

The cube is a solvable puzzle.  It is challenging, but it eventually
yields to analysis and experimentation.  Why don't you and your son
_not_ cheat, and actually solve the thing?  You'll be the first to do
it on your own for more than a decade.

What fun is it to read the answer from a book?

-A

From @uconnvm.uconn.edu:dmoews@xraysgi.ims.uconn.edu  Fri Feb 23 00:39:22 1996
Return-Path: <@uconnvm.uconn.edu:dmoews@xraysgi.ims.uconn.edu>
Received: from UConnVM.UConn.Edu by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA06036; Fri, 23 Feb 96 00:39:22 EST
Received: from venus.ims.uconn.edu by UConnVM.UConn.Edu (IBM VM SMTP V2R2)
   with TCP; Fri, 23 Feb 96 00:39:17 EST
Received: from xraysgi.ims.uconn.edu by venus.ims.uconn.edu (4.1/SMI-4.1)
	id AA04295; Thu, 22 Feb 96 16:36:36 EST
Received: by xraysgi.ims.uconn.edu (931110.SGI/911001.SGI)
	for @venus.ims.uconn.edu:cube-lovers@life.ai.mit.edu id AA10513; Fri, 23 Feb 96 00:39:02 -0500
Date: Fri, 23 Feb 96 00:39:02 -0500
From: dmoews@xraysgi.ims.uconn.edu (David Moews)
Message-Id: <9602230539.AA10513@xraysgi.ims.uconn.edu>
To: cube-lovers@life.ai.mit.edu, dmoes@xraysgi.ims.uconn.edu
Subject: Implementing Shamir's method


Since there seems to be a surge of interest in Shamir's method, I
thought I would mention a few points about it and my implementation
of it:

1.  How the group must be represented in order to use Shamir's method.

We suppose that elements of our group G are represented by ordered
tuples, which can be ordered lexicographically; we want to generate
the list ST in this lexicographical order.  Suppose that we have an element
s of S, and elements t and u in T which first differ in coordinate i.  For 
Shamir's method to work, we need to be able to order st and su given
only the length i initial segments of t and u.  This is true for
permutation groups if we represent them as acting on {1,...,n}
(st compares to su as s(t(i)) compares to s(u(i)).)
It is also true for the wreath products occurring in the cube group:
suppose G = H wr K, where H is a permutation group acting on {1,...,n},
and K is a product of cyclic groups with index set {1,...,n}.  Then
if we write an element g of G as  ( g(1), ..., g(n), g'(1), ..., g'(n) ),
the g(i)'s being in {1,...,n} and the g'(i)'s in the cyclic groups,
we can write

( h(1), ..., h(n), h'(1), ..., h'(n) ) ( k(1), ..., k(n), k'(1), ..., k'(n) )
= 
( h(k(1)), ..., h(k(n)), h'(k(1)) + k'(1), ..., h'(k(n)) + k'(n) ).

Hence if t and u's first difference is in t(i) != u(i), st and su compare
as s(t(i)) and s(u(i)), and if t and u's first difference is in t'(i) != u'(i),
st and su compare as s'(t(i)) + t'(i) and s'(u(i)) + u'(i).

Since you do a lot of composition in Shamir's method, I felt it best to
leave the permutations unpacked.  I used the wreath product representation
above, with H = S_8 x S_12 and K = (Z/3Z)^8 x (Z/2Z)^12.  Each permutation
then used 8 + 12 + 8 + 12 = 40 bytes.  All members of both S and T must be
stored in memory (see below.)  This used up a lot of memory.  (You could,
of course, also represent the cube group as a permutation group on the 48
facelets.)

2.  The data structure for T.

Jerry Bryan has alluded to this.  I used a tree each of whose leaves
contained a member of T, and each of whose internal nodes contained
an index indicating which tuple coordinate was being branched on, a
value of this coordinate for each son, and pointers to each son.
I also included a pointer to the father to make traversal easier.
The data structure for T does not change during the algorithm; you
can use it with more than one S at once.

3.  The data structure for S.

By traversing the T tree approriately, we can output the sequence
X(s) = (lexicographical sort of {st | t in T}) for each s.  For all elements s
of S, we need to store s itself, and a marker to show our position in X(s)
(for me, this was just a pointer to the T tree.)  

We also need enough structure to make merging the X(s)'s easy.  I used a 
`tree of losers' (cf. Knuth, Chapter 5.)  Since there seems to be
some uncertainty about this, I will go into detail. Let S = {s_0, ..., s_(N-1)}.
The tree will then have 2N nodes: N internal ones, 0 through N-1, and N
leaves, N through 2N-1.  Each internal node i contains a pointer to a leaf.
The leaves contain the actual s_j's, as well as the pointers to T.  Node i 
has nodes 2i and 2i+1 as sons if 0<i<N; node 0 has only node 1 for a son.  
(Since these relations are fixed, no tree traversal pointers need be stored.)  
Leaf N+j always corresponds to s_j.  The tree is initialized by conducting an 
elimination tournament: the leaves are initialized with the first elements of 
the X(s_j)'s, and sons repetitively battle for their fathers, the lesser value 
always winning, i.e., initializing the father's pointer.  After the tournament 
is finished (the overall winner ending up in both nodes 0 and 1) we 
simultaneously, for all i=1,...,N-1, reinitialize node i's pointer from its 
other son, i.e., the loser of the battle that was just played for node i.  
After we do this, each value occurs exactly once in a leaf and once in an 
internal node (everybody in a tournament, except the winner, loses exactly one 
game.)

The advantage of using losers instead of winners is that it makes updating
the tree easy.  Suppose each internal node i points to leaf N + a_i.  To
update, we output the first element of X(s_a_0) and advance X(s_a_0).  We
can then execute the following loop to update the tree:

     i := floor((N + a_0)/2)
     while i > 0 do
         if the next element of X(s_a_0) is greater than the next
            element of X(s_a_i)
             then swap a_i and a_0 (we have a new loser)
         i := floor(i/2)
     od

As you see, we perform many comparisons between the first elements of the 
X(s_i)'s.  It is convenient to store the next element of X(s_i) in
the data structure with s_i.  This uses up much more memory (a comparable 
amount with that taken by S and T themselves) but does speed up the program 
somewhat.

-- 
David Moews                             dmoews@xraysgi.ims.uconn.edu


From JBRYAN@pstcc.cc.tn.us  Thu Mar  7 13:54:55 1996
Return-Path: <JBRYAN@pstcc.cc.tn.us>
Received: from pstcc6.pstcc.cc.tn.us by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA18982; Thu, 7 Mar 96 13:54:55 EST
Received: from PSTCC6.PSTCC.CC.TN.US by PSTCC6.PSTCC.CC.TN.US
 (PMDF V5.0-4 #11457) id <01I225GG71DS000HG1@PSTCC6.PSTCC.CC.TN.US> for
 cube-lovers@ai.mit.edu; Thu, 07 Mar 1996 13:53:23 -0500 (EST)
Date: Thu, 07 Mar 1996 13:53:22 -0500 (EST)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Shamir and M-Conjugacy
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.91.960307134730.22609A-100000@PSTCC6.PSTCC.CC.TN.US>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-Transfer-Encoding: 7BIT


With most of my large breadth-first searches of God's Algorithm, I have
used M-conjugacy, where M is the set (and group) of 48 rotations and
reflections of the cube.  Using M-conjugacy reduces the size of the
problem by about 48 times, and allows me to search one or two levels
deeper than would be possible without M-conjugacy. 

I haven't even written a basic program for Shamir's method yet, but it
occurs to me that if Shamir's algoritm could be combined with M-conjugacy,
tremendous benefits would accrue. 

As before, we define Q[n] to be the set of positions which are n quarter
turns from start, and T[n] to be the union of Q[k] for k in 0..n.  I have
been thinking in terms of using Shamir's method on T[5] to get Q[6]
through Q[10].  But T[5] isn't exactly tiny as it contains 105046
elements.  Plus, we already have Q[0] through Q[11] calculated by other
means, so we wouldn't be learning anything new. 

Define Q*[n] to be the set of representative elements of M-conjugacy
classes of length n, and T*[n] to be the union of Q*[k] for k in 0..n. 
T*[5] only contains 2229 elements, which is much more manageable than
105046 elements.  T*[6] contains 20624 elements.  This is still quite
manageable, and might well permit us to calculate Q[12], which would be
something new.  T*[7] contains 192153 elements.  This is right on the bare
edge (maybe past the bare edge) of what could be handled on most machines. 
But if we could handle it, we possibly could calculate Q[13] and Q[14] --
a really major advance in our knowledge of God's algorithm. 

I haven't yet figured out entirely how to marry Shamir's method with
M-conjugacy.  But let me provide a general outline of what would have to
be done, and identify the major problem areas. 

Without repeating all the details, recall that we can in theory modify
Shamir's method to calculate T[2n] (and all the respective Q[k]'s) as the
product (T[n] x T[n]).  Very, very roughly speaking, we seek to calculate
T*[2n] as the product {T*[n] x T*[n]).  But there are many, many
complications along the way. 

Here are some preliminaries.  

First, given a representative X in Q*[n], we can calculate its entire
M-conjugacy class as {m'Xm | m in M}.  I usually just write this set as
{m'Xm}.  In group theory, an element m'Xm is often written as X^m and the
set {m'Xm} is often written as X^M.  I will adopt the group theory
notation to some extent in the remainder of this paper. 

Given Q*[n], we can create Q[n] by simply expanding the M-conjugacy
classes for each X in Q*[n].  In most of my work, the Q[n] which is thus
created is sort of virtualized -- created but not stored.  I will denote
the virtualized version of Q[n] as Q*^M[n] to distinguish it from the real
version.  Notice that we do have Q*^M[n]=Q[n], so Q*^M[n] can serve as a
surrogate for Q[n] most anytime we need it to.  Similarly, we denote the
virtualized version of T[n] as T*^M[n]. 

Second, we define * to be a function (not a permutation) which can be
composed with permutations to calculate a representative element.  We
define X* to be Repr(X), which is really Repr{X^M}.  So we can have such
things as XY* or (X*)(Y*). 

I have generally implemented X* as min{X^M}.  By this, we mean place X^M
in lexicographic order, and choose the first element.  Basing the
representative element of X^M on lexicographic order fits in well with
Shamir's method. 

We now return to the idea of calculating T*[2n] as the product (T*[n] x
T*[n]).  We first note that the product of representatives is not
necessarily a representative, so we would have to calculate (T*[n] x
T*[n])* to assure that all we have is representatives. 

We also note that if we simply calculate all the products st* for s and t
in T*[n], we will have about 48 times too few products.  On the other
hand, if we calculate st* for s and t in T*^M[n], we will have about 48
times more products than we need.  What is required is to calculate st*
for s in T*[n] and t in T*^M[n].  In other words, we expand the
equivalence classes for t but not for s. 

In a sense, this is what I have always done for my non-Shamir searches,
except that I have only advanced by one level of the search at a time. 
That is, I have calculated (Q*[n] x Q*^M[1])* to get to Q*[n+1].  But
remember that Q*^M[1] is just Q[1], which in turn is just Q, the set of
quarter turns. 

That was the sanitized version.  The dirty version is that you have to
calculate (in lexicographic order) o'(s(m'tm))o, for all o in M, for all m
in M, and for all t in T*[n].  The s is a fixed element of T*[n], and the
results for all s in T*[n] are merged in standard Shamir fashion. 
Finally, these products will include representatives and
non-representatives alike, and you have to keep only representatives and
throw away the non-representatives. 

Calculating these products is trivial.  Getting them to come out in
lexicographic order is the hard part.  As I said at the beginning, I am
not sure I know how to do it yet.  But I have some ideas about it that I
will be sharing. 

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7127
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990


From JBRYAN@pstcc.cc.tn.us  Wed May  1 18:33:37 1996
Return-Path: <JBRYAN@pstcc.cc.tn.us>
Received: from pstcc6.pstcc.cc.tn.us by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA17358; Wed, 1 May 96 18:33:37 EDT
Received: from PSTCC6.PSTCC.CC.TN.US by PSTCC6.PSTCC.CC.TN.US
 (PMDF V5.0-4 #11457) id <01I4799SSU8G001E0M@PSTCC6.PSTCC.CC.TN.US> for
 cube-lovers@ai.mit.edu; Wed, 01 May 1996 18:33:30 -0500 (EST)
Date: Wed, 01 May 1996 18:33:30 -0500 (EST)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Shamir and M-Conjugacy Don't Mix
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.91.960501182452.64822E-100000@PSTCC6.PSTCC.CC.TN.US>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-Transfer-Encoding: 7BIT


I have reluctantly concluded that encoding the nodes of a breadth first
search tree as resentative elements of M-conjugacy classes cannot be
combined with Shamir's method.  The short version of the reason is that
Shamir works only for post-multiplying, and we must both pre-multiply and
post-multiply in order to calculate M-conjugates. 

It is possible, I think, to use a number of what might be called "clever
hacks" involving M-conjugacy to reduce rather considerably the memory
requirements of a program implementing Shamir's method, but the basic
method cannot store just the representative elements.  I will describe the
clever hacks if and when I get a working program.  How "clever" the clever
hacks are may lie in the eye of the beholder.  In all cases, they exchange
reduced storage requirements for increased running time.  It is always a
question as to whether such trade-offs are advantageous or not. 

The longer explanation follows.  I will be starting with some real basics. 

Almost any reasonable introductory or advanced math book will talk about
functions.  There are two basic views of what a function is.  In one view,
a function is a non-empty set X, a non-empty set Y, and some general rule
or correspondence such that for every x in X, there is exactly one y in Y. 
In the other view, you start out with the set of all ordered pairs (x,y)
with x in X and y in Y.  This set is usually called X x Y (X cross Y).  A
function is then a non-empty subset of X x Y such that every x appears
exactly one time as the left hand element of the ordered pair, so that
again for every x in X there is exactly one y in Y. 

The second definition is probably more accurate, but it loses (on purpose,
perhaps) the intuitive feel that there is some sort of "general" rule
relating X and Y.  Indeed, for a finite X and Y, there may be no shorter
way to specify a particular function than simply to list the set of
ordered pairs of which it is comprised. 

A function where X and Y are the same set is said to be a function "on X". 
A function may be one-to-one or onto or both.  There are many (equivalent)
definitions, but my favorites are that a function is onto if there is at
least one x for every y, and a function is one-to-one if there is at most
one x for every y.  Hence, a function is both one-to-one and onto if there
is exactly one x for every y.  This condition is necessary if we wish to
be able to run the function backwards, that is, if we wish to have an
inverse function.  Finally, a function that is on a set and which is
one-to-one and onto is a permutation.  We model the Rubik's cube as a set
of permutations. 

Suppose F and G are functions.  In algebra and calculus, we define the
composition of two functions something like the following: FoG(x)=F(G(x)). 
Proper treatment of this definition would require some care in handling
the domain and range of the respective functions.  But we will dispose of
this issue by simply stipulating that F and G are permutations on the same
set. 

The algebra/calculus notation for function composition yields a
right-to-left evaluation of the functions.  This is especially visible if
we compose more than two functions, e.g., FoGoH(x)=F(G(H(x))).  In group
theory, function composition is more typically written left-to-right such
as HGF for the example at hand, with debates about where the argument
goes.  I prefer in front -- (x)HGF.  In Cube Theory, we almost *always*
write operators left-to-write, following group theory rather than
algebra/calculus. 

This whole left-to-right vs. right-to-left issue is critical for for
proper implementation of Shamir.  It is especially critical to get it
right because essentially all programming languages follow the
algebra/calculus model, whereas Cube Theory follows group theory.  Hence,
everything is always backwards to some extent in a program. 

I'm an *old* programmer, so my first higher level programming language
(after assembler) was FORTRAN.  FORTRAN lets you have statements such as
Y=X(I) or Y=SQRT(X).  FORTRAN has rather obtuse semantics and is hard to
compile.  I can remember at the time I learned FORTRAN being puzzled by
how the compiler could figure out whether parentheses meant function
arguments or whether parentheses meant subscripts.  More "modern"
languages (say, those less than 20 years old) tend to use square brackets
for subscripts, making the compiler's job a bit easier. 

But the vagaries of FORTRAN serve us well at this point.  Suppose we want
to define a permutation (which is after all, just a function) on 1..3.  We
define F as what old FORTRAN programmers called an array with three
elements (more often called a vector these days).  Then, we can assign
values to the array elements, such as F(1)=2, F(2)=3, and F(3)=1. 
Finally, we can write statements such as Y=F(X), which look and act like
functions, although FORTRAN thinks of them as arrays.  (Well, F, X, and Y
would have to be defined as INTEGERS, which is not very FORTRANish, but so
be it). 

What about function composition, say G(F(X))?  It works, but be careful
what you mean.  A very short snippit of code might look something like the
following: 
  
         X=1
         Y=F(X)
         Z=G(F(X))
         PRINT Y, Z

Function composition works as advertized even though these things are
really arrays.  But the composition is calculated only for one particular
value of X, namely X=1.  If we want to calculate the full=blown
composition H=GoF (group theory, H=FG), the code snippit would be

       H(1)=G(F(1))
       H(2)=G(F(2))
       H(3)=G(F(3))

As you can see, this programming way of implementing a permutation as an
array is really the second way in which math books define a function,
namely as a set of ordered pairs.  For example, the function F from above
is simply F={ (1,2), (2,3), 3,1) }.  But the X values were never stored
explicitly.  Rather, they were the array indices.  We would say that the F
array stores the Y values as a vector.  In this case, we would say that
F=[2,3,1]. 

Notice that it is somewhat arbitrary whether X is represented by the
indices and Y is represented by the vector, or vice versa.  The way I have
shown it seems more natural, but the vice versa is certainly tenable. 
Notice also that if we think of the vice versa where X is represented by
the vector and Y is represented by the indices, then we have the inverse
function F'.  Hence, the same vector can represent both F and F'. 

As a practical matter, I really prefer to have indices represent X and to
store the inverse as a separate vector.  Let me switch to a more modern
look and feel, using square brackets.  The code to calculate an inverse
would then look something like. 

     F_inverse[F[1]] := 1;
     F_inverse[F[2]] := 2;
     F_inverse{F[3]] := 3;

You would really do this with a loop, so it would be something like
     
     For i := 1 to 3
        F_inverse[F[i]] := i;

If you translate this loop back into group theory, it more or less states
the identity FF'=I (the looping just makes sure that we touch all our X
values -- the index i is our X value, and the order of F and F' is
backwards between our program and group theory). 

The key component of Shamir's method involves multiplying a permutation t
by each permutation s in a set S, where the set S is in lexicographic
order.  I want to show what happens with both pre-multiplying and
post-multiplying.  In order to deal with representative elements of
M-conjugacy classes, we need both to pre-multiply by m' and to
post-multiply by m, so the issue of pre-multiplying vs. post-multiplying
is critical.  I will use permutations on 1..4 in vector notation for my
examples. 

    t            S                    tS

 [3,1,4,2]    [1,2,3,4]      =     [3,1,4,2]
 [3,1,4,2]    [1,2,4,3]      =     [4,1,3,2]
 [3,1,4,2]    [1,3,4,2]      =     [4,1,2,3]
 [3,1,4,2]    [2,1,3,4]      =     [3,2,4,1]
 [3,1,4,2]    [3,1,2,4]      =     [2,3,4,1]
 [3,1,4,2]    [4,3 2,1]      =     [2,4,1,3]




    S            t                    St

 [1,2,3,4]    [3,1,4,2]      =     [3,1,4,2]
 [1,2,4,3]    [3,1,4,2]      =     [3,1,2,4]
 [1,3,4,2]    [3,1,4,2]      =     [3,4,2,1]
 [2,1,3,4]    [3,1,4,2]      =     [1,3,4,2]
 [3,1,2,4]    [3,1,4,2]      =     [4,3,1,2]
 [4,3,2,1]    [3,1,4,2]      =     [2,4,1,3]
         

Let's take the case of St first.  This is classic Shamir.  S is in
lexicographic order.  Going from S to St, every 1 has been replaced by a
3, every 2 has been replaced by a 1, every 3 has been replaced by a 4, and
every 4 has been replaced by a 2. 

We can get St into lexicographic order by sorting S in the order 2 first,
4 second, 1 third, and 3 fourth.  The vector [2,4,1,3] which controls this
alternative sorting order is simply t'.  Hence, we don't really have to
sort St if S is made into a tree.  Rather, we traverse the S tree using t'
as a template to define an alternative order of traversal, and St
automagically pops out in lexicographic order. 

(By the way, there is a minor error in one of my previous posts.  Allen
Bawden used right-to-left notation in his original Shamir article.  I
copied what he wrote thinking he was using left-to-right notation.  To
properly "copy" what he wrote and also put it in left-to-write notation, I
needed to reverse everything, but I failed to do so.  Hopefully,
everything will be consistent and correct in this article.)

The tS case is much trickier.  Think of S as a matrix.  To get to tS, what
you do is permute the columns.  With the particular t we are using, column
3 becomes column 1, column 1 becomes column 2, column 4 becomes column 3,
and column 2 becomes column 4. 

I really can't think of any Shamir-like tree traversal that would put tS
into lexicographic order.  To see the nature of the problem very clearly,
look at the original S and think of sorting the rows using column 3 as the
major sort.  We can't really move the rows around of course, because we
only have one S and we have to sort it differently for each t.  Just look
down column 3 and think about sorting without actually moving anything. 
Remember that in case of ties, you would then have to look at column 1,
then column 4, etc.  It's a mess, and I don't think you can do it without
adding a data structure much larger than what we already have.  And the
original point of combining Shamir with M-conjugacy was to save memory. 

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7127
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990


From cube-lovers-errors@curry.epilogue.com  Mon May 27 19:46:08 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id TAA28038 for <cube-lovers-outbound@curry.epilogue.com>; Mon, 27 May 1996 19:46:07 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Date: Thu, 23 May 1996 12:53:27 -0500 (EST)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Compact Cube Representation for Shamir and Otherwise
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.91.960523123122.94611A-100000@PSTCC6.PSTCC.CC.TN.US>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-Transfer-Encoding: 7BIT


I said I wasn't going to write again about Shamir's method until
I had a working program.  Well, I don't have a working program
yet but this is only indirectly about Shamir.  Rather, it is
about how we might represent the cube compactly in a way that is
easy to work with.  We would like a compact representation that
is usable by Shamir's method.  But more importantly, we would
like a compact representation that is easily usable for forming
compositions in general.  The compact representation I will
describe is useful in a number of contexts, not just Shamir's
method.

My standard model is an S24 x S24 model, modeling the corner and
edge facelets separately and not modeling the face centers.  At
one byte per facelet, this representation requires 48 bytes per
position without packing.

David Moews has described a wreath product representation (e.g.,
23 Feb 1996) which requires 40 bytes without packing.  There are
8 bytes to describe the position of each corner cubie, and 8 more
bytes to describe the twist of each corner cubie.  Similarly,
there are 12 bytes to describe the position of each edge cubie,
and 12 more bytes to describe the flip of each edge cubie.  This
representation has the virtue of being 8 bytes smaller than the
S24 X S24 representation, while still being easy to work with and
manipulate.

For my very large searches, I always used a supplement
representation for the external files.  That is, I only stored
one facelet from each of the 8 corner cubies and one facelet from
each of the 12 corner cubies for a total of 20 bytes unpacked. 
(I also packed the 20 bytes into 13 bytes to use less tape, but
that is not important for this particular story.)

However, I found the supplement representation awkward to
manipulate, so I always expanded the supplement representation to
a full S24 x S24 representation inside the program.  None of my
programs were more than a few K (not a few Meg, just a few K
because the storage was external), so the extra few bytes were a
non-issue.  But now that I want to implement Shamir, my programs
will be very large.  Therefore, I wanted to figure out how to
manipulate the supplement representation directly.  The
representation itself is not new, but the technique to manipulate
it is.  Here is what I have come up with.  I think it is
applicable to Shamir programs and non-Shamir programs alike.

I will use the corners as an example.  Similar comments would
apply to the edges.  My standard supplement for the corners is
the Front facelets and the Back facelets.  The way I number the
facelets, these are facelets 1 through 4 for the Front and 21
through 24 for the Back.  In the vector notation we have been
talking about in this thread, the supplement of the identity is
[1,2,3,4,21,22,23,24].  1 is mapped to 1, 2 is mapped to 2, 3 is
mapped to 3, and 4 is mapped to 4.  However, 5 is not mapped to
21.  Rather, 21 is mapped to 21, 22 is mapped to 22, etc..  You
have to think of the last 4 indexes as being offset by 16 because
16 of the facelets are left out.  From this vector, we can
reconstruct the fact that 5 is mapped to 5, 6 is mapped to 6,
etc. based on which facelets are part of which cubies.

Composition of these supplement vectors can be hard or easy
depending on what we are trying to do.  Suppose X is a
permutation on the corners represented by an 8 byte supplement
vector and q is a quarter-turn on the corners represented by a 24
byte permutation vector.  Then, the calculation of Xq more or
less "just works", and the composition is an 8 byte supplement
vector.  For some kinds of things you have to worry a little bit
about the offset of the last 4 indexes, but the computer coding
is basically very straightforward.  The code even runs faster
than the code for composing two 24 byte permutation vectors.

But suppose for some reason we need to form qX instead of Xq. 
The q vector will map into values that simply aren't there in the
X vector.  The programming symptom will be an out-of-bounds
subscript.

It doesn't help to use two supplement vectors.  If X and Y are
both supplement vectors, then neither the product XY nor the
product YX can be formed.  The same problem occurs anytime a
supplement vector is pre-multiplied, no matter whether it is 
pre-multiplied by another supplement vector or whether it is 
pre-multiplied by a full-length permutation vector.

With some searches you can probably get by with only post-multiplying 
supplement vectors by full-length permutation
vectors.  I think you could form a breadth first search tree that
way by always post-multiplying by full-length vectors q in Q. 
But I always want to form M-conjugates m'Xm, so I have to be able
to pre-multiply.  Here is how to do it with supplement vectors. 

As I said, my old programs expand an 8 byte supplement vector for
the corners into a 24 byte permutation vectors on the corners
when a position is read from a file into memory.  Two special 24
byte vectors are used in the process.  One of the 24 byte vectors
defines which facelet is to the right of each other facelet on
the corner cubies, and the other of the 24 byte vectors defines
which facelet is to the left of each other facelet on the corner
cubies.  So the supplement is expanded by mapping each of the
8 bytes in the supplement into itself, and in addition by mapping
each of the 8 bytes into its respective right and left.

These "right of" and "left of" vectors can be identified with the
permutations which twist each corner cubie right and left,
respectively.  These permutations are not in the Start orbit. 
But we can nonetheless observe that both of them commute with
every other permutation.

I am focusing this example on the corners, but my old programs
also have to expand a 12 byte supplement vector for the edges
into a 24 byte permutation vector.  The vector which accomplishes
this mapping defines for each edge facelet the other facelet
which is on the same edge cubie.  This permutation can be
identified with Superflip, and Superflip also commutes with every
other permutation.

The center of G consists of the identity plus Superflip.  These
permutations fix the corners and either fix or flip the edges. 
But the center of the constructable group consists of fixing or
flipping the edges composed with fixing or twisting right or
twisting left the corners.  So there are six positions in the
center of the constructable group, and it is precisely these six
permutations which are required to make composition of supplement
vectors work.

I normally write an M-conjugate in E-mail just as m'Xm.  But for
this example, let me write it as (i)m'Xm, where i is the argument
of the permutation and where i runs from 1 to 24 for the corners. 
The trick to make composition of supplements work is going to be
to write the permutation as something like (i)m'k'Xkm, where k is
not really a permutation.  Rather, it is some magic to be defined
below.

The trick is not just for M-conjugation.  It is for pre-multiplication 
in general.  The Xm part of m'Xm is not a problem;
it is the m'X part which is a problem.  Similarly, to multiply
supplement X (or full-length vector X) by supplement Y, the k
trick would be Xk'Yk, which we could group as X(k'Yk) for
emphasis.  As with M-conjugation, I will make the argument
explicit and write (i)Xk'Yk.

But just what is this k?  For the corners, we define k[1] as the
identity, k[2] as twist all corners right, and k[3] as twist all
corners left.  We also define a 24 byte vector j which defines
which corner facelets are in the supplement (a value of 1), right
of the supplement (a value of 2), or left of the supplement (a
value of 3).  j is a function, but is not a permutation.  With my
particular numbering scheme and choice of supplement, j looks
something like [1,1,1,1,2,3,2,3,......3,2,3,2,1,1,1,1].  That is,
only the first four and last four facelets are in the supplement. 
The j vector is used to index k.  For the edges we would define
k[1] as the identity and k[2] as Superflip.

An M-conjugate would then be calculated as 

    (i)m' k[j[t]]' X k[j[t]] m

for i in 1..24 and where t=(i)m'.  Effectively, k'
maps (i)m' into the supplement so that X operates only on the
supplement, and k undoes (untwists and/or unflips) whatever k'
does.  However, the k-conjugation must be applied on a facelet by
facelet basis.  k[1] might be used for one facelet, k[2] for
another facelet, and k[3] for still another.  Nonetheless, since
each of the k's is in the center of the constructable group, we
have X=k'Xk for all X, irrespective of which k is used for a
particular facelet.

It is not strictly necessary, but this procedure would be
slightly simpler if the facelets were renumbered.  That is,
renumber the supplement 1 to 8 for the corners and 1 to 12 for
the edges.

It is easy to see how to construct the tree required by Shamir's 
method using this supplement representation.  The supplement 
representation does not reduce the number of potential branches
out of each node.  But it does reduce the number of levels of nodes.
I plan to have the branching for the first 8 levels of my tree be
controlled by the supplement for the corners, and the branching
for the next 12 levels of my tree be controlled by the supplement
for the edges.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7127
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990



From cube-lovers-errors@curry.epilogue.com  Sun Jun  2 04:12:01 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id EAA14161 for <cube-lovers-outbound@curry.epilogue.com>; Sun, 2 Jun 1996 04:12:01 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Date: Sun, 2 Jun 96 00:17:03 EDT
From: hoey@aic.nrl.navy.mil
Message-Id: <9606020417.AA04623@sun13.aic.nrl.navy.mil>
To: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Cc: Cube-Lovers <cube-lovers@ai.mit.edu>
Subject: Re: Compact Cube Representation for Shamir and Otherwise

I'm not sure this is so interesting to all of cube-lovers; e-mail me
if you have opinions pro or con.

Jerry writes of the standard S24 x S24 model, which uses 48 bytes per
position without packing.  He also has a "supplement" representation
that uses one facelet from each edge and corner, for 20 bytes.  He
packs them into 13 bytes on tape.

The way I did it the last time I worked on brute force was to
pack eight twelve-bit fields:

     The orientations in two twelve-bit fields (2^11 and 3^7),
     The edge permutation in four twelve-bit fields,
        each of three base-12 digits (12^3), and
     The corner permutation in two twelve-bit fields, each of
        four base-8 digits (8^4).

Unpacking the fields can be done with native arithmetic or table
lookup.  In the latter case, it is better to use 12*11*10 instead of
12^3 and 8*7*6*5 instead of 8^3.

Also, postmultiplying by a fixed permutation can be done with table
lookup without unpacking.  I used this feature for twelve permutations
of particular interest.

I am somewhat rusty on the implications of using this representation
in conjunction with Shamir's algorithm.  I think it provides an
ordering of the permutations that enables at least an approximation to
the random access you need, then you unpack it and do a better job.

Dan Hoey
Hoey@AIC.NRL.Navy.Mil


From cube-lovers-errors@curry.epilogue.com  Wed Jun  5 19:50:32 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id TAA07826 for <cube-lovers-outbound@curry.epilogue.com>; Wed, 5 Jun 1996 19:50:31 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Message-Id: <v02130508addbb30e7cf0@[205.230.130.72]>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Date: Wed, 5 Jun 1996 18:02:49 -0500
To: CUBE-LOVERS@ai.mit.edu
From: Kristin Looney <kristin@tsi-telsys.com>
Subject: fastest hands in the midwest...

> By the way, I can do the cube in 1 minute 26 seconds.
> How does that compare with everyone else!

37.72 won me the midwest championship, my best official time was
35.30 seconds which placed me 5th in the country. I think it was 1981.
Now?  I don't get timed very often, but it's still usually under a minute.

I guess it is like riding a bicycle.

Anyone else on this list from those contest days?  Minh Thai - are you
out there?  How about Jeff Verasono? or David P. Conrady?  I've often
wondered what that crazy guy with the bright maroon hair ended up
doing with his life...

Kristin (used to be Wunderlich) Looney
kristin@tsi-telsys.com




From cube-lovers-errors@curry.epilogue.com  Fri Jun  7 14:55:40 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id OAA12843 for <cube-lovers-outbound@curry.epilogue.com>; Fri, 7 Jun 1996 14:55:40 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Date: Thu, 6 Jun 1996 09:04:04 -0400
From: Rob Hochberg <hochberg@dimacs.rutgers.edu>
Message-Id: <199606061304.JAA20500@dimacs.rutgers.edu>
To: CUBE-LOVERS@ai.mit.edu
Subject: Speed cubing


I've heard about some pretty fast people who've claimed to 
have averages in the low 20's, but I haven't seen them perform.

My buddy from high school, Scott Evans, now living in Austin,
averages about 25 seconds these days.  He's the fastest active
cubist I've seen in the last 10 years.  I'm at about 28 seconds.

Anyone else?

Rob hochberg@dimacs.rutgers.edu



From cube-lovers-errors@curry.epilogue.com  Fri Jun  7 14:55:11 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id OAA12839 for <cube-lovers-outbound@curry.epilogue.com>; Fri, 7 Jun 1996 14:55:10 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Message-Id: <v01530502addc0f86e121@[205.214.160.67]>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Date: Wed, 5 Jun 1996 21:43:50 -0700
To: CUBE-LOVERS@ai.mit.edu
From: Lars Petrus <lars@netgate.net>
Subject: Re: fastest hands in the midwest...

>> By the way, I can do the cube in 1 minute 26 seconds.
>> How does that compare with everyone else!

I've teached a lot of people the cube, and after 6 weeks, that is a
really good time. I think it's much better than I did after that time.

To get *really* good times, you need a really good method, averaging
50-60 moves.

>37.72 won me the midwest championship, my best official time was
>35.30 seconds which placed me 5th in the country. I think it was 1981.
>Now?  I don't get timed very often, but it's still usually under a minute.
>
>I guess it is like riding a bicycle.
>
>Anyone else on this list from those contest days?  Minh Thai - are you
>out there?  How about Jeff Verasono? or David P. Conrady?  I've often
>wondered what that crazy guy with the bright maroon hair ended up
>doing with his life...
>
>Kristin (used to be Wunderlich) Looney
>kristin@tsi-telsys.com

I won the swedish championship with 40.48 (*very* hard cubes), and ended
4th in the world championships with 24.57. My personal best is 15.92, and
best average of 10 consecutive solutions about 23.50. Nowadays I'm 2-4
seconds slower, but (fortunately!) I don't do it nearly as much.

Yes, its a lot like riding a bike. Sometimes I haven't done it for years,
get a new cube, and it's just like before. Weird...

  -  -  -  -
For every economist, there exists an equal and opposite economist.

Lars Petrus, Sunnyvale, California  -  lars@netgate.net




From cube-lovers-errors@curry.epilogue.com  Fri Jun  7 14:57:37 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id OAA12857 for <cube-lovers-outbound@curry.epilogue.com>; Fri, 7 Jun 1996 14:57:34 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
From: Mark Longridge <cubeman@dis.on.ca>
X-Mailer: SCO OpenServer Mail Release 5.0
To: cube-lovers@ai.mit.edu
Subject: Cube Contests
Date: Thu, 6 Jun 96 13:14:17 EDT
Message-Id:  <9606061314.aa26502@admin.dis.on.ca>

Well, I never did manage to contact Minh Thai and Jeff Varasano.

 

I was the sole prize-winning Canadian in the US contests (the 2nd one).

Unfortunately, that was not really allowed by the rules so the feat

was never recorded in the Ideal newsletters, though I still have my

medal from Sept. 28, 1981 from Buffalo New York.

 

My time was around 38 seconds... although I did improve after that a bit.

 

There are other people from the cube contests that are on the internet:

 

Myself, Chris Pelley, Robert Jen....

 

I was never sure if Mike Reid of Cube-Lovers was the same Mike Reid in the

cube contests...

 

I was in the Canadian contests too, although no prizes there. I did get

a yellow certificate for making to the final round (under a minute).

I went to London and Toronto Ontario.

 

Erno Rubik was at the Canadian Championships at the Ontario Science Centre.

Ron Lancaster was also a judge, and Stewart Sims from Ideal Toy was there.



From cube-lovers-errors@curry.epilogue.com  Sat Jun  8 14:31:38 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id OAA16775 for <cube-lovers-outbound@curry.epilogue.com>; Sat, 8 Jun 1996 14:31:37 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
From: ba05133@binghamton.edu
X-Authentication-Warning: bingsun2.cc.binghamton.edu: ba05133 owned process doing -bs
Date: Fri, 7 Jun 1996 15:27:55 -0400 (EDT)
X-Sender: ba05133@bingsun2
To: Rob Hochberg <hochberg@dimacs.rutgers.edu>
Cc: CUBE-LOVERS@ai.mit.edu
Subject: Re: Speed cubing
In-Reply-To: <199606061304.JAA20500@dimacs.rutgers.edu>
Message-Id: <Pine.SOL.L3.93.960607151737.27398A-100000@bingsun2>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII


My name is Jiri Fridrich and I am the champon of Czechoslovakia from 1982.
I won the championship with time 23.55. When I was at my best, I was able
to solve the cube in 17 seconds on average (average from 10 consecutive
runs). Even today, after all those years, I can solve the cube in 20
seconds on average. I am using about 150 different algorithms and need 60
moves on average. 

Just for the record: The 1983 champion of Czechoslovakia, Robert Pergl,
won with 17.04. There must be *many* guys out there who can solve the cube
consistently below 20 sec :-) 

Jiri

On Thu, 6 Jun 1996, Rob Hochberg wrote:

> 
> I've heard about some pretty fast people who've claimed to 
> have averages in the low 20's, but I haven't seen them perform.
> 
> My buddy from high school, Scott Evans, now living in Austin,
> averages about 25 seconds these days.  He's the fastest active
> cubist I've seen in the last 10 years.  I'm at about 28 seconds.
> 
> Anyone else?
> 
> Rob hochberg@dimacs.rutgers.edu
> 
> 
> 



From cube-lovers-errors@curry.epilogue.com  Mon Jun 10 14:52:01 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id OAA22153 for <cube-lovers-outbound@curry.epilogue.com>; Mon, 10 Jun 1996 14:51:59 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
From: ba05133@binghamton.edu
X-Authentication-Warning: bingsun3.cc.binghamton.edu: ba05133 owned process doing -bs
Date: Mon, 10 Jun 1996 10:21:57 -0400 (EDT)
X-Sender: ba05133@bingsun3
To: Kristin Looney <kristin@tsi-telsys.com>
Cc: Norman Richards <orb@cs.utexas.edu>, CUBE-LOVERS@ai.mit.edu
Subject: Re: Methods (Re: Speed cubing)
In-Reply-To: <v02130500ade12c71b495@[205.230.130.72]>
Message-Id: <Pine.SOL.L3.93.960610100755.6020C-100000@bingsun3>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII


I am including my method for solving the cube. It enables me to solve the
cube in 20 seconds on average (since I am not as fast as I used to be 14
years ago :-( ).

1. Do the four edges (white first) (2 sec.)
2. Put the white corner including the corresponding edge from the second
slice. When you put all four white corners, two slices on the cube will be
done. In this stage, almost no algorithms are necessary. Most positions
can be solved with intuition. (4 x 2 sec = 8 sec.)
3. Turn all 8 small cubes from the last slice so that the last face has
the same color. There are only 40 different positions (not counting
symmetrical positions). On average, 10 moves are necessary to do this
phase.(3 sec.).
4. Move the cubes in the last slice so that the cube is solved. There are
only 13 different positions. On average, 10-15 moves are necessary. (4
sec.)

For the whole system, 40+13=53 algorithms are necessary. One also needs
about 8 short algorithms for the second phase. Altogether, 61 algorithms
will enable you to solve the cube in 17 seconds on average, if you can
turn 4 turns per second, and if you can minimize time gaps between
algorithms. 

The handling of the last (3-rd) slice is probably the most efficient
approach ane can come up with. One only needs to carry out two
algorithms to do the 3-rd slice. That is very effective. Breaking the last
slice into four stages (turn edges, turn corners, move edges, move
corners) is less demanding on the algorithmic part, but needs much more
moves and more idle time between algorithms. 

Jiri Fridrich



From cube-lovers-errors@curry.epilogue.com  Fri Jun 14 13:58:44 1996
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id NAA08278 for <cube-lovers-outbound@curry.epilogue.com>; Fri, 14 Jun 1996 13:58:43 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Date: Fri, 14 Jun 1996 16:35:18 BST
From: David Singmaster Computing & Maths South Bank Univ <david.singmaster@sbu.ac.uk>
To: cube-lovers@ai.mit.edu
Message-Id: <009A3D97.EFAEB000.1938@vax.sbu.ac.uk>
Subject: Storage of cube positions

	Responding to Rubin Shai has made me think of an idea which may have
been discussed already.
	I was wondering if one could reduce the storage required to represent
a position or pattern.  In my notation, one basically records the movement
of each facelet.  However, if  UR -> RB  and we know that the UR piece is moving
to the RB place, then we only need to record the  U -> R  part of the motion.
In order to know which piece is moving, number all the 54 facelets.  Suppose
the facelets of UR are 1,2 in order, and the facelets of RB are  11,12 in order.
Then recording that  1 -> 11  completely describes the movement  UR -> RB.
	So we only need to record the movement of one of the facelets of
each piece - the others have to follow.  Hence we can describe the position
of the cube by a vector of 20 numbers in the range 1 .. 54.
	Of course, one has to pay for this - the composition of movements will
be more complex.  But if storage is your problem rather than time, it may be
worth it.
DAVID SINGMASTER,  Professor of Mathematics and Metagrobologist
School of Computing, Information Systems and Mathematics
Southbank University, London, SE1 0AA, UK.
Tel: 0171-815 7411;  fax: 0171-815 7499; 
email:  zingmast  or  David.Singmaster  @vax.sbu.ac.uk


From cube-lovers-errors@curry.epilogue.com  Sun Mar  2 02:53:57 1997
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id CAA04211; Sun, 2 Mar 1997 02:53:56 -0500
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Date: Sun, 02 Mar 1997 00:50:27 -0500 (EST)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: An Enhancelment for Shamir with M-conjugacy
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-id: <Pine.PMDF.3.91.970302002224.402950A-100000@PSTCC6.PSTCC.CC.TN.US>
MIME-version: 1.0
Content-type: TEXT/PLAIN; charset=US-ASCII
Content-transfer-encoding: 7BIT

I now have a functioning Shamir program.  I do not consider it quite up to
production quality just yet.  I am still working on a number of
improvements.  Also, all the results that are easily accessible to the
program have already been calculated by other means, so I have no new
search results to report at this time.  I do expect some new results from
time to time, but the runs will probably take weeks or months.  However,
in the process of developing the program, I came up with an enhancement
which I wished to report. 

Recall that the heart of the Shamir method is a mechanism which will for
all s in S and all t in T produce all products st in lexicographic order. 
This basic mechanism can be applied in a number of ways.  For example, it
can be applied to the problem of determining a minimal solution for a
particular position.  It can also be applied to the problem of conducting
a breadth first exhaustive search.  The former is the basic method
developed by Shamir and first reported to this group by Alan Bawden.  The
latter is the problem which I am currently addressing. 

As already reported in several previous messages, my implementation of
Shamir seeks to incorporate M-conjugacy to the maximum extent possible to
reduce memory requirements.  As such, it does not store the sets S and T. 
Rather, it stores the sets A and B, where A and B contain only
representative elements of the M-conjugacy classes which are contained in
S and T, respectively. 

A and B are about 48 times smaller than S and T.  However, we cannot
obtain any meaningful results using only A and B.  Rather, A and B have to
be expanded by M-conjugation to produce S and T.  That is, we represent S
as A^M and T as B^M.  There are no fewer positions, but only three bytes
or so are required to represent each position in A^M and B^M.  So we
produce products st in lexicographic order for s in A^M and t in B^M. 
This model is slow, but it is small. 

At the back end of the algorithm, we determine which st values are
representatives and which are not.  Those which are, we keep.  Those which
are not, we simply discard.  In my earlier messages about combining Shamir
with M-conjugacy, I lamented the difficulty of producing representatives
in lexicographic order.  Simply discarding non-representatives is a crude
but effective way to accomplish the goal.  It is not quite as good as not
producing the non-representatives in the first place, but it is a good bit
better than nothing. 

As an example of the "better than nothing" idea, the Shamir method does
not directly produce ST in lexicographic order.  Rather, it produces St in
lexicographic order for each t in T.  The results then have to be merged. 
The non-representatives are discarded prior to the merge, so that 48 times
fewer positions have to be merged.  Also, the products st are tested byte
by byte as they are produced to determine if they are representatives.  It
is usually possible to determine that a position is not a representative
after no more than two or three bytes, so there are some efficiencies in
the process of discarding non-representatives.  That is, the only products
st which are calculated in their entirety are those for representatives. 

The enhancement I want to report is that it is possible to discard entire
branches of the Shamir tree without examining any of the nodes in the
branch except the root of the branch.  That is, it is possible to show
that entire branches of the tree contain only non-representatives.  Such
branches can be pruned from the search without examining any of the nodes
individually.  Approximately 47/48 of the search tree can be eliminated
from the search tree in this manner.  Unfortunately, the speed up is not
times forty-eight as I hoped, but it is significant nonetheless. 

The model is an S24xS24 model with S24 acting on 0..23.  The corners are
therefore vectors of the form [a,b,c,....], which means 0->a, 1->b, 2->c,
etc.  The identity is [0,1,2,....].  We focus on the corners because we
consider the order of the corners first in our lexicographic order, using
the order of the edges only to break ties on the corners.  We call a
representative element of each M-conjugacy class a canonical form, and all
other elements we call non-canonical. 

The nature of the Shamir search is that it produces successively more
complete partial permutations as a tree is searched.  That is, it produces
[a,?,?,...] at the zeroth level of the tree, [a,b,?,?,...] at the first
level of the tree, [a,b,c,?,?,...] at the second level of the tree, and so
forth until a complete permutation is constructed. 

The enhancement to the method consists of determining which of the partial
permutations are canonical, which are non-canonical, and which are
neither.  A partial permutation is canonical if all daughter nodes are
canonical, a partial permutation is non-canonical if all daughter nodes
are non-canonical, and a partial permutation is neither if there are
daughter nodes of both types. 

>From a theoretical point of view, the type of each node could be
determined by examining each daughter and backing up the results
appropriately, similar to an alpha-beta search.  From a practical point of
view, the whole purpose is to determine the type of node without examining
any of the daughters.  And in practice, we only detect non-canonical nodes
vs. other than non-canonical nodes.  There is no disadvantage to this
procedure because it is only the non-canonical nodes which we wish to
eliminate from the search. 

Determining non-canonical nodes depends both on the particular numbering
scheme which is used for the cube facelets and also upon the particular
representative element function which is chosen.  We number the Front
corner facelets of the cube as follows: 

   0  1

   3  2

The Back corner facelets are then numbered 4..7, with opposite facelets
summing to 7.  All other facelets are numbered by adding 8 to the Front or
Back facelet as you look at the facelets of the cubie in clockwise order. 
For example, the flt cubie is (0,8,16), and the ftr cubie is (1,9,17). 

The representative element function returns the M-conjugate which of all
the elements in the M-conjugacy class is first in lexicographic order. 

Consider the partial permutation [0,?,?,...].  Its M-conjugates are of the
form [?,1,?,?...], [?,?,2,?,?,...], [?,?,?,3,?,?,...], etc.  It is easy to
see that if a representative begins with 0, then there is at least one of
the eight corner cubies somewhere in the cube which is properly
positioned, both with respect to location and with respect to twist. 
Also, it is easy to see that the partial permutation [0,?,?,...] has both
canonical and non-canonical forms as daughters. 

But consider the partial permutations [1,?,?,...] and [3,?,?,...].  They
are conjugate, but the canonical form is [1,?,?,...].  Hence, no canonical
form can begin with 3.  Therefore, we eliminate all permutations which
begin with 3 from the search, and we have eliminated 1/24 of the search
tree.  

I have calculated a table of non-canonical cutoff points for the corners. 
The results are as follows.  Notice that not all cutoffs are at the zeroth
level of the tree as is the cutoff for 3, but nonetheless there are 17
cutoffs at the zeroth level.  That means that there are only 7 (out of 24)
ways to begin a canonical permutation. 


Level       Noncanonical  Positions     
               Nodes      Trimmed        

i= 0    count=        17   62460720          
i= 1    count=        63   11022480          
i= 2    count=       487    4733640          
i= 3    count=      7610    4931280          
i= 4    count=     17830     962820          
i= 5    count=    138978     833868          
i= 6    count=    622745     622745          
Total trimmed              85567553

The positions trimmed figure is based on a corners only search, just to 
give a sense of proportion to the numbers.  The corners only group 
contains about 88 million positions.  For the complete cube, the numbers 
would be larger, but the proportions would be the same.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7127
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990




From cube-lovers-errors@curry.epilogue.com  Thu Apr  3 12:16:11 1997
Return-Path: cube-lovers-errors@curry.epilogue.com
Received: from curry.epilogue.com (localhost [127.0.0.1]) by curry.epilogue.com (8.6.12/8.6.12) with SMTP id MAA01927; Thu, 3 Apr 1997 12:16:11 -0500
Precedence: bulk
Errors-To: cube-lovers-errors@curry.epilogue.com
Message-ID: <01BC4004.EC0AAA20@p10.ts3.danve.MA.tiac.com>
From: Karen Angelli <kangelli@tiac.net>
To: "'Cube-Lovers@AI.MIT.EDU'" <Cube-Lovers@ai.mit.edu>
Subject: Cube History: Triumph and Defeat
Date: Thu, 3 Apr 1997 07:58:25 -0500

A recent addition to the Cube-Lovers list, I would like to share one of
the least known events in the history of Cube entertainment, and its
repercussions in the mass media and ultimate disgrace of one of the most
powerful men in entertainment.

It was the early '80s and Rubik's-Cube-Mania was all the rage.  Although
not nearly as accomplished as some of this list's members were, I could
solve the cube in about one minute.  I was also a lifeguard at a public
pool, and a locally renowned under-water swimmer (with a personal best
of 75 meters).  With such amazing and narrowly acclaimed accomplishments
in such diverse fields of endeavor, it was only natural that I would
feel public pressure to combine the two.  Thus was born underwater cube
solutions.

I took my best lubricated cube, a dive mask and a weight belt, and
started solving the cube in 10 feet of water.  After several practice
attempts, to ensure that I could hold my breath long enough to complete
the cube, I volunteered my services to the local synchronized swimming
club which was looking for an opening act for their show.

The show took place before a not so overflowing crowd during the busiest
season of the year, the local Nordic Fest celebration of Scandinavian
heritage.  The international crowd of aquatic enthusiasts was stunned
when I was introduced.  My bikini clad assistant handed the pristine
cube to one of the audience members to randomize and returned to me.
Then, in four and a half feet of water, I submerged and started solving
the cube.

After about 10 seconds of hurried twisting, I dropped the cube and lost
my place - I had to start over.  In practice, it had never taken me more
than about 1 min, 15 seconds to solve the cube, and I had practiced
holding my breath comfortably for about 1 min, 25 seconds.  I wasn't
sure whether I would complete the task.  After about 1 min 30 seconds,
my sister started yelling for someone to help me.  However, at the 1 min
38 second mark, I surfaced - to thunderous applause.  Certainly one of
the greatest moments of cube history.  How sad that this would lead to
infamy and no greater laurels.

After hearing the story of how I wowed a normally reserved Iowan crowd,
my classmates in college in Pennsylvania encouraged me to find a larger
audience, on a national stage.  Naturally, I wrote to NBC's Late Night
with David Letterman to pitch my idea for a stupid human trick.
Uncharacteristically, however, Dave turned down a good idea.  I haven't
forgiven him since.

I hope I haven't disappointed any Dave fans out there, but the truth had
to surface some day.  Thanks for keeping the flame alive Cube-lovers.

Pete Reitan



From cube-lovers-errors@oolong.camellia.org  Wed May 28 16:35:19 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id QAA17056; Wed, 28 May 1997 16:35:19 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-Id: <199705281233.IAA05016@life.ai.mit.edu>
Date:     Wed, 28 May 97 8:30:53 EDT
From: Nichael Cramer <ncramer@bbn.com>
To: cube-lovers@ai.mit.edu
Subject:  [gknauth:  Professor cracks Rubik's cube mystery]

[Simply passing along bits --N]


----- Forwarded message # 1:

Date: Wed, 28 May 97 08:13:32 EDT
From cube-lovers-errors@oolong.camellia.org  Thu May 29 00:28:22 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id AAA18141; Thu, 29 May 1997 00:28:21 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Wed, 28 May 1997 15:18:10 -0700
From: Richard E Korf <korf@cs.ucla.edu>
Message-Id: <199705282218.PAA17014@denali.cs.ucla.edu>
To: Cube-Lovers@ai.mit.edu
Subject: rumor control

Dear Cube-Lovers,
   Apparently some work I did recently has gotten badly mangled by the press.  I
have NOT resolved the question of whether or not 20 face turns is the maximum
distance one can get from a scrambled cube.
   What I did is to write a heuristic search program that finds optimal
solutions to arbitrary scrambled cubes.  The algorithm is very different from
the method of Fiat, Moses, Shamir, et al, and seems to be competitive with their
algorithm in terms of time and space.  The current version of my program is
practical for cubes up to 18 moves away from solved.
   Out of 10 randomly generated cubes, one was solved in 16 moves, 3 required 17
moves, and 6 required 18 moves, suggesting that the median optimal solution
length is probably 18 moves.
   A paper on this work will be presented at the National Conference on
Artificial Intelligence (AAAI-97) in Providence, RI in July. I'd be happy to
send a postscript copy of the paper to anyone who is interested, unless there
are a lot of requests, in which case I'll just post it on my web site and put a
pointer here.  In addition, if there is enough interest, I could write a short
summary of the paper for this list. Thanks for your attention.
                            -rich korf



From:	SMTP%"joemcg3@snowcrest.net" 28-MAY-1997 22:02:17.57
To:	SCHMIDTG
CC:	
Subj:	Solved in 20 moves?

Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-ID: <338CA4A0.79A7@snowcrest.net>
Date: Wed, 28 May 1997 14:33:20 -0700
From cube-lovers-errors@oolong.camellia.org  Thu May 29 21:58:15 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id VAA20780; Thu, 29 May 1997 21:58:15 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Thu, 29 May 1997 17:24:45 -0700
From: Richard E Korf <korf@cs.ucla.edu>
Message-Id: <199705300024.RAA18247@denali.cs.ucla.edu>
To: Cube-Lovers@ai.mit.edu
Subject: Description of algorithm for finding minimal-move solutions to Rubik's Cube

Dear Cube-Lovers,
   Here is the promised short description of my algorithm for finding optimal
solutions to Rubik's Cube.  I use the face-turn metric, meaning any twist of a
face, even 180 degrees, counts as a single move.  A twist of a center slice
can only be accomplished by two twists of the outside faces.
   The algorithm is a heuristic search, called Iterative-Deepening-A*, or IDA*,
for any artificial intelligence (AI) folks in the group.  Given a scrambled
cube, it first looks for solutions one move long, then solutions two moves long,
then three moves, etc.  Each iteration searches for solutions of successively
greater length, until a solution is found.  At that point it quits, returning
what must be an optimal solution, barring program bugs.  This is a completely
brute-force approach to the problem.  At a million twists per second, searches
to depth 10 would take almost 3 days.
    To make this approach practical, we need a function that given a cube state
will efficiently calculate a lower bound on the number of moves needed to solve
it.  This is called a heuristic evaluation function.  For example, we can
precompute the number of moves needed to solve each edge cubie individually from
each possible position and orientation. Then given a state of the cube, we sum
the number of moves needed to solve all 12 edge cubies individually, and divide
by 4, since each move moves 4 edge cubies.  This heuristic, called 3D Manhattan
Distance, has an average value of 5.5. The important thing is that this function
always return a lower bound on the number of moves needed to solve a state.
    During our search we compute the Manhattan Distance of each state.  If we
are looking for solutions of length 10, for example, and we have a state that is
5 moves from the initial state, and its Manhattan Distance from the solved state
is 6 moves, we don't have to search that path any deeper, since it will take at
least 11 moves to get to the goal along that path, since 6 is a lower bound on
the number of moves needed to solve the state.  Adding the Manhattan Distance
heuristic to our search algorithm lets us search to depth 14 in about 3 days.
We could do the same thing with the corner cubies, and take the maximum of the
two values, but that doesn't help much.
    To do better, we need a more accurate heuristic function.  For that, we use
an idea call "Pattern Databases" due to Culberson and Schaeffer. See Culberson,
J.C., and J. Schaeffer, Searching with pattern databases, Proceedings of the
11th Conference of the Canadian Society for the Computational Study of
Intelligence, published in Advances in Artificial Intelligence, Gordon McCalla
(Ed.), Springer Verlag, 1996.
   For example, if we consider just the corner cubies, there are only about 88
million possible states they could be in (8!x3^7). We exhaustively build and
store a table, using breadth-first search, that tells us the minimum number of
moves needed to solve just the corner cubies from every possible combination,
ignoring the edge cubies.  This value ranges from 0 to 11 moves, averages 8.764
moves, and requires only 4 bits per state. (We could reduce this further using
an idea of Dan Hoey's published in this list awhile ago.)  This table only has
to be computed once, taking about a half hour, and requires about 42 megabytes
of memory to store (a megabyte is 1048576 bytes).
    Then, during the search, we compute the heuristic lower bound on the number
of moves to the goal by looking up the configuration of the corner cubies, and
using the number of moves stored in the table. 8.764 is a lot better than 5.5.
    Finally, we divide the edge cubies into two groups of six, and compute a
similar table for each group.  There are too many combinations of all 12 edge
cubies to build a single table.  The final heuristic function we use is the
maximum of 3 different values, the moves needed to solve the corner cubies, and
the moves needed to solve each group of six edge cubies. The total memory for
all three tables is 82 megabytes.
    Given more memory, we could built larger tables, for example, considering 7
edge cubies at a time.  This would give a more accurate heuristic value, and
reduce the running time of the search algorithm.  In fact, an informal analysis
of the performance of the algorithm suggests that its speed will increase
linearly with the amount of available memory.  Thus, given twice as much memory,
the algorithm should run in roughly half the time.  Disks and other secondary
storage are of no use, since the access time is much too slow to be worthwhile.
   The current version of the program is written in C on a Sun Ultra-Sparc
Model-1 workstation with 128 megabytes of memory.  It generates about 700,000
states per second.  Depth 16 searches typically take less than 4 hours, depth 17
searches take about 2 days, and complete depth 18 searches take about 27 days. A
complete depth 19 search would take about a year.  Each depth takes roughly
13.34847 times longer than the previous, which is the branching factor of the
problem space.
   The algorithm is easily parallelized. Given 18 processors, for example, we
make all 18 possible first moves, and hand each of the resulting states to a
different processor to solve. This will give roughly linear speedup with the
number of processors, since the amount of time needed to search to the deeper
levels is very consistent from one state to the next. 
   Sorry for the length of this message, but I hope it will of interest to some
of you. If you'd like the full paper, just send me a message. Thanks very much.
                                  -rich




From cube-lovers-errors@oolong.camellia.org  Fri May 30 20:33:43 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id UAA23656; Fri, 30 May 1997 20:33:43 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-ID: <338F7124.73A6@hrz1.hrz.th-darmstadt.de>
Date: Sat, 31 May 1997 02:30:28 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
X-Mailer: Mozilla 3.0 (Win95; I)
MIME-Version: 1.0
To: cube-lovers@ai.mit.edu
Subject: Re: Description of algorithm for finding minimal-move solutions to Rubik's Cube
References: <199705300024.RAA18247@denali.cs.ucla.edu>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Richard E Korf wrote:
> 
> Dear Cube-Lovers,
>    Here is the promised short description of my algorithm for finding optimal
> solutions to Rubik's Cube.

>From the description it is evident, that the algorithm Richard E Korf
uses is basically identical to the the sub-algorithm which is used in
each stage of my two stage algorithm to solve the cube. What he calls
"heuristic functions" are the "pruning tables" of Dik Winter and Michal
Reid and the "filters" in the original description of the algorithm in
CFF 28 (April 1992) of the Dutch Cubist Club. Here is a short summary of
this algorithm in the version I implemented in a windows95 program
requiring 16Mbyte of Ram. When I will have included a help-function
within the next weeks, I will offer it to all interested cubists for
free: 

In phase 1, the cube is transformed to an element of the subgroup
generated by <U,D,R2,L2,F2,B2>. This is equivalent to restore the
orientation of the 8 corners and 12 edges and to put the 4 edges of the
UD-slice in that slice. There are 3^7=2187 possible states for the
corner orientations, 2^11=2048 possible edge orientations and
12*11*10*9/(1*2*3*4)=495 possible positions for the 4 edges of the
UD-slice. The "heuristic functions" consist of three tables, using 4
bits for each entry. The first table stores the minimum numbers to solve
the 2187*2048 possible states to restore the orientation of both edges
and corners, the other tables have 2187*495 and 2048*495 entries and
store the corresponding minimum numbers.
Dik Winter proved, that 12 moves always suffice to get to this subgroup.

In phase 2, the cube is solved in this subgroup, using only
U,D,R2,L2,F2, and B2. Now we have do restore the permutations of the
corners, edges and middle slice. There are 8! states for the corner
permutations, 8! states for the edge permutations and 4! states for the
permutations of the UD-slice. The "heuristic functions" consist of only
two tables, storing the minimum numbers to restore both edges and
UD-Slice and both corners and UD-Slice, having 8!*4! entries each. 
The table for the minimum numbers to restore both edges and corners
would have 8!*8! entries and is not possible with the current hardware.
Michael Reid proved, that 18 moves always suffice in this subgroup.

Having found a solution in stage1 and stage2 the algorithm does not
stop, but generates other solutions in stage1. So if for example we have
10 moves in stage1 and 12 moves in stage2, there might be a solution
with 11 moves in stage1 but only 10 moves in stage2. Running long
enough, the algorithm will find the overall optimal solution, having no
moves in stage2 then.

Due to the smaller size of the subgroups a first solution usually will
be
found within seconds. This first solution  is optimal for phase1, but
indeed (usually) not optimal for the overall solution. Typically you
will have solutions with less then 20 moves within minutes and the
optimal solution for states with lets say less then 16 moves will be
found within a reaseonable time.

Herbert



From cube-lovers-errors@oolong.camellia.org  Fri May 30 21:24:38 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id VAA23782; Fri, 30 May 1997 21:24:38 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Sender: Haym Hirsh <hirsh@cs.rutgers.edu>
Date: Fri, 30 May 97 21:10:39 EDT
From: Haym Hirsh <hirsh@cs.rutgers.edu>
Reply-To: Haym Hirsh <hirsh@cs.rutgers.edu>
To: joemcg3@snowcrest.net
Subject: Re: The rest of us
In-Reply-To: Your message of Fri, 30 May 1997 11:14:19 -0700
Cc: cube-lovers@ai.mit.edu
Message-ID: <CMM-RU.1.5.865041039.hirsh@pei.rutgers.edu>

Here's a brief attempt at a "layman's" description of Professor Korf's
work:

Imagine you have a function that takes as input a messed-up Rubik's
cube, and outputs a guess of how many moves it will take to get it to
the solved state.  Further, assume this guess is never greater than
the correct number of moves -- sometimes your solution-length guesser
may make a correct guess, but sometimes (or even perhaps always) it
may underestimate the number.

There is an algorithm called A* that is guaranteed to find a shortest
solution sequence for any Rubik's cube it is given, as long as it is
given a solution-length guesser that has this never-overestimates-the-
number-of-moves-to-solved guarantee.

The problem is that A*'s guarantee is only that it will return a
shortest solution to any cube, with no guarantee on how long it will
take to find it.  Due to this run-time issue A* is only applicable to
the most trivial of problems.

However, in the mid-80s Professor Korf presented a tractable variant
of A*, called IDA* (Iterative Deepening A*) that has the same
guarantee as A* on finding shortest solutions, but is much faster.

The problem now, though, is that even IDA* can also take a long time.
Its salvation, however, is that, loosely speaking, the better the
solution-length-guessing-function is, the faster IDA* will run.  Thus,
for example, you could use a function that always returned 0 as the
guess for how many moves you are from the start.  It's not a
particularly clever guess, but it obeys the rule that it never
overestimates the solution length.  Therefore, you could use it with
IDA* (or, for that matter, A*) to find shortest solutions to any cube.
Except that it would run too slow, because the solution-length guesser
is so dumb.  A better solution-length guesser would help IDA* run
faster.

Professor Korf came up with a way to more intelligently guess what the
solution length will be for arbitrary cubes -- it gives something much
closer to the true value, but still without overestimating.  A
simplified form of this would be to figure out how many moves at
minimum it will take to get the corners in place, and use this
corners-only solution length as a guess.  This will never overestimate
the solution length, since to get everything in place you certainly
have to get at least the corners into their proper positions, and it
is better than a guesser that always returns 0.

Professor Korf also had to figure out how to compute these guesses in
an efficient fashion, since guesses will be requested many many times
by IDA* as it explores possible intermediate cubes in its search for
the solution.  To do this he enumerated all 88 million configurations
of corners (different cubes with different arrangements of edges but
with identical corners are considered identical configurations).  For
each he figured out the minimum number of moves that would be
necessary to get them into their correct position in a solved cube if
edges were ignored (taking a non-trivial, but non-infinite, amount of
time to do this for each of the 88 million configurations).  Finally,
he generated a table with 88 million entries, with each entry
corresponding to a corner configuration and containing the solution
length for that configuration.  This created a way to quickly compute
his more accurate corner-centric solution-length guesser, via table
lookups.

In truth Professor Korf improves on this even further by developing a
better solution-length guesser that does similar things with edges as
I just described with corners, also using tables for efficient guess
calculation.  The result is a solution-length guesser that is accurate
enough to allow IDA* to solve the 10 random cubes that he generated.

More specifically, Professor Korf generated random cubes by taking a
solved cube and making 100 random turns to it.  He did this 10
separate times, and got 10 messed-up cubes.  He then ran IDA* using
his table-based solution-length guesser, and solved all 10, one in 16
moves, three in 17 moves, and the rest in 18 moves.  Because he used
IDA*, and because his solution-length guesser never overestimates
solution lengths, his solutions are guaranteed to be optimal (due to
IDA*'s mathematical guarantees).

This does not argue that 18 is the longest solution possible for any
cube.  Just that for the 10 he generated randomly, none required more
than 18.  Perhaps some cubes are more than 18 moves away from start.
None simply happened to arise amongst his 10 cases.



From cube-lovers-errors@oolong.camellia.org  Sat May 31 16:03:43 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id QAA27659; Sat, 31 May 1997 16:03:42 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
From: SCHMIDTG@iccgcc.cle.ab.com
Date: Sat, 31 May 1997 14:15:25 -0400 (EDT)
To: cube-lovers@ai.mit.edu
Message-Id: <970531141525.2140f541@iccgcc.cle.ab.com>
Subject: A* versus IDA*

On Haym Hirsh's description of Professor Korf's work, Dan Hoey wrote:

>Thanks very much for the explanation.  It agrees with my understanding
>of the paper, as far as that goes.  But do you have a succinct
>explanation of what makes IDA* more tractable than A*?  That's the
>part I missed.

Sorry, perhaps not so "succinct", but here goes:

For problems with constant or near constant branching factors, such
as the cube, both A* and IDA* exhibit exponential time complexity.
In "big O" complexity notation this would be O(b^d) where b is the
branching factor and d is the depth of the search.

The major difference between the two algorithms is in respect to
the space complexity.  A* minimally requires that all frontier nodes
be stored in memory.  This is true of all breadth-first-search (BFS)
algorithms and thus requires O(b^d) space complexity (i.e. exponential
storage -- very bad!).  BFS may also incur some additional time complexity
that depends upon the implementation details of how the stored nodes are
searched and managed.

On the other hand, IDA* is a depth-first-search (DFS) algorithm.  DFS
algorithms require only a linear amount of storage with respect to search
depth (i.e. it has O(d) storage requirements) since it only needs to store
the current path it is exploring.  It uses a cost threshold to determine
when it has gone deep enough and should backtrack to the next unexplored
node (as determined by the current path).  Since the cost threshold is based
on a heuristic estimate (really just an informed "guess"), a solution
may not be immediately found if the guesss was too low, and the search may
have to be repeated with an increased cost threshold, in order to find a
solution.  At first glance, this may seem inefficient, however when one
considers the branching factor (e.g. somewhere in the neighborhood of 13
for the cube) only a small percentage of the search time may be taken up
by the earlier searches.

The bottom line is that A*'s exponential memory requirements limit
its usefulness to small, one might even say "toy", problems.  So an
even bigger issue is that one is likely not to have the memory capacity
to solve the problem at hand using A*.  Note that secondary mass storage
devices do not typically help, since they drastically reduce the number
of node evaluations per second.

Having said that, I've neglected the effect of some other factors such as
duplicate node detection.  BFS can detect duplicate nodes if it stores all
of them and searches through its list of nodes. IDA* implicitly avoids many
of them because their high cost.  IDA* can also be augmented in other ways
(e.g. hash tables) to account for duplicate node checking if this is a
signficant issue with the search space at hand.

There are also some problem dependent factors such as the nature of the
search space and the quality of the cost heuristic.  Consider the limiting
case where we have a "perfect cost heuristic" capable of always leading us
down the optimal path.  If we had such as thing, the time complexity of
these algorithms would be O(b*d) (i.e. linear with respect to depth).
In that case, it would be overkill to use either of these search methods,
but the notion of a "perfect cost heuristic" helps demonstrate the
importance of good heuristics and corresponding reduction in search
exploration.

Professor Korf has consistently broken new ground with respect to solving
previously unsolved problems.  During the mid 80's he was the first to solve
random instances of the 15 puzzle using IDA*.  Since he has used so called
"admissible" heuristics, (heuristics which never overestimate the cost
to the goal state) the solutions are guaranteed optimal.  I have been
writing search programs for over twelve years and consider IDA* to be a
real "gem".  As an aside, I've applied IDA* (augmented with hashing for
duplicate node detection) to solve all but a few hundred of the 32000
instances of Microsoft's "FreeCell" puzzle game that comes packaged
with Win95 and NT.

So to summarize, neglecting details, both A* and IDA* have similar time
complexity requirements, namely exponential.  A* also has exponential
storage requirements whereas IDA* has linear memory requirements.  The
space advantage of IDA* therefore greatly increases the scope of problems
that can be attacked by this method.

Hope I've served to clarify rather than to further obfuscate.

-- Greg


From cube-lovers-errors@oolong.camellia.org  Sat May 31 17:19:14 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id RAA27882; Sat, 31 May 1997 17:19:13 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Sat, 31 May 97 16:55:01 EDT
Message-Id: <9705312055.AA16150@sun34.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: cube-lovers@ai.mit.edu
Subject: Searching and Metrics in (Korf 1997)

INTRODUCTION

I've read through Rich Korf's paper now, and I have a few ideas on the
paper and how the method might be improved.  This is fairly long, so
I've broken it up into two parts.  Part 1 has a bit about searching
methods (answering the question I asked in my last message) and some
concerns about the face-turn vs quarter-turn metric.  Part 2 covers
some ideas I have on the heuristics he uses.  Eventually I hope to air
my concerns over how realistic the memory-based analysis is, but I'm
not sure I understand it well enough yet.

SEARCHING

I asked yesterday what made IDA* a more tractable method than A*.  I
think I've got it now.  Both use a heuristic function h(p) that is
guaranteed not to underestimate the number of moves to solve position
p.  And both may have to check every position p (encountered at depth
g(p)) for which g(p)+h(p) is less than the optimum.

But A* is essentially a breadth-first algorithm.  You have to make a
list of all the nodes for which g(p)+h(p) is minimum before you try a
higher value.  For this problem, there are too many positions to store
conveniently.  IDA* is a variant that allows depth-first search.  If
you have a lower bound L, you search depth-first for all positions
that have g(p)+h(p)<=L.  You will find a solution if and only if the
optimal solution is at depth L; if you fail you try again with L+1.

The big advantage of IDA* is that you don't need to represent a
database of all the frontier positions at once, you try them one at a
time.  IDA* has two disadvantages, though.  First, whenever you fail a
search, you lose all the information from previous searches with
smaller values of L, except that they failed.  But if the number of
positions at each depth is much larger than the previous (ten or
thirteen times larger, in this case) this loss is small.  Second, your
depth-first search may visit the same position more than once, if it's
reachable by more than one near-optimal path.  This seems to occur for
only a few percent of positions as far as we've seen, but it
eventually gets to be all of them near the global maximum.  The issue
of duplication leads to my question about metrics.

METRICS

Rich uses the face-turn metric, which has been discussed here earlier.
But the justification he gives is one I haven't seen before.  He
claims the face metric

    ... leads to a search tree with fewer duplicate nodes.  For
    example, two consecutive clockwise twists of the same face leads
    to the same state as two counterclockwise twists.

But this is a bad example of duplication.  No one who is familiar with
the cube-lovers archives (e.g. my message of 9 January 1981) would
generate both of the above nodes, any more than they would generate
the duplicate nodes caused by composing two commuting moves like F, B
in both possible orders.  Rich knows not to do the latter, as he
discusses in the paper.

In case I haven't been sufficiently explicit about this, the way to
avoid this kind of duplication in the quarter-turn metric is to
require:

    1. The move after F        must not be F',
    2. The move after F' or FF must not be F or F',
    3. The move after B        must not be F, F', or B',
    4. The move after B' or BB must not be F, F', B, or B',
    5. The same as rules 1-4 with F,B replaced by R,L, respectively, and
    6. The same as rules 1-4 with F,B replaced by T,D, respectively.

So two questions remain. First, is there really a difference in the
duplication of positions in the two metrics?  I think Jerry Bryan's
table shows that only about 1.74% of the 63 billion positions are
duplicated at 11q.  Do we have statistics on duplication for the
face-turn metric?  Second, is there any technical justification for
using the face-turn metric?  I'm aware that most of the published
literature uses it, and that small numbers of moves sound more
impressive than large ones, but these aren't very satisfying reasons.
As far as I know, the problem of finding optimal solutions can be
fruitfully approached in either of the metrics, or in any of several
other metrics.

[ End of part 1. ]


From cube-lovers-errors@oolong.camellia.org  Sat May 31 17:56:04 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id RAA27975; Sat, 31 May 1997 17:56:04 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Sat, 31 May 97 17:26:17 EDT
Message-Id: <9705312126.AA16157@sun34.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: cube-lovers@ai.mit.edu
Subject: Heuristics in (Korf 1997)

[ As I mentioned, before, this is part 2. Just after I sent part 1, I
  saw Greg Schmidt's explanation of IDA*.  I hope someone finds the
  parts of our messages that don't duplicate each other to be
  instructive enough to justify the parts that do. ]

HEURISTIC FUNCTIONS

Herbert Kociemba notes three interesting heuristics based on the
number of moves to reach the subgroup <T,D,R2,L2,F2,B2>.  In fact,
Mike Reid calculated (and Dik Winter verified) the exact distances in
this 2.2-billion element coset space (see archives at 7 Jan 1995 and
following).  Mike shows how you could look up this distance in a
64-megabyte table, and Dik suggests how this could be made into a
database half the size (though I think the performance penalty might
be too high).

These coset differences form an admissible heuristic.  There are a lot
of other interesting subgroups, and some of their coset spaces may
yield useful heuristics.

But the coset spaces Rich uses are those relative to the subgroup that
fixes a certain number of pieces: The corners, or either of two
subsets of six edges.  It's unfortunate he didn't notice that the
latter two tables could use the same database.  The way you do this is
to choose your two sets S, T of 6 edges such that there is a whole
cube move m in M for which m(S)=T.

Here's a formalism of how the database for fixing set S works.  Make a
database that maps a position p to the length of the shortest sequence
x for which px fixes each piece s in S.  Thus the distance h(p) from
position p to the goal position q is the length of pq', for which we
get a lower bound by looking up pq' in the database.

To find the heuristics based on fixing the pieces in T, we could make
a new database.  But px(s) = s exactly when (mpm' mxm')(m'(s))=m'(s).
That is to say, when the m-conjugate position (mpm' mxm') fixes the
piece m'(s).  So if we look up mpm' in our database, it will give the
length of the shortest sequence mxm' that fixes each m'(s) -- i.e.,
that fixes each t in T.

This also gives us 94 more admissible heuristics for free, at least in
terms of table space.  Of course we can use the other 46 elements of
M.  What might not be obvious is that the lower bound we get by
looking up x in the database is probably not the same as the lower
bound we get by looking up x'.  But the length of x is the length of
x', so we could get 48 more heuristics by looking up the inverse and
it's M-conjugates.  By taking the maximum of the 96 values formed by
looking up mpq'm' and mqp'm' in the data base, we may get a much
better lower bound for the solution length.

Of course, we could take any database of lower bounds and use this
process to get up to 96 times as many bounds.  The distance to
Kociemba's subgroup is such a lower bound, but it unfortunately is so
symmetric that I think we only get a 6-fold improvement (or perhaps
3-fold; I'm losing my intuition on inverses in those cosets).  Perhaps
just fixing an asymmetric subset of edges and corners might be the
best solution.

[ End of part 2. ]


From cube-lovers-errors@oolong.camellia.org  Sat May 31 18:34:15 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id SAA28044; Sat, 31 May 1997 18:34:14 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Sun, 1 Jun 1997 00:20:40 +0200
From: Dik.Winter@cwi.nl
Message-Id: <9705312220.AA22245=dik@hera.cwi.nl>
To: cube-lovers@ai.mit.edu
Subject: Re: More on Korf's method

Herbert Kociemba:
 > From the description it is evident, that the algorithm Richard E Korf
 > uses is basically identical to the the sub-algorithm which is used in
 > each stage of my two stage algorithm to solve the cube.

This is right.

Dan Hoey:
 >              From the description, I think Rich's heuristic functions
 > are quite a different type from what you use (though I do not
 > understand either exactly yet).

Not really.  Rich's heuristic functions are (precomputed) distances 
along some coordinates of a multidimensional space.  His best apparently
are the corner positions and twice one half of the edge positions.
Similarly in both phases of Herbert's algorithm similar heuristic
functions (pruning tables, filters, ...) are used.

Of course the choice of heuristic function plays an essential role.
For instance, Herbert's original algorithm uses in the first phases
three heuristic functions all three based on a single coordinate
in a three dimensional space.  I modified it to use three heuristic
functions based on two dimensional coordinate planes in that same
space.  Depending on the problem to solve, this may be better or not,
in this case it is (much) better.  A similar modification did I do
in the second phase.

 >                    My guess is that your heuristics have a good chance
 > of being more effective at finding optimal solutions for random cubes
 > than Rich's, though perhaps some ideas from Rich need to be
 > incorporated.

As far as the first is concerned, I think so too.  When Herbert's
algorithm is run through to the end it will find an optimal solution
indeed, and in the search for that optimal solution it will use a
new heuristic function for the total solution: the result of previous
suboptimal solutions that come in pretty fast, which is used to prune
the second phase rigorously.  I have been able to proof (with my
modification of Herbert's algorithm) some pretty large (18-20 turn)
solutions optimal.  I do not think Rich's algorithm will be able to do
that in reasonable time.

 > First, we know 18f is not optimal, because the 12-flip is proven to
 > require 20f moves exactly (unless Mike Reid made a mistake, or I
 > misunderstood).

No, this is right indeed.

 > But we _can_ say there's at most one chance in 1024 that the first ten
 > random cubes you pick will all be closer than the median to solved.
 > So this demonstrates Rich's claim that the median optimal solution is
 > very likely 18f.

Something I did estimate already a long time ago.  I have done a few
hundred random cubes (a few thousand?  I do no longer remember) back
so many years ago.  As I remember, I let the program look for optimal
solutions upto 18f (longer is a bit time consuming).  As I remember,
there were only very few that could *not* be solved in 18f.  There must
be a discussion about this in the archives.

dik
--
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland, +31205924131
home: bovenover 215, 1025 jn  amsterdam, nederland; http://www.cwi.nl/~dik/


From cube-lovers-errors@oolong.camellia.org  Sat May 31 19:11:01 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id TAA28175; Sat, 31 May 1997 19:11:01 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Sender: Haym Hirsh <hirsh@cs.rutgers.edu>
Date: Sat, 31 May 97 19:07:01 EDT
From: Haym Hirsh <hirsh@cs.rutgers.edu>
Reply-To: Haym Hirsh <hirsh@cs.rutgers.edu>
To: Dan Hoey <Hoey@aic.nrl.navy.mil>
Cc: cube-lovers@ai.mit.edu
Subject: Re: More on Korf's method
In-Reply-To: Your message of Fri, 30 May 97 23:15:17 EDT
Message-ID: <CMM-RU.1.5.865120021.hirsh@athos.rutgers.edu>

> Thanks very much for the explanation.  It agrees with my understanding
> of the paper, as far as that goes.  But do you have a succinct
> explanation of what makes IDA* more tractable than A*?  That's the
> part I missed.

Here are a couple of attempts to explain why and how IDA* is a win over A*.
In my attempt to generate a description for the layman I tried to err
on the side of saying too much rather than too little -- my apologies
if I belabor the obvious for anyone.

The highest-level explanation is that A* may need to store a number of
intermediate results whose number is some exponential function of the
length of the solution -- e.g., b^l: l is the solution length, b,
roughly speaking, is the number of new cubes you can get from a given
cube, aka the "branching factor", and "^" means exponentiation --
whereas IDA* will only store a number of intermediate results whose
number is a linear function of the solution length -- e.g., b*l.  The
apparent paradox is that, to do this, IDA* does redundant work --
exploring some intermediate results many times because of its inferior
"bookkeeping".  However, it is usually the case that the extra work is
more than paid off by memory savings.  This is particularly true for
Rubik's cube, since the higher the branching factor (i.e., roughly 18
for the cube if you count crudely), the less the redundant work.

In a bit more detail, the difference between A* and IDA* is similar to
the difference between breadth-first search and depth-first iterative
deepening.  Imagine you want to generate all cubes that are reachable
in d steps from the start.  What you can do is generate all cubes that
are one step away, then generate all that are one step away from those
that are one step away (resulting in a list of all that are two steps
away), then all that are one step away from those that are two steps
away (resulting a list of all that are three steps away), etc.  At the
final step in this process you have a list of all cubes that are d-1
steps away, and you generate all cubes that are one step away from any
item in this list.  This generates all cubes that are d steps away.
The process is known as breadth-first search.  It's main problem is
that the list of all cubes that are d-1 steps away will have size
roughly b^(d-1).

Depth-first search, on the other hand, generates all cubes that are
one step away from start, puts all but one of them (i.e., b-1 of them)
on a list, and takes the one that wasn't placed on the list and
(recursively) generates all cubes that are d-1 steps away from it.
When you are done with this first depth-one cube, take one of the
other cubes that are one step from start (which is one of those
stashed away in the afore-mentioned list) and do the same thing,
generating, in turn, all cubes that are d-1 steps away from it.  This
continues until all the items that were put on the list have been
explored -- i.e., they have had all cubes at depth d-1 from them
returned.  This is depth-first search.  Because at each recursion
level it saves only b-1 things, at worst it winds up saving roughly
(b-1)*d cubes in its search.

Now imagine you have a cube that you know is at most (but not
necessarily exactly) d steps from the start, and you want to know what
the shortest solution to it is.  One approach would be to do a
breadth-first search to depth 1 and see if you have it, continue to
depth 2 and see if you have it, etc., until you reach depth d.  A
second possible approach would appear to be to use depth-first search
to depth d, but this is not guaranteed to give a shortest solution.
To see this, imagine that the cube is two moves from start, but it is
also four moves away if you make the wrong first move.  If the result
of that wrong first move is the cube that depth-first search chooses
to "expand" first (with the "correct" one waiting its turn on the list
of cubes to be seen later if you haven't found your cube), you will
find your desired cube via the depth-four solution.  You didn't find
the depth-two solution.

This problem with depth-first search leads to the idea of depth-first
iterative deepening.  The basic idea of iterative deepening is simple.
First do a depth-first search to depth 1.  If you haven't found it,
throw away all your work and start over, doing a depth-first search to
depth 2.  Again, if you haven't found it, throw away all your work and
start over, doing a depth-first search to depth 3.  This continues,
until you hit the right depth for finding it.  This process is
guaranteed to find the shortest solution, but seems silly,
regenerating everything you did in the previous depth-first search
when you add one to the depth.  The interesting observation that makes
this a win is that the percent of overall effort spent on previous
depths is only a small fraction of the effort spent on the final
depth-first search.  So you penalize yourself a little redundancy, but
are rewarded with much more modest and realistic memory requirements.

The step from this to A* vs IDA* is actually not too large.  The basic
idea is to use depth-first search, but instead of using a depth bound
d, instead don't go any farther from a cube if the sum of the number
of steps to get to it plus the guess on how many more steps are needed
to get to a solved cube exceeds some threshold.  You start with a
small threshold, and slowly keep increasing it, each time starting
over again from scratch, until the threshold is just barely high
enough to find the solution.  If you do this in the correct way (for
example, upping the threshold each time in the appropriate fashion
based on the values you observed in your previous iteration), you can
prove that the solution IDA* finds is the shortest possible (as long
as the solution-length guesser never over-estimates the correct value).



From cube-lovers-errors@oolong.camellia.org  Mon Jun  2 13:16:04 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id NAA03468; Mon, 2 Jun 1997 13:16:03 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Mon, 2 Jun 1997 10:10:29 -0700
From: Richard E Korf <korf@cs.ucla.edu>
Message-Id: <199706021710.KAA21887@denali.cs.ucla.edu>
To: cube-lovers@ai.mit.edu
Subject: miscellaneous comments

Dear Cube-Lovers,
   Here's a few comments on the recent flurry of messages. I guess I owe you all
an apology for being partly responsible for filling up your mailboxes lately,
yet here I go, sinning again.
   Perhaps it is no longer necessary due to the excellent messages by Haym
Hirsh, Greg Schmidt, and Dan Hoey, but I've written a 20 page survey article on
artificial intelligence search algorithms that I would be happy to send to
anyone on request. The first 10 pages cover things like breadth-first search,
depth-first search, depth-first iterative deepening, A*, and
Iterative-Deepening-A*. The rest talks about two-player game search and
constraint satisfaction. When ordering, please specify if you are interested in
the Rubik's Cube article or the search article, and allow 6 to 8 hours for
delivery.
   Regarding the quarter-turn metric, as long as one is careful to eliminate the
obvious duplicate states as Dan points out, it shouldn't matter much whether you
use the quarter-turn or face-turn metric.  While solutions are longer in the
quarter-turn metric, the branching factor, which is the average number of
operators that apply to a given state, is correspondingly lower. The branching
factor for the face-turn metric is about 13.34847, and the branching factor for
the quarter-turn metric should be about 9.
   Jerry Bryan is right on when he talks about the memory savings from storing
an entire subgroup, and the importance of efficient indexing.  For my heuristic
tables, no states are actually stored, just the number of moves to solve them.
The states are "respresented" by the indexes in the table.
   Here's the indexing problem.  Write out all the permutations of say 4
elements, 24 in all, in lexicographic, or any other, order. Now number the
permutations from 0 to 23.  The problem then is given a permutation of N
elements, compute its sequential number in your ordering scheme.  The obvious
algorithms do this in roughly N^2 time, but it would be nice to able to do it
faster.
   To put all this in perspective, there are two obvious but impractical
implementations of "God's algorithm". One is brute-force depth-first
iterative-deepening search, with no heuristic functions. At a million twists per
second, this would take about 700,000 years on average, but almost no
memory. The other is a complete lookup table storing every state. This would be
very fast once the table was built but would take a few bits for each one of the
4x10^19 states.  We don't have the time for the former approach, nor the storage
for the latter.  But by using both a lot of time, and a lot of memory, we can
find optimal solutions.  Most of the different design choices presented by these
types of approaches amount to a tradeoff between time and space. It remains to
be seen what choices lead to the best algorithms.

                                -rich

  





From cube-lovers-errors@oolong.camellia.org  Mon Jun  2 17:32:10 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id RAA04147; Mon, 2 Jun 1997 17:32:10 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-ID: <3393350F.6541@hrz1.hrz.th-darmstadt.de>
Date: Mon, 02 Jun 1997 23:03:11 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
X-Mailer: Mozilla 3.0 (Win95; I)
MIME-Version: 1.0
To: cube-lovers@ai.mit.edu
CC: Richard E Korf <korf@cs.ucla.edu>
Subject: Detailed explanation of two phase algorithm
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Reading the many contributions in the mailing list in the last days, I
state, that the insight im my two phase algorithm solving the cube
ranges from misunderstood to partly understood, so I will add some more
really detailed explanation here.

The memory requirements for the search algorithm are of the order
O(d*log b), where b is the branching factor and d is the solution depth,
so it definitely is not breadth-first search with O(b^d) nor is it
bidirectional search with O(b^d/2).
The "log b" is no misprint, it is due to the special situation when
dealing rotational puzzles.

The orientations of the corners, the edges and the position of the four
middleslice edges are mapped to {0,1,...,3^7-1},{0,1,...,2^11-1} and
{0,1,...,12*11*10*9/4! -1} by appropriate functions in phase1.
Every state of the cube is represented by a triple (x,y,z) in stage1,
and a face turn maps this triple to another triple (x',y',z').

Let us denote (x0,y0,z0) for the triple, when arriving in the subgroup
<U,D,R2,L2,F2,B2>. All elements of this subgroup have this same triple
(x0,y0,z0), because neither edge nor corner orientations can be changed
here and the four middleslice edges stay in their position too (only
their permutation changes, but the mapping function for z ignores the
permutation).

Before applying the search algorithm we use the inverses of the mapping
functions to create lookup-tables for each coordinate, so that a face
turn can be performed with three table lookups, which is very effective.

The three heuristic functions in phase1 also are table-based. From a
pair (x,y) we compute the index i=3^7*y + x which will be a unique
number out of {0,1,...,3^7*2^11-1}. At tableposition i we store the
minimum number of moves we need to get from (x,y) to (x0,y0), ignoring
the z coordinate. Of course this minimum number never is greater than
the number of moves to go from (x,y,z) to (x0,y0,z0), so it is accurate
for the use in an IDA* type search. The other two tables for (x,z) and
(y,z) are constructed in a corresponding way.
Because these minimum-number never exceed 9 in phase 1, 4 bits will do
per tableentry.

Now I *try* to describe the search algorithm for phase1. The
implementation in my program has slight modifications, but they would
not improve the readability of the description. For example I omit the
part how to reduce the branching factor forbidding  the move sequences
RR2 or UDU etc.
During the search algorithm, we only store the current state (x,y,z).
Instead of storing the node path we store the applied move sequence,
which is equivalent but more adopted for our problem. We use 1 Byte for
every move. Let denote the list for the move sequence with A, A[i] then
is the i's element of the list. The sequence is stored in reverse order,
A[0] holds the last move of the solving sequence when a solution is
found. The iteration depth is denoted with L1.

1. On initialization set L1=1, i=0, A[0]=0.

2. Apply a face turn to (x,y,z) using the generated lookup tables, the
face turn according to the number A[i]: If A[i]==0, apply U. When we
write 0:U for that the following table shows what faceturn(s) to apply: 

O:U, 1:U, 2:U, 3:UR, 4:R, 5:R, 6:RF, 7:F, 8:F, 9:FD, 10:D, 11:D, 12:DL,
13:L, 14:L, 15:LB, 16:B, 17:B, 18:B.

In the case  A[i]=18 all branches  had been handled and this last B move
resets the cube to the state of the node where it came from at the
current depth -1. We reset A[i] to 0, increment i and goto 3. then.

If A[i]<18 increment A[i].Then compute the indices for the heuristic
tables using the triple (x,y,z) and check, if the current depth (which
is L1-i) plus the tablevalue v (which is a heuristic for the minimum
length to solve the cube from this state) exceeds L1, which is
equivalent to v>i. If that happens for any of the three tables, we prune
that branch and goto 2., to generate the next node of the same depth.

If v<=i, we first check, if i=0. In this case the current depth is the
iteration depth L1 and we have found a solution for phase1, because v=0
only can happen for all three heuristic tables, when we are in state
(x0,y0,z0). Goto phase2 then.
But if i>0, we have to generate the node at the current length + 1. We
decrement i and goto 2.  

3. If i==L1 now, we have searched the complete tree with lenght L1. In
this case we increment L1, set A[i]=0 and goto 2. to build again our
first depth-one node. 
If i<L1 we also goto 2. to build our next node at depth L1-i.

If you analyze the preceeding phase1 algorithm you will see that it is
indeed just an IDA* with lowerbound heuristic functions based on tables.

When we have found a solution in phase1, from the list A we construct
the maneuver sequence, apply it to the cube and are in <U,D,R2,L2,F2,B2)
now. With the help of new mapping functions we construct a triple
(a,b,c), where a,b, and c represent now the permutation of the 8
corners, the 8 edges outside the UD-slice and the four edges in the
UD-slice. Almost everything is analog to phase1, most important that we
have a maximum L2MAX for the iteration lenght L2 (except for the first
search in phase2), because we can assume L1+L2<N when we already have
found a solution with length N=L1'+L2'. Because of the maximum iteration
lenght the search can fail, in this case we go directly to 2. of phase1,
else we print out the solution and go to 2. of phase1.
Because N decreases and L1 increases, L2MAX decreases, and when we have
L2MAX=0 (we will not have time to wait for that in most cases) we have
found an optimal solution.

It seems very difficult to establish an upper bound for the maneuver
length for the algorithm except for the first solution, because the
maximum length in phase1=12 and in phase2=18.
If you still have any question about the algorithm, please ask. If
myself would be interested if you have any idea how to improve the
performance of the algorithm, using for examples symmetries of the cube
or the asymmetry of phase2.

Herbert



From cube-lovers-errors@oolong.camellia.org  Mon Jun  2 22:09:15 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id WAA04767; Mon, 2 Jun 1997 22:09:14 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Mon, 2 Jun 97 20:48:28 EDT
Message-Id: <9706030048.AA22542@sun34.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: cube-lovers@ai.mit.edu
Subject: Memory-Performance tradeoffs in (Korf 1997)

This is the third part of my series on Rich Korf's paper.  It covers
what I think is the most interesting part of the research, but
(intentionally) also the least rigorous.  Rich makes an attempt to
estimate how many positions will be examined by IDA* as a function of
the memory used by the heuristic.  I have to admit I may have missed
something here, but this is my take at understanding, explaining, and
a few queries about the result.

I plan at least one other message to clarify some of the points in the
previous parts.  But right now I will note the most glaring error,
which is that heuristic functions are actually guaranteed NOT TO
OVERESTIMATE the true distance to of a solution.  Thanks to Clive
Dawson for letting me know I said exactly the opposite.  Urk!

DEFINITIONS

Search will be undertaken on a problems in G, with |G|=N.  For x in G,
Depth(x) is the length of the shortest process to solve x.

A heuristic is a function h on G satisfying h(x) <= Depth(x) for every
position x in G.  The special heuristic h0(x)=0 is the "trivial
heuristic".

Work(h,Depth(x)) is roughly the total number of nodes visited in
searching for x using IDA* with heuristic h.  Roughly, because we
average over all the positions at that depth.

The average number of operators/generators applicable to a position is
called the branching factor b.  This is a constant over the positions
we will consider, and in the following I will write logb(x) for the
logarithm to the base b.

For most heuristics h, we partition the space G into a certain number
of parts, such that h(x) is a constant over each part; we write
Part(h,x) for the part containing x and extend h to the parts by
writing h(Part(h,x))=h(x). We can use any partition to define such a
heuristic h by defining

    h(Part(h,SOLVED))=0, and for x not in Part(h,SOLVED),

    h(x)=1 + max over all y in Part(h,x),
                min over all neighbors z of y,
                   h(z).

The number of parts of a partition defining h is called Size(h).  We
make a table of size Size(h) once containing the heuristic values of
the parts, and look up h(x)=h(Part(h,x)) over the course of the
search.

If each primitive operator maps parts to parts, then the "max" in the
definition of h(x) is over only one value.  This occurs, for instance
if "primitive"="group generator" and Part(h,x)="Coset of a subgroup
with respect to x".  Size(h) is then the order of the subgroup.

ESTIMATES

These are the rough estimates that Rich uses (as I understand them).

Most of these exponential-growth spaces have one depth
       Mode(Depth) = Mode({Depth(x) : x in G})
at which most of the nodes appear, and almost all of the nodes appear
very close to that depth (so the answer doesn't change much if we take
Mean or Median instead of Mode.  Rich uses Mean).  If the branching
factor stays nearly constant to the end, we should find that

       Mode(Depth) ~ logb(N).                   (#1)

When heuristics are defined on parts, and the branching factor
of the partition space is the same as the branching factor of the
whole space,

       Mode(h) ~ logb(Size(h))                  (#2)

since there are Size(h) partitions.

If we examine all positions up to depth d, there are about b^d of
them, so

       Work(h0,d) ~ b^d.                        (#3)

Finally, we might hope that in searching with a consistently
underestimating heuristic, we might be doing something like examining
all the positions up to the amount of underestimation, followed by a
non-branching search to the end:

       Work(h,d) ~ Work(h0,d-Mode(h)).          (#4)

THE RESULT

Using these estimates we can calculate

      Mode(Work(h,Depth(x))) ~ Work(h,logb(N))                 by #1
                             ~ Work(h0,logb(N)-Mode(h))        by #4
                             ~ Work(h0,logb(N)-logb(Size(h)))  by #2
                             ~ b^(logb(N)-logb(Size(h)))       by #3
                             = N / Size(h).

This is the really fundamental result of Rich's paper.

ERRORS

There are some ways in which this model is known to be flawed.  Rich
notes that actually

#4   Work(h,d) > Work(h0,d-Mode(h)),

by over two orders of magnitude.  He conjectures that a "locality of
understimation" effect causes most of the search to be concentrated in
the parts of the space for which h is worst.

He hopes this will be balanced out by

#2    Mode(h) > logb(Size(h))

because the branching is not perfect.  This effect is stronger on the
branching on the parts of h than on G, because there are fewer of the
former.  He finds that under the effects of these two errors, the
answer is off by a factor of 1.4 for his experiments.

I am wondering about a few other effects.  For one thing, I am not at
all sure how well the heuristics model the exponential behavior of the
search space, with a strongly defined mode.  I think that if
Mode!=Mean, you find the entire argument falls apart (but I may be
missing something).  I would like to know something more like the
curve for the heuristics, rather than just the mean.

Second, Rich is combining heuristics based on partition search to form
a different kind of heuristic.  Say we form h=max(h1,h2), where h1 and
h2 have about the same size.  Estimate #2 would say

       Mode(h) = logb(Size(h))
               = logb(2 Size(h1))
               = Mode(h1) + logb(2).

But I think the strongly modal behavior of these heuristics may not
allow the mode to be increased this easily.  We might find that
Mode(h)=Mode(h1), but with a more pronounced peak.

My third quibble is on whether the branching factor b is the same for
the coset spaces as for the whole space G.  I'm concerned that some
generators might lie in the subgroup used to form a heuristic, so they
would map a coset to itself, lowering the effective branching factor
for heuristics.  But I'm not sure about this--mapping how close this
estimate holds is a ripe direction for research.

Dan


From cube-lovers-errors@oolong.camellia.org  Mon Jun  2 22:08:35 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id WAA04759; Mon, 2 Jun 1997 22:08:34 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Mon, 2 Jun 97 18:58:59 EDT
Message-Id: <9706022258.AA28762@sun13.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: cube-lovers@ai.mit.edu
Subject: Indexing (was Re: miscellaneous comments)
In-Reply-To: <199706021710.KAA21887@denali.cs.ucla.edu>

Rich Korf wrote:

>    Here's the indexing problem.  Write out all the permutations of
> say 4 elements, 24 in all, in lexicographic, or any other,
> order. Now number the permutations from 0 to 23.  The problem then
> is given a permutation of N elements, compute its sequential number
> in your ordering scheme.  The obvious algorithms do this in roughly
> N^2 time, but it would be nice to able to do it faster.

I thought everyone knew this, but it seems not.  The procedure is
this: Make a fresh copy of P and its inverse Pinv, represented as
arrays on [0..N-1].  For k from N-1 down to 1, do

            i = Pinv[k];
            Pinv[P[k]] = i;
            P[i] = P[k].

The loop invariant is that P[0..k] is a permutation on [0..k] and
Pinv[0..k] is its inverse.

Conceptually, you are exchanging P[k-1] with P[Pinv[k-1]] to turn P
into the identity permutation.  But instead, you leave stuff in the
part of the P and Pinv arrays that you don't need to use because you
decrement k.  That stuff you leave records what exchanges you (would
have) made, so it encodes the index in a variable base: 0<=P[k]<=k and
you take the sum (P[k] k!) to get the index.  The permutation parity
is |{k : P[k]==k}| mod 2.

This requires O(N) operations on integers of size O(N log N), so the
time is O(N^2 log N).  But if we don't charge extra for the integer
size, it's an O(N) algorithm.  If you're using the index to lookup
something in a table that exceeds the integer size you usually need to
split the index into integer-sized subindices anyway (one tells you
which byte in the file, another tells you which file on the disk,
another tells you which disk...).

Oh, and you can run the algorithm in reverse to convert the
variable-base index back into a permutation.  (This part doesn't need
Pinv).  If you fill the P[k] with Random[0..k] and do this, you get a
fair shuffle.  (I wish programs would randomize their cubes this way.
Somehow I never trust the 100 random turns.)

I think the only reason people don't think of this balking at the
initial overhead of making a copy of P and calculating its inverse.
But then we go and spend quadratic time searching for the bits and
pieces we need.

Dan
[ Still working on part 3...]


From cube-lovers-errors@oolong.camellia.org  Fri Jun  6 01:56:45 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id BAA09522; Fri, 6 Jun 1997 01:56:45 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-ID: <33974835.29FE@hrz1.hrz.th-darmstadt.de>
Date: Fri, 06 Jun 1997 01:13:57 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
X-Mailer: Mozilla 3.0 (Win95; I)
MIME-Version: 1.0
To: cube-lovers@ai.mit.edu, Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Re: More on Korf's method
References: <Pine.WNT.3.96.970605083050.-409527B-100000@ER123A.PSTCC.CC.TN.US>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Jerry Bryan wrote:
> Is this correct -- that is, does
> the Kociemba algorithm guarantee us an optimal solution only after the
> solution is derived entirely in phase1? 

It's like you supposed. I see no way, how to *guarantee* an optimal
solution before that, though in many cases you *find* an optimal
solution much earlier. You may have more than one minimum maneuver, and
the chance is good, that one of these maneuvers has a tail with
maneuvers only out of <U,D,R2,L2,F2,B2>.

Herbert



From cube-lovers-errors@oolong.camellia.org  Wed Jun 11 00:38:42 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id AAA12658; Wed, 11 Jun 1997 00:38:41 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
From: SCHMIDTG@iccgcc.cle.ab.com
Date: Wed, 11 Jun 1997 0:35:55 -0400 (EDT)
To: cube-lovers@ai.mit.edu
Message-Id: <970611003555.21417ec3@iccgcc.cle.ab.com>
Subject: Re: Detailed explanation of two phase algorithm

Herbert Kociemba wrote:

>SCHMIDTG@iccgcc.cle.ab.com wrote:
>>
>> And if we want to show that all depth one nodes will be pruned when
>> we are at some search depth d where 1 < d < h[0] we would need to show
>> that:
>> 
>> 1.9     1 + h[1] > h[0]
>> 
>
>Why do you say 1 < d < h[0] and not  d = 1?

Oops, I think that should have been 'D' and not 'd'.

>[...slightly different restatement of earlier proof omitted...]

After examining this once again, I have now satisfied myself
that it is correct.  It's just that for some reason, I seem to
find the result rather counter-intuitive.  But that makes the
result all the more interesting.

So I think this may yet me another case where the phase1 algorithm
differs slightly from IDA*, but the difference is not significant
since, in this case, one is able to prove a special property of the
heuristic that demonstrates that the number of nodes explored by the
two algorithms is comparable.  At this point, I think we can wind down
this thread, (I do hope others on this list have found it interesting)
and I will still continue to think of possible ideas for improving
the algorithm.

I do have one last question regarding the pruning tables.  While
the three tables used in phase1 are clear, I do not recall reading
a description of the tables that are used in phase2.

I examined Dik Winter's program and he seems to have a few more
"maximum move" (i.e. "mm" tables) than I expected, namely:

phase1
------
mm_twists[]
mm_flips[]
mm_choices[]
/* and the following "mixed" tables */
mm_tf[][]	/* twist & flip */
mm_tc[][]	/* twist & choice */
mm_fc[][]	/* flip & choice */

phase2
------
mm_eperms[]	/* edge perms */
mm_cperms[]	/* corner perms */
mm_sperms[]	/* slice orderliness */
/* "mixed" tables follow */
mm_cs[][]	/* corner perms & slice orderliness */
mm_es[][]	/* edge perms and slice orderliness */

Are you using the same tables?  Or are the "mixed" tables ones that Dik
added to the algorithm?  It appears that Dik was able to use them because
he had a machine with more memory at his disposal than your 1MB Atari ST.
His program can be built with or without the "mixed" tables and is 11MB
with them.  He also mentions that the small program finds a reasonable
solution in 30 minutes whereas the large program finds it in only a
few seconds.

I have also been studying his code to try to understand how he generates
these tables.  He does not seem to be using breadth-first-search to
fill in these tables as Korf does.

I will be interested in looking at your new program when it becomes
available.

Thanks again for your patience.

Best regards,

-- Greg


From cube-lovers-errors@oolong.camellia.org  Wed Jun 11 16:11:24 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id QAA14364; Wed, 11 Jun 1997 16:11:24 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-ID: <339EF3BF.766D@hrz1.hrz.th-darmstadt.de>
Date: Wed, 11 Jun 1997 20:51:44 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
X-Mailer: Mozilla 3.0 (Win95; I)
MIME-Version: 1.0
To: cube-lovers@ai.mit.edu
Subject: Re: Detailed explanation of two phase algorithm
References: <970611003555.21417ec3@iccgcc.cle.ab.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

SCHMIDTG@iccgcc.cle.ab.com wrote:
> I do have one last question regarding the pruning tables.  While
> the three tables used in phase1 are clear, I do not recall reading
> a description of the tables that are used in phase2.

In phase2, the state of the cube also is described by a triple (x,y,z),
in this case 0<=x<8! describes a permutation of the 8 corners, 0<=y<8!
describes a permutation of the 8 UD-slice edges and 0<=z<4! describes a
permutation of the middleslice edges. Because the overall permutation
must be even, only half of the triples belong to physical cubes. We
could correct this, by defining the z coordinate to describe one of the
12 possibilities for the locations of two middleslice edges - the other
two edges will then be corrected automatic. But there are good reasons
not to do so (which I think is not necessary to explain here).

> I have also been studying his code to try to understand how he generates
> these tables.  He does not seem to be using breadth-first-search to
> fill in these tables as Korf does.
> 
I only use the "mixed" tables. How to generate the tables is quite
obvious and though I don't know how Dik does it I'm sure it is similar:

1. On initialisation set all elements of the table to 0xf (we use four
bits per entry), only the element belonging to (x0,y0,z0) is set to 0.
Set  L=0, n_done=1, n_old=1 (n_done denotes the number of valid
tableentries).
2. Check all elements of the table one after the other. If an entry is
0xf, do nothing. If the entry is L, compute the the 18 possible "child
nodes" and check, if the corresponding tableentry is 0xf. Only in this
case set it to L+1 and increment n_done.
3. Check if n_done=n_old. In this case we are ready. Else increment L,
set n_old=n_done and goto 2.

> I will be interested in looking at your new program when it becomes
> available.

I'm writing too much to this mailing list and do not work at  my
windows-help! The program itself is ready. I did a two hours run on each
of Rich Korfs 10 random cubes on a Pentium133 with 16MB RAM and the
result were really pleasing: The generated maneuver lenghts were on the
average less than 1 move away from Rich Korfs optimal solutions
(exactly: 9 moves more for the 10 cubes).

Best regards,

Herbert



From cube-lovers-errors@oolong.camellia.org  Wed Jun 18 18:43:38 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id SAA04738; Wed, 18 Jun 1997 18:43:37 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-ID: <33A84C0E.94@hrz1.hrz.th-darmstadt.de>
Date: Wed, 18 Jun 1997 22:58:54 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
X-Mailer: Mozilla 3.0 (Win95; I)
MIME-Version: 1.0
To: cube-lovers@ai.mit.edu
Subject: Windows95 program now available
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

The Windows95 program which implements my algorithm to solve Rubik's
Cube is now availabe at

http://home.t-online.de/home/kociemba/cube.htm

It not only solves Rubik's cube, but also does a few other nice
things...


Herbert


[ Moderator's note: This program is also available in the Cube-Lovers Archive.
  See: ftp://ftp.ai.mit.edu/pub/cube-lovers/contrib/cubexp10.zip
				- Alan ]

From cube-lovers-errors@oolong.camellia.org  Mon Jun 30 15:09:03 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id PAA18257; Mon, 30 Jun 1997 15:09:02 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Mon, 30 Jun 1997 14:08:40 -0400 (Eastern Daylight Time)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Inverses of Local Maxima
To: cube-lovers@ai.mit.edu
Reply-to: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Message-id: <Pine.WNT.3.96.970630120803.-397377S-100000@ER123A.PSTCC.CC.TN.US>
MIME-version: 1.0
Content-type: TEXT/PLAIN; charset=US-ASCII
X-X-Sender: jbryan@PSTCC6.pstcc.cc.tn.us

One of the oldest unsolved problems on Cube-Lovers (aside from God's
Algorithm itself) has to do with inverses of local maxima.  It seems
obvious that the inverse of a local maximum also ought to be a local
maximum.  But is it necessarily so? 

In Symmetry and Local Maxima, Jim Saxe and Dan Hoey suggest that it may
not be.  Their example is UFF, which can end with F or F' because we can
write it as UF'F'. But the inverse is F'F'U', which can only end with U'
Hence, there are very simple positions where the number of q-turns with
which the position can end is different than the number of q-turns with
with the inverse of the position can end.  If the same thing should
happen with a local maximum, then the inverse would not be a local
maximum.

On the other hand, for all known local maxima in G, the inverse is also
a local maximum.  What are we to think? 

I have some small progress.  I can report that for the corners-only
group, there are local maxima for which the inverse is not a local
maximum.  The results were obtained with my new Shamir program. 

For each position x, we define E(x) to be the set of all quarter-turns
with which a minimal process for the position can end.  As an example,
if x=UFF, then E(x)={F,F'}.  

E(x) is a subset of Q, the set of twelve quarter-turns, or equivalently
it is an element of P(Q), the power set of Q.  As such, it is
conveniently represented in my program as a bit-string of twelve bits. 
In this notation, we would say that a position x is a local maximum if
E(x)=Q or if |E(x)|=12. 

We also define S(x) to be the set of all quarter-turns with which a
minimal process for a position can start.  In this notation, for x=UFF
we would say that |S(x)|=1 and |E(x)|=2.  So the general question for
local maxima becomes the following:  if |E(x)|=12, does it necessarily
follow that |S(x)|=12?

My program calculates S(x) and E(x) as follows.  Any breadth-first
search may be characterized as calculating products of the form z=xy for
suitable choices of x and y.  Most typically, x comes from Q[n], the set
of all quarter-turns of length n, and y comes from Q[1], the set of all
quarter-turns of length 1.  But in my more general Shamir program, x
comes from Q[m] and y comes from Q[n] to form products of length m+m. In
any case, S(z) is the union of S(x) over all x which can be a part of a
product which produces z, and E(z) is the union of E(y) over all y which
can be a part of a product which produce z.  For each q in Q, we
initialize with S(q)=E(q)={q} and go from there. 

Here is a portion of a printout from my program.


 |x|  |E(x)| |S(x)|  M-Conjugacy  Positions
                        Classes  

  0      0      0          1          1
  1      1      1          1         12
  2      1      1          2         96
  2      2      2          3         18
  3      1      1         12        576
  3      1      2          3         96
  3      2      1          3         96
  3      2      2          4         96
  3      3      3          2         60

As you can see, the effect pointed out by Saxe and Hoey first shows up
three moves from Start, where there are six positions unique up to
M-conjugacy where |S(x)| is not equal to |E(x)|. (Actually, three of the
six positions are just the inverses of the other three.)

The first local maxima are six moves from Start in the corners-only
group.

 |x|  |E(x)| |S(x)|  M-Conjugacy  Positions
                        Classes  

  6     12     12          8        114

As you can see, there are 114 local maxima of which 8 are unique up to
M-conjugacy.  However, for all 8 of them, the inverse is also a local
maximum so we discover nothing new. 

The new discovery occurs 7 moves from Start.

 |x|  |E(x)| |S(x)|  M-Conjugacy  Positions
                        Classes  

  7     12      8          4        120
  7     12     10          3        144
  7     12     12         14        336

As you can see, there are 21 local maximu unique up to M-conjugacy.  For
14 of them, the inverse is also a local maximum.  But for the other 7,
the inverse is not a local maximum.  In 4 cases, we have |S(x)|=8, and
in 3 cases we have |S(x)|=10. 

Here follow summaries for local maximum up to a distance of 11 moves
from Start.

 |x|  |E(x)| |S(x)|  M-Conjugacy  Positions
                        Classes  


  8     12      6         14        576
  8     12      8         12        576
  8     12     10         86       4128
  8     12     11         13        624
  8     12     12        272      12012

  9     12      4         26       1152
  9     12      6         31       1344
  9     12      8         24       1152
  9     12     10         14        576
  9     12     12        131       5976

 10     12      2         14        576
 10     12      4         88       4032
 10     12      6        218      10368
 10     12      8        144       6336
 10     12     10        168       8064
 10     12     12        140       5664

 11     12      4        384      18432
 11     12      6       2687     128688
 11     12      8       5550     264192
 11     12     10       5014     240576
 11     12     12       3617     166224


 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7198
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990







From cube-lovers-errors@oolong.camellia.org  Sat Jul  5 20:21:49 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id UAA00582; Sat, 5 Jul 1997 20:21:48 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-Id: <199707052054.QAA25375@life.ai.mit.edu>
Date: Sat, 5 Jul 1997 16:58:20 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: optimal cube solver

the recent work by rich korf on finding optimal solutions has prompted
me to try my hand at writing an optimal cube solving program.  so far,
i've done this for the face turn metric.  a description of my program
follows.

let  H  denote the intermediate subgroup  <U, D, F2, R2, B2, L2>  which
we've seen before.  we'll use distances to this intermediate subgroup
for our pruning tables (or "pattern databases").  calculating these
distances involves doing a breadth first search on the coset space
H \ G , and storing these distances in memory.  (i've written this as
a right coset space, rather than a left coset space.)  this search has
been done several times, by dik winter and by myself.

some review.  positions in  H  are characterized by the following.
corners cannot change orientation; their  U  or  D  facelet remains on
the  U  or  D  face.  similar, edges cannot change orientation.
furthermore, the four U-D slice edges remain in the U-D slice.
therefore, cosets in  H \ G  are described by triples  (c, e, l),
where  c  denotes corner orientation,
       e  denotes edge orientation
and    l  denotes the location of the four U-D slice edges.

there are  3^7 = 2187 possible corner orientations,
          2^11 = 2048 possible edge orientations
         / 12 \
and      \  4 / = 495 possible U-D slice edge locations.

all combinations are possible, so there are  2187 * 2048 * 495 =
2217093120  cosets.  since this is too many configurations to store
in memory, we use symmetry to to reduce this number.

there are 16 symmetries of the cube that preserve the U-D axis, and
therefore the intermediate subgroup H.  rather than store all the
cosets, we'll just store one of each up to symmetry.  actually, this
is slightly more complicated than necessary; instead, we could just
divide the corner coordinate by symmetry.  this is what i did in my
message of january 7, 1995.  however, i encountered a pitfall along
the way.  i discovered (very late in the development stage) the need
for very large transformation tables.  although i continued with the
same approach at that time, i gave two options for overcoming this
problem:

>       i) only use the 8 symmetries that preserve my choice of
>          12 edge facelets.
> 
>      ii) combine the two coordinates edge and location into a single
>          coordinate and divide this coordinate by the 16 symmetries.

of these, clearly the second is the better choice, since it utilizes
more symmetry.  this new edge coordinate has  2048 * 495 = 1013760
possibilities.  up to symmetry, there are 64430 possibilities.  we
need room for  64430 * 2187 = 140908410  cosets in memory.  for each
of these, we store its distance to the identity coset.  this is an
integer between 0 and 12 (inclusive), so each is stored in half a
byte.  thus the whole table requires 67 megabytes.

essentially, what we're doing here is changing coordinates from
(c, e, l)  to  (c, e', s),  where  e'  is our new edge coordinate,
and  s  is a symmetry coordinate.  some cosets have multiple
coordinates in this new system, but that causes no harm.

a breadth first search of this space takes under 11 minutes.  the
increase in speed is partially due to a more powerful computer, and
partially due to switching to "backward searching" (or "bidirectional
search") at the optimal time.

we'll also use distances to the intermediate subgroups
<F, B, U2, R2, D2, L2>  and  <R, L, F2, U2, B2, D2>.  we don't need to
store additional coset spaces, since we can derive that information
from our first coset space.  note that the cube rotation C_UFR takes
the subgroup  <U, D, F2, R2, B2, L2>  to the subgroup
<F, B, U2, R2, D2, L2>.  therefore it transforms the first coset space
into the second coset space.  furthermore, it preserves distances, so
the one pattern database suffices for all three applications.

an attractive feature of this approach is that it uses the 16
symmetries to reduce the size of the pattern database, and then uses
the remaining symmetry of the cube in applying it in different
orientations.

these are the only pruning tables my program currently uses.  note that
they cannot "see the entire group".  specifically, let
H_0 = <U, D, F2, R2, B2, L2>,  H_1 = <F, B, U2, R2, D2, L2>,
H_2 = <R, L, F2, U2, B2, D2>,  and let  T  denote the intersection of
these three subgroups.  for a given position, the three distances to
these subgroups depend only upon the corresponding coset in  T \ G .
thus  T  might be thought of as a "target subgroup".

this target subgroup  T  is interesting.  it consists of those positions
that "look like" they're in the "square group"  <F2, L2, U2, B2, R2, D2>,
i.e.  F  and  B  colors mix only with each other, and similarly for
R  and  L , and also for  U  and  D.  however, this is strictly larger
than the square group; it contains the square group as a subgroup of
index 6.

the searching is done in the way that korf describes as "IDA*" (or at
least the "ID" part of that terminology).  we traverse the tree of all
sequences of length 1, hoping to find a solution.  that generally fails,
so we continue to sequences of length 2, and so forth, until a solution
is found.  the "A*" part of the algorithm is to use the pruning tables
to avoid searching large parts of the tree that are guaranteed not to
bear fruit.

in his paper, korf uses the expected value of his heuristic functions to
get an estimate of how effective they are at pruning the search tree.
actually, he should subtract 1 from this expected value, since we must
generate (at least partially) the top node of a subtree that gets pruned.
this is only a rough estimate; getting a more precise figure is a delicate
matter which i won't address here.  korf reports an expected value of 8.878.
i generated 10 million random cubes (i did not use the long sequence of
random twists method) and got an expected value of 9.941.

my program generates slightly more than 500000 nodes per second.  korf
generates them at 700000 per second, so i've got more overhead per
node.  however, it generates many fewer nodes, since it prunes the
search tree more efficiently.

i solved korf's ten random cubes, and found all minimal solutions,
rather than stopping at the first.  this entailed one complete search
through length 16f, three through length 17f and six through length 18f.
the position at distance 16f has a unique minimal solution, as do the
three positions at distance 17f.  of the six positions at distance 18f,
one has a unique minimal solution, one has 3 minimal solutions, two
have 4 minimal solutions and two have 6 minimal solutions.  the total
run time for these was just under 198 hours.  korf estimates 4000 hours
for the same search, so on these positions, my program is twenty times
as fast.  my computer has a 200 MHz pentium pro processor, and is
configured with 128 megabytes of RAM.

i'd expect a similar increase in performance for most positions, but
not all.  for example, positions inside the target subgroup  T  run
very slowly, as do positions very close to it.  hopefully, most of
these are close enough to start, so that searches don't have to go very
deep.  i suspect that there are probably also positions that give korf's
program difficulty.

as you can see, i've made only minor modifications to korf's method.
the only differences are:
1. use different pattern databases that allow more efficient pruning.
2. apply the same pattern database in multiple orientations.
3. allow a target subgroup larger than just the identity.

it's clear that more experimentation is needed with different pattern
databases.  for any subgroup  K  of  G , we could consider distances
to that subgroup.  it seems likely that we want small subgroups, so
that the average distance is large.  for this reason, using symmetry
to reduce the size of the database is an important tool.  i encourage
others to experiment with different subgroups.

more results to come ...

mike



From cube-lovers-errors@oolong.camellia.org  Mon Jul  7 02:22:55 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id CAA04972; Mon, 7 Jul 1997 02:22:54 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-Id: <199707070459.AAA17039@life.ai.mit.edu>
Date: Mon, 7 Jul 1997 01:04:35 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: symmetry reductions for superflip

a simple counting argument shows that some cube positions are at least
18 face turns from start, and thus the diameter of the cube group is
at least 18f.  in january 1995, i showed, by exhaustive search,
that the position "superflip" is exactly 20 face turns from start.
therefore the diameter is at least 20f.  this gave the first
improvement to the lower bound obtained by the counting argument.

the searching method i used at the time was my version of kociemba's
algorithm.  although my symmetry reductions fit together quite well
with kociemba's algorithm, this might not be the most appropriate
searching method to use for this purpose.  (i guess i could have
hacked it not to bother looking for solutions longer than 19f.
i don't remember why i didn't do this.)

my new optimal solving program can do an exhaustive search in much
less time.  the symmetry reductions are similar, but much simpler.
i will try be more coherent this time with my explanation, hopefully
without being overbearing.

the first thing to note is that dik winter found a maneuver for
superflip in 20f:

  F B U2 R F2 R2 B2 U' D F U2 R' L' U B2 D R2 U B2 U   (20f)

therefore our concern is with searching for maneuvers of length
at most 19f.

there are three ways to transform a maneuver for superflip to get
another such maneuver, which do not change its length:

1. we may conjugate the maneuver by any symmetry of the cube.
2. we may cyclically shift the maneuver; i.e. replace

      sequence_1 sequence_2     by     sequence_2 sequence_1

3. we may replace the maneuver by its inverse.

(in fact, we won't use 3 here, but it might be helpful elsewhere.)
our first result is

proposition 1.  any maneuver for superflip in 19f contains a 180 degree
                face turn.
proof.  if the proposition were false, then superflip would be an
        odd number of quarter turns from start, contradiction.  qed.

the relevance of this proposition is

proposition 2.  suppose that a maneuver for superflip contains a 180 degree
                face turn.  then it can be transformed, using the above
                tranformations, into a maneuver that begins with  U R2.
proof.  we first claim that the maneuver has two consecutive "syllables"
        such that the first contains a 90 degree face turn and the second
        contains a 180 degree face turn.  a "syllable" is a sequence of
        one or two face turns along the same axis; e.g. U D2.  by
        hypothesis, the maneuver has a syllable that contains a half turn.
        if the claim is false, then the preceding syllable contains no
        90 degree turns, and therefore consists only of half turns.  but
        then the syllable before that contains only half turns, by the
        same reasoning.  continuing in this way, we see that every syllable
        consists only of half turns.  therefore we have a maneuver for
        superflip consisting only of half turns.  this is a contradiction,
        so the claim is true.
             now, since the individual face turns within a syllable
        commute, we may suppose that the maneuver has a 90 degree face
        turn followed by a 180 degree face turn, which are along
        different axes, and thus are adjacent faces.  now we may
        conjugate by an appropriate symmetry of the cube to suppose that
        these turns are  U R2.  finally, we may cyclically shift the
        maneuver so that these are the first two turns.  qed.

proposition 3.  suppose that superflip is exactly 19 face turns from
                start.  then applying the sequence  U R2  to it brings
                us 2 face turns closer to start, i.e. 17f  from start.
proof.  apply proposition 1 and proposition 2.  qed.

we now know how to handle the case that superflip's distance from start
is exactly 19f.  if the distance is less than 19f, we use the following

proposition 4.  under any circumstances, applying the sequence  U R2
                to superflip brings us at least  1f  closer to start.
proof.  a minimal maneuver for superflip must contain a 90 degree twist,
        and we may suppose that the next face turned is an adjacent one.
        by cyclically shifting the maneuver, we may bring these two
        turns to the beginning.  furthermore, by symmetry, we may
        suppose that the first turn is  U  and the second is some twist
        of the  R  face.  now by applying  U  to superflip, we've moved
        1f  closer to start, and applying  R2  to this doesn't move us
        any further from start, since it either combines with, or cancels
        the next turn in the minimal maneuver.  qed.

putting this all together, we get our desired result.

proposition 5.  suppose that superflip is within 19f of start.  then the
                position  superflip U R2  is within 17f of start.
proof.  this is just combining props 3 and 4.  qed.

i don't claim that these are the best reductions possible.  they
suffice for our purposes.

i tested the position  superflip U R2  (i.e. the position obtained by
first doing superflip, and then doing the sequence  U R2) with my
optimal solver.  my program took 2 hours and 40 minutes to exhaustively
search this position through 17 face turns (not including about 11
minutes to generate all the lookup tables).  there were no solutions.
thus superflip is exactly 20 face turns from start.  when i did the
search in january 1995, the run time was 6 days.  so we see quite a bit
of improvement.

mike


From cube-lovers-errors@oolong.camellia.org  Tue Jul  8 00:16:07 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id AAA07853; Tue, 8 Jul 1997 00:16:06 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Message-Id: <199707080413.AAA00423@life.ai.mit.edu>
Date: Tue, 8 Jul 1997 00:18:18 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: superfliptwist requires 20 face turns

i can now show that the pattern "superfliptwist" is exactly 20 face
turns from start.  this position was proposed as a likely antipode
of start by cubologist christoph bandelow.  in the german edition
of his book "einfuerung in die cubologie" he offered a prize for the
shortest maneuver for this pattern.  the prize was collected by rainer
aus dem spring, who found a maneuver in 22 face turns.  much later,
a maneuver of length 20f was found by herbert kociemba:

     D F2 U' B2 R2 B2 R2 L B' D' F D2 F B2 U F' L R U2 F'  (20f)

as one of the first applications of his ingenious searching algorithm.

i'll try not to be so verbose with my symmetry reductions this time.

first note that "superfliptwist" does not describe a unique position
of the cube; there are two possible orientations.  in this context,
i use the term "position" to refer to one of the 43252003274489856000
possible configurations, and the term "pattern" to refer to an
equivalence class of positions under symmetries of the cube.
(this concept has been discussed by dan hoey and jerry bryan as
the "real size of cube space" i.e. the number of patterns.)

the following two facts are easily verified:

* superfliptwist commutes with the square of each face turn.
* it does not commute with 90 degree slices (e.g.  U D') or 90 degree
  antislices (e.g.  U D), however, if  A  is a 90 degree slice or
  antislice, then
                    A  superfliptwist  A^(-1)

  is also superfliptwist, but in the other orientation.

these facts lead to the importance of the following

proposition.  superfliptwist is not in the subgroup generated by slices
              and antislices.  (note that this group contains all squares
              of face turns.)
proof.  we may ignore the corners and just show that all edges cannot be
        flipped in this subgroup.  to do this, we choose dominant facelets
        on the 12 edges as follows: choose the U or D facelet of the edges
        in the R-L slice, the R or L facelet of the edges in the F-B slice
        and the F or B facelet of the edges in the U-D slice.  now we may
        define the flip of an edge that is not in its correct location.

        all edges start in the correct orientation.  a 90 degree slice or
        antislice along the U-D axis changes the orientation of all eight
        edges in the F-B slices and R-L slices.  similarly, a 90 degree
        slice or antislice along the F-B or R-L axis flips all edges in
        two different slices.  within this subgroup, either all edges in
        a given slice are flipped, or none are flipped, and furthermore,
        the number of the three slices with flipped edges is even, i.e.
        0 or 2.  however, superfliptwist has all three slices with
        flipped edges, so it is not in this subgroup.  qed.

now consider the first syllable of a minimal maneuver for superfliptwist.
("syllable" was defined in my previous message.)  if this is a single
180 degree turn, then we may cyclically shift this to the end of the
maneuver.  similarly, a slice squared may also be shifted to the end
of the maneuver.  furthermore, 90 degree slices and or antislices may
also be shifted to the end of the maneuver, with only the mild effect
of changing which orientation of superfliptwist we're doing.  from the
proposition, we eventually find a syllable which is not of these types,
and is therefore of type  U  or  D2 U.  in the case of  D2 U , we may
shift the  D2  to the back of the maneuver, so we may suppose that the
first face turn is  U .  furthermore, by conjugating by the cube rotation
C_U, if necessary, we may suppose that our maneuver solves our preferred
orientation of superflip.  the second face turn is in a different syllable,
so it is an adjacent face.  conjugating by C_U2, if necessary, brings this
face to either  R  or  F.  therefore we may suppose that the first two
face turns are one of the six sequences

     U R ,   U R2 ,   U R',   U F ,   U F2   or  U F' .

to show that superfliptwist is not within 19f of start, i tested the
six patterns obtained by applying these sequences to it.  it took my
program 7.5 hours to exhaustively search all of these through 17f.
(these positions ran a bit faster than most of the others i've tested.
this is partly because superfliptwist is 15 face turns from my "target"
subgroup, so larger parts of the search tree are pruned.)  no solutions
were found, so superfliptwist requires 20 face turns.

i also let the first situation run partially through depth 18f.  in about
4 and a half hours, it found a solution which yields

  U R F' B U' D' F U' D F L F' L' U R D F U R L  (20f, 20q)

this is automatically minimal in the quarter turn metric!

mike


From cube-lovers-errors@oolong.camellia.org  Wed Jul 16 10:18:34 1997
Return-Path: cube-lovers-errors@oolong.camellia.org
Received: from oolong.camellia.org (localhost [127.0.0.1]) by oolong.camellia.org (8.6.12/8.6.12) with SMTP id KAA12915; Wed, 16 Jul 1997 10:18:33 -0400
Precedence: bulk
Errors-To: cube-lovers-errors@oolong.camellia.org
Date: Wed, 16 Jul 1997 09:44:21 -0400 (Eastern Daylight Time)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: No Local Maxima 11q from Start
To: cube-lovers@ai.mit.edu
Message-id: <Pine.WNT.3.96.970716085137.-650973C-100000@ER123A.PSTCC.CC.TN.US>
MIME-version: 1.0
Content-type: TEXT/PLAIN; charset=US-ASCII
X-X-Sender: jbryan@pstcc6.pstcc.cc.tn.us

My new Shamir program has now generated the entire search tree for the
standard cube group G up to 11q from Start.  This search was
accomplished once before using my old tape spinning programs, so there
is limited new information. 

One good result is that all the numbers match between the two programs. 
The matching results were obtained using different programs,
implementing different algorithms, in different programming languages,
on different hardware platforms, and under a different operating
systems.  So I feel pretty good about the numbers.  They have been
posted before, so I won't post them again.  With problems this big, it
is always good to have some sort of independent verification because it
is impossible to verify anything by hand.

Another interesting result is in fact new.  The old program was only
able to determine local maxima up to 10q from Start while calculating
the 11q tree.  The new program is able to determine local maxima up to
the same distance from Start it is searching.  There are no local maxima
11q from Start.  I find this result somewhat surprising, since there are
four local maxima (unique up to M-conjugacy) 10q from Start.  The new
program did confirm the previously known 10q local maxima, but failed to
find any 11q local maxima.

In its search for local maxima, for each position x the program
calculates the set E(x) of quarter turns with which a minimal process
for the position can end.  We call |E(x)| the maximality of x, and a
position is a local maximum if its maximality is 12.  At a distance of
11q from Start, there exist positions with maximality values for every
number in 1..11.  This is the first time we have found any positions
with a maximality of 9 or 11.  (See my note of 16 June 1995, "10q Local
Maxima Search Matrix".)  There seem to be more positions with even
maximality values than odd, and a maximality of 11 is especially
interesting because such a position is "almost" a local maximum. 

I am disappointed in the speed of my program.  For this run, it
identified about 1100 patterns (representative elements of M-conjugacy
classes) per second.  This corresponds to about 50,000 positions per
second (about 48 times 1100).  The program is running on a Pentium P166
with 16MB memory under Windows/95.  My concern is that I have worked so
hard to make the program run in small amounts of memory that it is
running too slow.  I am now going to take out a few of the memory saving
techniques to see if I can speed it up a bit. 

The program is actually about 20MB, and runs successfully on a 16MB
machine due to the good graces of virtual memory.  In fact, I can
calculate out to 11q from Start even on an 8MB machine.  But trying to
calculate out to 12q from Start fails on the 16MB machine (the program
is the same size for 11q from Start and for 12q from Start because I am
storing all positions up to 6q from Start.  The program would only have
to be made larger if I were to try calculating 13q from Start or 14q
from Start.)

When I say the program fails at 12q from Start, I mean that the virtual
memory thrashes unmercifully, and therein lies an interesting tale.  Why
should the program be able to calculate 11q without thrashing, but
thrash so badly at 12q?  It has to do with the Shamir algorithm itself. 

Recall that we are producing products of the form ST in lexicographic
order.  To be specific, we are producing products of the from St in
lexicographic order for all t in T and merging the results.  S itself is
already in lexicographic order.  Think of processing a dictionary, and
thing of processing S in lexicographic order.  We essentially process
all the A's, followed by all the B's, then all the C's, etc.  There is
very good locality of reference as far as the virtual memory goes. 

Moving up to St, we might first process all the N's, then all the E's,
then all the Z's, etc, but there is still very good locality of
reference. There is an occasional big jump in where we are referencing
memory, but most of the time we reference elements of the set S which
are very close together in memory. 

When we calculate 11q from Start, S is the set Q[6] of positions which
are 6q from Start, and T is the set Q[5].  Because Q[5] is only about
1/9 as big as Q[6], the real memory working set to calculate Q[6]Q[5] is
only about 10% of the total virtual memory of the program, maybe about
2MB.  But when we move up to calculating 12q, we move up to Q[6]Q[6] and
the real memory working set becomes the whole 20M program.  This simply
doesn't work on a 16MB machine.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7198
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990



From cube-lovers-errors@mc.lcs.mit.edu  Tue Aug  5 19:12:26 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id TAA27472; Tue, 5 Aug 1997 19:12:26 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From Hoey@AIC.NRL.Navy.Mil Tue Aug  5 19:11:22 1997
Date: Tue, 5 Aug 1997 19:11:12 -0400
Message-Id: <199708052311.TAA13218@sun30.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: Cube-lovers@ai.mit.edu
Subject: Glyph patterns

Years ago I thought for a while on a taxonomy of some of the pretty
patterns.  Mark's bringing some of them up on the Megaminx has
reminded me of them.

My favorite class of pretty patterns is the "glyph" patterns.  These
are the patterns on which each face of the cube has facets of at most
two colors.  They include most of the pretty patterns we've discussed
on the list.  The "glyphs" here are the partition of the nine facets
into two colors, where we aren't concerned with which colors but with
the partition.  I call the part of the glyph that includes the face
center the "figure" and its complement the "ground".

There are only 51 glyphs up to the symmetry of the square, or 70 if we
distinguish chiral pairs.  Some of the common ones we have discussed
are blank, X, plus, dot, bar, T, slash, and H.  I recall seeing a
cubing book that assigns 26 of the glyphs to letters of the alphabet,
where you try to place all the letters of your favorite six-letter
word on the cube, or something like that.

Classification and analysis of glyph patterns is often simplified by
separating out the corner-glyph from the edge-glyph.  There are only 6
each of these subglyphs (up to symmetry), mostly determined by how
many "figure" facets of each type there are.

Name       0     1     2     D     3     4    
        +-----+-----+-----+-----+-----+-----+
        |.   .|X   .|X   X|X   .|X   X|X   X|
Corner  |  .  |  .  |  .  |  .  |  .  |  .  |
        |.   .|.   .|.   .|.   X|.   X|X   X|
        +-----+-----+-----+-----+-----+-----+
        |  .  |  X  |  X  |  X  |  X  |  X  |
Edge    |. . .|. . .|X . .|. . .|X . X|X . X|
        |  .  |  .  |  .  |  X  |  .  |  X  |
        +-----+-----+-----+-----+-----+-----+

So a type-2D glyph would have the corner-glyph 2 and the edge-glyph D.
There are two type-2D glyphs, called T and U.

An important subclass of the glyph patterns are the "isoglyphs", which
have the same glyph on all six faces.  We've talked about the 6-T,
6-plus, 6-X, 6-H, and 6-spot patterns.  Recall that you can twist just
two opposite corners of the cube--I think Hofstadter called this a
boson or something.  I was amused to find that there is just one other
6-corner isoglyph of the cube.

Another subclass are the "continuous" glyph patterns, in which the
glyphs on neighboring faces match along the edge.  That is to say, a
facet of an edge cubie and an adjacent facet of a corner cubie have
the same color if and only if the other facet of the edge cubie and
the adjacent facet of the corner cubie have the same color.  This
matching condition gives the 6-plus patterns much of their charm.

When every cubie of a continuous glyph pattern has either all "figure"
facets or all "ground" facets, we call the pattern a "reassembled"
glyph pattern.  In this case, we can envision the cube having been cut
apart into figure and ground cubies and put back together in a
different orientation.  Note that the reorientation may include a
reflection, as we see in the Pons Asinorum.

Some of the prettiest reassembled glyph patterns have corner type 4 on
all faces--I call them "path patterns", because you can consider them
a road map going around the cube.  In 1981 Dave Ackley found one he
called the "four-way street", which is the unique continuous type-41
isoglyph.  If you can find it, you know what I'm talking about.

I've been considering writing a program (or perhaps sparking someone
else's interest in writing a program) to count and classify all the
glyph patterns, possibly by using corner-edge reduction.  It might be
interesting to see if there is a set of nine cubes that exhibits all
51 glyphs, or if not what the smallest panglyphic set is.

Dan Hoey
Hoey@AIC.NRL.Navy.Mil


From cube-lovers-errors@mc.lcs.mit.edu  Wed Aug  6 11:16:57 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id LAA01366; Wed, 6 Aug 1997 11:16:57 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From reid@math.brown.edu Tue Aug  5 22:42:50 1997
Message-Id: <199708060239.WAA23888@life.ai.mit.edu>
Date: Tue, 5 Aug 1997 22:45:08 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: more patterns at distance 20f

i can also give three more patterns that are exactly 20 face turns from
start.  all three are very symmetric; they have 24 symmetries.  the
symmetry group is "H" in dan hoey's taxonomy.  in particular, all are
local maxima (in the quarter turn metric).  see hoey and saxe's
"symmetry and local maxima" (december 14, 1980) for more info about this.

the first pattern is the composition of superfliptwist with pons asinorum.
you may recall that i suggested this pattern to dik winter when he was
looking for positions that couldn't be solved in 20 face turns or less.
he did succeed in solving it in 20f, using kociemba's algorithm, but it
took much longer than most other positions did.

the other two are inverses of one another.  they can both be described
as the composition of superfliptwist with 6 H's.  however, the patterns
"6 H's" and "superfliptwist" each come in two orientations.  therefore,
fix your favorite orientation of 6 H's; now there are two different
orientations of superfliptwist which may be composed.  this gives two
distinct patterns, and the positions are inverses.

by symmetry, we may assume that the first face turn of a maneuver for
any of these positions is either  U  or  U2.  to confirm that the pattern
superfliptwist . pons asinorum   is not within 19f of start, we need to
search the positions

          superfliptwist . pons asinorum . U
and       superfliptwist . pons asinorum . U2

completely through depth 18f.  similarly, for the second pattern,
two complete searches through depth 18f were required.  the third
pattern is the same distance from start as is its inverse, so this one
doesn't require further testing.

my optimal solver did not find the minimal maneuvers for these, although
it certainly would have, if i'd let it continue searching long enough.
however, one can find 20f maneuvers using kociemba's algorithm:

   superfliptwist . pons asinorum:
   D' R' B' L2 U' L  B' D' R' D' B2 D2 B' U  D2 R2 F2 D' L' B'   (20f)

   superfliptwist . 6 H's:
   B' L2 D  B2 R' D2 F' L2 U' L' F' B  U' R  D' R2 F2 R2 U' D2   (20f)

it would be nice to find a position that was not within 20f of start.
of course, we don't know if any such positions exist.  my guess is that
they do, but that's only a hunch.  dik winter examined 9000 random
positions and found that they were all within 20f of start.  therefore
the positions we're looking for are extremely scarce.  i think that
looking at positions with a lot of symmetry seems to be the right way
to approach this.  i've tested some of the most symmetric positions,
but each that i examined was solved in 20f or less.

mike

From cube-lovers-errors@mc.lcs.mit.edu  Wed Aug  6 22:13:35 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id WAA05412; Wed, 6 Aug 1997 22:13:34 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From reid@math.brown.edu Wed Aug  6 22:12:07 1997
Message-Id: <199708070208.WAA08375@life.ai.mit.edu>
Date: Wed, 6 Aug 1997 22:14:21 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: optimal solver for quarter turns

i have my optimal cube solver working for quarter turns.  it seems to
be as effective as the face turn version.  some minimal maneuvers
it has found are

   cube in a cube in a cube
   U' L' U' F' R2 B' R  F  U  B2 U  B' L  U' F  U  R  F'  (20q)

   six X's, order 6
   F  U' L2 F' L' D  R  U' D  L' B  U2 F' L' D' F  D  R   (20q)

   ron's cube within the cube
   F  D' F' R  D  F' R' D  R  D  L' F  L  D  R' F  D'  (17q)

and it has also confirmed minimality of known maneuvers for several
other patterns.

mike

From cube-lovers-errors@mc.lcs.mit.edu  Thu Aug  7 10:59:18 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id KAA07805; Thu, 7 Aug 1997 10:59:17 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From reid@math.brown.edu Wed Aug  6 23:51:22 1997
Message-Id: <199708070348.XAA10924@life.ai.mit.edu>
Date: Wed, 6 Aug 1997 23:53:38 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: superflip requires 24 quarter turns

with my optimal solver, i can show that superflip is exactly
24 quarter turns from start.  this was already shown by jerry
bryan, so this confirms his result.

first some history.  david plummer gave a 28q maneuver for
superflip on december 10, 1980.  apparently there was no
improvement to this until january 1995, when i implemented
kociemba's algorithm for quarter turns.  after a lot of searching,
where i specified the initial sequence  R' U2 , it found

   R' U2 B  L' F  U' B  D  F  U  D' L  D2 F' R  B' D  F' U' B' U  D' (24q)

mark longridge notes that this sequence has a remarkable symmetry,
namely that it may be written as

   (R' U2 B  L' F  U' B  D  F  U  D'  C_-1)^2 ,

where  C_-1  denotes central reflection.

later in january 1995, i completed an exhaustive search for superflip
in 20 quarter turns, without finding any maneuvers.  i used my quarter
turn version of kociemba's algorithm, which took 29 cpu hours.  this
improved the lower bound of the diameter of the cube group to 22q.
the previous lower bound was 21q, obtained by a counting argument.

in february 1995, jerry bryan improved this result to show that superflip
is not within 22 quarter turns, and thus is exactly 24 quarter turns
from start.  this also improved the lower bound for the diameter to 24q.

we'll use symmetry to reduce the size of the search space dramatically.
consider three cases for a minimal maneuver for superflip.

1)  it contains a half turn (i.e. two consecutive quarter turns of the
    same face).
2)  it does not contain a half turn, but contains two consecutive turns
    of opposite faces.
3)  otherwise.

in case 1, as in the face turn situation, we may suppose that the first
three quarter turns are  U R2 .

in case 2, by cyclically shifting, we may suppose these two turns are
the first two.  if they form a slice (U D') then we may take the
first three quarter turns to be  U D' R .  if they form an antislice,
then we may take the first three quarter turns to be either  U D R  or
U D R' .

in case 3, i claim that we may find three consecutive turns of mutually
adjacent faces.  otherwise, if the first two faces turned were  U  and  R,
then we'd only be turning  U , R , D  and  L .  however, edges cannot
change orientation when only these faces are turned.  thus the claim holds,
and by cyclically shifting, we may suppose that these three faces are
U , R  and  F .  by symmetry, we may suppose that they're turned in that
order.  now we have eight cases:

     U  R  F      U  R  F'     U  R' F      U  R' F'
     U' R  F      U' R  F'     U' R' F      U' R' F'

we can eliminate two of these by using inversion.  inverting the case
U' R  F  gives  F' R' U .  conjugating this by the appropriate cube
reflection gives  U  R  F' , and these three turns can be cyclically
shifted to the beginning of the maneuver.  similarly, the case  U' R' F
can be transformed to the case  U' R  F .

thus ten cases remain.  to show that superflip is not within 22q of start,
these cases must be searched through 19q.  my program took 22 hours to
searched these completely, and no maneuvers were found.

iw would be nice to know all the minimal maneuvers for superflip.  the
branching factor is about 9.37, so an exhaustive search would take about
22 * (9.37)^2  hours, which is about 80 days.  this is feasible, but is
definitely a long term project.  i've already searched the first case,
(beginning with  U R2) which would seem to be the most likely, through 21q.
this took about 147 hours.  i expected it to find a lot of maneuvers, but
it only found 4, in two inverse pairs.  the first is equivalent to the
maneuver above, and the new one is

   U  R2 F' R  D' L  B' R  U' R  U' D  F' U  F' U' D' B  L' F' B' D' L' (24q)

mike

From cube-lovers-errors@mc.lcs.mit.edu  Fri Aug  8 11:22:01 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id LAA02825; Fri, 8 Aug 1997 11:22:00 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From kociemba@hrz1.hrz.th-darmstadt.de Fri Aug  8 09:15:32 1997
Message-Id: <33EB1ABE.1DC8@hrz1.hrz.th-darmstadt.de>
Date: Fri, 08 Aug 1997 15:10:22 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
To: Dan Hoey <Hoey@aic.nrl.navy.mil>, cube-lovers@ai.mit.edu
Subject: Continuous isoglyph patterns
References: <199708052311.TAA13218@sun30.aic.nrl.navy.mil>

Dan Hoey made some proposals concerning 2-colored cube patterns. The
"coninuous"-condition i find especially interesting. I added this
feature to my Cube Explorer program and found exactly 34 continuous
isoglyphs (plus the trivial solution). I don't know if there are any
among them, which have not been described somewhere else before.
Here are generators for the patterns (I searched only about 1 minute for
most generators of the patterns, so there is no claim for the maneuvers
to be optimal):

D F2 D' . R B2 R' D F2 D' R B2 R'  (12)
U . L' D' U B2 D U' L' U'  (9)
U2 L' B2 . F R' D' R2 D B2 F' U L  (12)
D' U . L' R B' F D' U  (8)
R2 D L2 U' B2 D' U2 . R' F' U R B' L' D' F L2 B2 R U'  (19)
F2 L2 U L2 U' F2 D . B L R' D' U' F' D2 F' R2 F R  (18)
B2 U' B2 D' B2 D . L' B2 F' U R D2 R' D' U' F U  (17)
L2 D2 B D2 B' D2 B L2 . D B R D2 F L2 D F' R'  (17)
B2 U' B2 L2 B2 U2 B2 U' D2 . R U R' D' L U F U' D' L  (19)
U R2 D . F' L D2 U2 R' D2 U2 F D' R2 U'  (14)
U B2 . L B F' L2 R' B' F D U2 L' B2 U'  (14)
D' U . F' U L' R B' U F D' U R'  (12)
U' B2 F2 L2 U B2 U' L2 F2 . B' U R' F D' R2 D2 R' F'  (18)
F2 R2 D R2 D U F2 D' . R' D' F L2 F' D R U'  (16)
D U2 R2 D' U' . R D B2 R2 B2 R2 D B2 D2 R U'  (16)
D U2 L2 U R2 U' L2 U . R' B2 L2 F' L2 B' R' F' L D U'  (19)
D2 U F2 D' L2 U R2 B2 . R B2 R2 U2 B' L2 D2 R2 D R' U'  (19)
D2 R B2 R . F L B' F U' R L' U' F' D2 F' L2  (16)
D' B2 F2 D' U L2 . F' L R' F' D U' R D B2 R  (16)
U' R2 F2 U2 . L' D2 B' L2 U' L2 D2 L U2 F' U2  (15)
L2 U2 R' . B' D U' B2 D' R' D L D2 F D U2 L2  (16)
U' F2 U . R U2 R2 U2 R' F' R2 F U' F2 U  (14)
U2 R2 F2 U B2 D' . L' F L' F L' F D B2 U  (15)
D2 R F2 L' D2 R . B D2 F' L2 U' R' D L F D L' D L'  (19)
D' L2 F2 L2 B2 R2 U F2 U2 . L' F R B D R U' L F' U2 F  (20)
B2 L2 R2 U B2 R2 D F2 U' . B F U2 R' B2 L2 D U' B' L' R'  (20)
U B2 U2 L2 U F2 R2 B2 U' L2 D2 F2 U' . B L2 R2 D2 U2 F'  (19)
L2 . R' B2 F2 D2 B2 F2 L2 R2 U2 R'  (11)
D U L2 B2 D U' . F' U F' R F2 R' F D' B2 L2 D' U'  (18)
L2 U' B2 F2 D . R D F' U' R2 B2 U' B D2 B' F' L U'  (18)
D F2 R2 F2 R2 U F2 . R F2 R D2 U' F L' F' L D  (17)
B2 R2 F' U2 D2 L2 R2 B . U' L R B' F U D B2 F2 R' F2  (19)
D' L2 R2 D2 B2 F2 U' . R' B' F D' U L R' F2 D2 U2 F'  (18)
B2 F2 L2 R2 D2 U2  (6)

If you copy and paste the maneuvers from this message to a text file,
you can load them into Cube Explorer and directly watch the results.

The response to my Cube Explorer 1.0 program showed me, that the
userinterface and the terminology of the program are confusing (if not
to say bad) and some features are missing which should be there.
I almost completed Version 1.5 now. When I put it to my homepage in a
few days, I will send another message.

--Herbert

From cube-lovers-errors@mc.lcs.mit.edu  Sat Aug  9 15:13:50 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id PAA08470; Sat, 9 Aug 1997 15:13:50 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From Hoey@AIC.NRL.Navy.Mil Sat Aug  9 15:09:29 1997
Date: Sat, 9 Aug 1997 15:09:01 -0400
Message-Id: <199708091909.PAA07964@sun30.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: kociemba@hrz1.hrz.th-darmstadt.de
Cc: cube-lovers@ai.mit.edu
Subject: Re: Continuous isoglyph patterns

Bravo, Herbert!  A very nice list.  It's surprising how many of them
are reassembled patterns, too.  Only the second and tenth are not
reassembled, and both fail by using a reassembled pattern to
camouflage a small distortion.  Pattern #2 is pattern #3 composed with
a two-flip, and pattern #10 is pattern #9 composed with a three-cycle
of edges.

There are four elements of M used to perform the reorientation of the
reassembled patterns.  Over half of them use the order-3
major-diagonal rotation, of Plummer's cross: patterns 1, 3, 4, 6, 7,
9, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 31, and
32.  Several use the order-2 major-diagonal rotation, of Christman's
cross: patterns 5, 8, 14, 20, 26, 28, and 29.  The only pattern
reassembled by the major diagonal reflected rotation is the order-6
6-X, pattern 33, And the only pattern reassembled by central
reflection is Pons Asinorum, pattern 34.

I've also classified these patterns by the glyph that appears on the
faces (modulo my clerical errors).  Patterns I know traditional names
for are given with an asterisk; I've made up temporary descriptive
names otherwise.

 Glyph  Type  Patterns

 X . X        2. Girdle 3-cycle, distorted
 X X X   01   3. Girdle 3-cycle
 X X X

 X . X        8. Christman's girdle
 . X X   02   9. Off-girdle 3-cycles
 X X X       10. Off-girdle 3-cycles, distorted
             11. Girdle 3-cycles

 X . X
 . X X   03  21. Plummer's C's
 X . X

 X . X       32. Plummer's X
 . X .   04  33. Order-6 X
 X . X       34. * Pons Asinorum


 . X X
 X X X   10   1. * Meson
 X X X
 
 . X X
 X X .   11   7. Meson & girdle 3-cycle
 X X X

 . . X       13. Plummer's cluster
 . X X   12  14. Christman's cluster
 X X X

 . X X
 X X .   12  16. Meson & girdle 3-cycles
 X . X

 X . X
 X X .   13  24. Plummer's Y's
 X . .

 . . X       25. Plummer's cluster & girdle 3-cycles
 . X .   14  26. Christman's cluster & girdle
 X . X       

 . X .
 X X X   30  15. Plummer's rabbits
 . X X

 . X X
 . X X   31  22. Plummer's P's
 . X .

 X X .
 X X .   32  23.  * Cube in a cube
 . . .

 . X .       29. Christman's arrow
 X X .   32  30. Plummers's arrow
 . . X

 X . .
 . X X   33  16. Plummer's bend
 . . .

 X . .        5. Christman's comma
 . X .   34   6. Plummer's comma  
 . . .

 . X .       27. * Plummer's Cross
 X X X   40  28. * Christman's Cross
 . X .

 . X .
 X X X   41  31. * Four-way street
 . . .

 . X .       18. Plummer's cube out of cube in a cube
 X X .   42  19. * Worm
 . . .       20. Christman's cube out of cube in a cube

 . X .
 . X .   43  12. Plummer's U's
 . . .

 . . .
 . X .   44   4. * Six-spot
 . . .

Dan
Hoey@AIC.NRL.Navy.Mil

From cube-lovers-errors@mc.lcs.mit.edu  Thu Aug 14 18:29:06 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id SAA12833; Thu, 14 Aug 1997 18:29:05 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From reid@math.brown.edu Thu Aug 14 18:19:32 1997
Message-Id: <199708142216.SAA16395@life.ai.mit.edu>
Date: Thu, 14 Aug 1997 18:21:24 -0400
From: michael reid <reid@math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: patterns with 24-fold symmetry

i've finished computing minimal maneuvers for those positions with
24-fold symmetry.  these positions were classified by dan hoey and
jim saxe in their note "symmetry and local maxima."  there are 24
such positions; they form an abelian subgroup of type 6, 2, 2.
we may take as generators  superfliptwist, pons asinorum, and 6 H's.
of these 24 positions, 4 have 48-fold symmetry; i'll include these
here as well.  the other 20 positions occur in 10 pairs which differ
only in orientation; i.e. there are 10 "patterns".

some of these maneuvers were found earlier by others; i'll acknowledge
this to the extent that i'm aware of it.  in addition, most maneuvers
were found by kociemba's algorithm, and a few by my optimal solver,
which is based on the same ideas.


positions with 48-fold symmetry

start  (0q, 0f)  no turns needed

superflip
 R' U2 B  L' F  U' B  D  F  U  D' L  D2 F' R  B' D  F' U' B' U  D'  (24q)
 U  R2 F' R  D' L  B' R  U' R  U' D  F' U  F' U' D' B  L' F' B' D' L' (24q)

 U  R2 F  B  R  B2 R  U2 L  B2 R  U' D' R2 F  R' L  B2 U2 F2   (20f)
 U  R2 F  B  R  B2 R  U2 L  B2 R  U' D' R2 F  D2 B2 U2 R' L    (20f)
dik winter was the first to find a 20f maneuver.


pons asinorum
 U2 D2 F2 B2 R2 L2  (12q, 6f)

 F  B' U2 D2 R2 L2 F  B'  (12q)
 F  B' U' D  F  B' U' D  F  B' U' D   (12q)
this last maneuver is due to dan hoey.


pons asinorum composed with superflip
 B' D' L' F' D' F' B  U  F' B  R2 L  U  D' F  L  U  R  D   (20q, 19f)

 F' U' B' R' F  R  L' D' R  L' U  D' L' U  D' F  R  B  U  F   (20q)
 B' R' F' U' F  R  L' D' R  L' U  D' L' U  D' F  U  F  R  B   (20q)
 B' R' B' D' F  U' D  L' U' D  R  L' U' R  L' F  D  B  R  B   (20q)
 R  U  R  B  R' U' D  F  U' D  F  B' D  F  B' R' B' R' U' R'  (20q)

 U  D  F  R  L' F  B' L  D2 R  L  F' B' U' L2 F  B' U2 L'   (19f)
 U  D  F' B' L' U2 F' B  L2 U' R' L' F' U' D  F' B  D' L2   (19f)
 U2 R  F  U  F  B' L' D' F  B' L  B  R  L' U  D2 B' R' U2   (19f)
 U2 R  F  U2 D' R' L  F' L' F  B' U  L  F  B' D' B' R' U2   (19f)
 U2 R  U2 D2 R  U' L' U  B  R  F2 U' D  B' R' F' D  B' L2   (19f)
jerry bryan found the 20q maneuvers.


positions with 24-fold symmetry

superfliptwist
 U  R  F' B  U' D' F  U' D  F  L  F' L' U  R  D  F  U  R  L   (20q, 20f)
herbert kociemba was the first to find a 20f maneuver.

supertwist
 U  R' B  D  B  U  L  D  B' D2 R  U' F  L  F  R  D  L  F' L2  (22q)
 B' L2 U  D  R2 B' D2 F2 D' R2 F  B  L2 D' B2 U2  (16f)
dik winter first found the 16f maneuver.

6 H's
 D2 L2 B2 U2 D2 B2 R2 D2  (16q, 8f)
jim saxe found this maneuver.

superflip composed with 6 H's
 U  F' L' F' B  U  R  F' B  U' B' U  D' R2 L' B  U'  (18q, 17f)

superfliptwist composed with pons asinorum
 U  F  B  D  R  L  U' F2 B2 R  L  D' F  B  D  R  L  D  F' B'  (22q, 20f)
dik winter was the first to find a 20f maneuver.

supertwist composed with pons asinorum
 F  L  D  F  U' B2 R  F  R' F' R  F  L2 U' R  D  B  R   (20q)
 B2 L  U2 F' B' U2 R' F2 L2 F' U2 R' L' U2 B  R2  (16f)

superfliptwist composed with 6 H's  (type 1)
 U  F  B  U' R  L  U  F  B  R2 L2 D' F  B  U' R  L  D' R' L'  (22q, 20f)
superfliptwist composed with 6 H's  (type 2)
 inverse of type 1

supertwist composed with 6 H's   (type 1)
 U2 L  U  B  D  L  U  B' R' L' F' D  R  U  F  D  L' U2  (20q)
 L' B2 U' D' B2 R' U2 L2 U  B2 R  L  F2 U  R2 U2  (16f)
supertwist composed with 6 H's   (type 2)
 inverse of type 1


some of these maneuvers have some symmetry.  i find the maneuver for
superfliptwist composed with pons asinorum especially interesting.
it is composed of: twists of the  U  or  D  face, and antislices
along the R-L and F-B axes:

     U (FB) D (RL) U' (F2B2) (RL) D' (FB) D (RL) D (F'B')

therefore, when we conjugate this maneuver by the cube rotation  C_U2,
we get the same maneuver!  the maneuver for superfliptwist composed with
6 H's has the same type of symmetry.

mike

From cube-lovers-errors@mc.lcs.mit.edu  Fri Aug 15 18:58:41 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id SAA18159; Fri, 15 Aug 1997 18:58:41 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From Hoey@AIC.NRL.Navy.Mil Fri Aug 15 19:00:35 1997
Date: Fri, 15 Aug 1997 19:00:26 -0400
Message-Id: <199708152300.TAA04077@sun30.aic.nrl.navy.mil>
From: Dan Hoey <Hoey@aic.nrl.navy.mil>
To: reid@math.brown.edu
Cc: cube-lovers@ai.mit.edu
In-Reply-To: <199708142216.SAA16395@life.ai.mit.edu> (message from michael
	reid on Thu, 14 Aug 1997 18:21:24 -0400)
Subject: Re: patterns with 24-fold symmetry

Mike Reid writes:

> i've finished computing minimal maneuvers for those positions with
> 24-fold symmetry.  these positions were classified by dan hoey and
> jim saxe in their note "symmetry and local maxima."  there are 24
> such positions; they form an abelian subgroup of type 6, 2, 2.

It took me a while to understand that.  For the benefit of other
cube-lovers, since any finite Abelian group can be decomposed into a
direct product of cyclic groups, it can be typified by listing the
orders of its factors.

> we may take as generators  superfliptwist, pons asinorum, and 6 H's.
> of these 24 positions, 4 have 48-fold symmetry; i'll include these
> here as well.  the other 20 positions occur in 10 pairs which differ
> only in orientation; i.e. there are 10 "patterns".

It may be better to take the order-6 generator to be one of the
6-H-supertwists.  Then you can tell the M-symmetric positions because
they project to the identity of the 6-factor.  Writing p, f, t, h for
pons, superflip, supertwist, and 6-H, I get the following table of
positions (suffixed with optimal qtw:ftw).

        i          p          f            fp
      ...............................................
    i : i    0:0   p   12:6   f    24:20   fp   20:19
      :
   th : th  20:16  th' 20:16  fth  22:20   fth' 22:20
      :
    t : t   22:16  pt  20:16  ft   20:20   fpt  22:20
      :
    h : h   16:8   h   16:8   fh   18:17   fh   18:17
      :
    t : t   22:16  pt  20:16  ft   20:20   fpt  22:20
      :
   th': th' 20:16  th  20:16  fth' 22:20   fth  22:20

The last two rows could be omitted, just as the last column could be
with your decomposition:

        i          h            p          h
      ...............................................
    i : i   0:0    h    16:8    p   12:6   h    16:8
      :
   ft : ft 20:20   fth  22:20   ftp 22:20  fth' 22:20
      :
    t : t  22:16   th   20:16   tp  20:16  th'  20:16
      :
    f : f  24:20   fh   18:17   fp  20:19  fh   18:17
      :
    t : t  22:16   th'  20:16   tp  20:16  th   20:16
      :
   ft : ft 20:20   fth' 22:20   ftp 22:20  fth  22:20

This has the advantage of having patterns on each row nearer each
other.

By the way, this isn't a complete list of optimal maneuvers, is it?
Are you looking to find such a list?  Or would it be too difficult (or
too voluminous)?

And I'm looking forward to seeing optimal maneuvers for the
T-symmetric positions (if I'm not being too presumptuous).

Dan
Hoey@AIC.NRL.Navy.Mil

From cube-lovers-errors@mc.lcs.mit.edu  Mon Sep  8 09:47:22 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id JAA07291; Mon, 8 Sep 1997 09:47:22 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From kociemba@hrz1.hrz.th-darmstadt.de Sun Sep  7 17:51:08 1997
Message-Id: <3411D734.6471@hrz1.hrz.th-darmstadt.de>
Date: Sun, 07 Sep 1997 00:20:36 +0200
From: Herbert Kociemba <kociemba@hrz1.hrz.th-darmstadt.de>
To: cube-lovers@ai.mit.edu
Subject: Number of maneuvers with n face turns

The number of maneuvers with 1, 2, 3,.. face turns for Rubik's cube are
of course well known and are 18, 243, 3240... But I did not see a closed
formula for these numbers before, so maybe you find the following
formula interesting:

Let r:= sqrt(6), then you have with n face turns

P(n) = [(3+r)*(6+3r)^n + (3-r)*(6-3r)^n]/4

maneuvers.  Because the second part in brackets is much smaller than the
first, asymptotically you have

(3+r)*(6+3r)^n /4 maneuvers.

Even for small n, this approximation is very good. So for n=3 you get
3240.33 instead of 3240. The asymptotic branching factor P(n+1)/P(n) is
therefore (6+3r), which is about 13.348469 .

Herbert

From cube-lovers-errors@mc.lcs.mit.edu  Wed Oct  1 20:02:37 1997
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id UAA28462; Wed, 1 Oct 1997 20:02:36 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From randall@theory.lcs.mit.edu Wed Oct  1 19:49:18 1997
Date: Wed, 1 Oct 1997 19:46:08 -0400
Message-Id: <199710012346.TAA06162@hemp>
From: Keith H Randall <randall@theory.lcs.mit.edu>
To: reid@math.brown.edu
Cc: cube-lovers@ai.mit.edu
In-Reply-To: <199710012120.AA25636@theory.lcs.mit.edu> (message from michael
	reid on Wed, 1 Oct 1997 17:19:02 -0400)
Subject: Re: God's Number

   Don Dailey, Aske Plaat, and myself have a program that will do a
complete 22-ply search in about 24 hours on an 8 processor Sun
machine.  The program measures distance in the QT (quarter-turn)
metric.

I've run some experiments on random cubes, summarized as follows:

112 random odd cubes:
20   depth 19
92   depth 21

57 random even cubes:
41   depth 20
16   depth 22

>From this random sample, it seems as if less than 1% of cubes are
depth 23, let alone more than depth 24.  In fact, the only depth 23
cubes I know of so far are the twelve cubes 1 move away from the
superflip.  This fact gives some evidence that God's number is
probably 24.

By the way, below are solutions and depths for all of the symmetric
cubes enumerated by Hoey and Saxe in their message of Sun, 14 Dec 80.
These are obvious cubes to try because they are local maxima, and they
are all depth 22 or less except for the superflip.  Only one
representative from each of the 26 conjugacy classes is given.  All
solutions were obtained from the program, except for the superflip
solution which is absconded from a post from Reid on Tue, 10 Jan 95.
All depths are exact minimal depths, i.e. no shorter solutions exist.

M-symmetric cubes
0	solved
		--
12	pons asinorum
		F F B B L L R R U U D D
24	superflip
		R' U U B L' F U' B D F U D' L D D F' R B' D F' U' B' U D'
20	pons asinorum * superflip
		F' U' B' R' F R L' D' R L' U D' L' U D' F R B U F

T-symmetric cubes
22	girdleflip
		F F U F F B' U R' L B U F D' F F B D' R L' B' D' F
19	girdleswap
		F U F R U' L' U' B U' B' R' F' R' L' F' R L L F'
21	girdleflip * girdleswap
		F U' L U F' U' B B D B U B' D' R D' R' B' R' D R B'
22	girdleflip * pons asinorum
		F F U L F L' D' R L' U' L L U U R F' B D' F' U R' D'
17	girdleswap * pons asinorum
		F R F B R' F' B' L D D F F D D R' L' F'
21	girdleflip * girdleswap * pons asinorum
		F R' L B R U' R R U' D F' R F' B L B R' F B' U' L'
20	girdleflip * superflip
		F U U F' R' U' L F' D F B' L U' L U' F' L U D' F
21	girdleswap * superflip
		F R F B U D' F' B R R U F B D' R L D' F' B' U F
21	girdleflip * girdleswap * superflip
		F U D B' R' F' D' R' U R' L' B R F U F D B D L' B'
20	girdleflip * pons asinorum * superflip
		F F B R' F U' B' R' L D L U' R' U' D F L B' D F
21	girdleswap * pons asinorum * superflip
		F U U B D' L' U F F B R' U R B U D' L B U D' L
21	girdleflip * girdleswap * pons asinorum * superflip
		F B U F' U' F R B' R' F' U R' U F B U' F' B' U R U'

H-symmetric cubes
22	plummer
		F F R B' U L U R F L U' L L B R' D F D B L F D'
16	six-H
		F F R R F B' R R L L F' B R R B B
20	plummer * six-H
		F F U F' R' B' D' F' R U D L B' U' F' L' B' U' F F
20	plummer^2 * six-H
		F F U F R B U F R' U' D' L' B D F L B U' F F
20	plummer^2 * pons asinorum
		F R U F D' B B L F L' F' L F R R D' L U B L
20	plummer^2 * superflip
		F B U F R L' U' D' L U' D L B L' B' U F D L U
18	six-H * superflip
		F R' U D D F' B R F R' L D' F' R' L U L F'
22	plummer * six-H * superflip
		F U D F' R L F U D R R L L B' U D F' R L B' R' L
22	plummer^2 * six-H * superflip
		F B U F' B' D R' L' U F F B B R' L' D' F' B' D R' L' D'
22	plummer * pons asinorum * superflip
		F B R' U' D' R' F' B' R U' D' F F B B L U' D' R' F' B' L'

reference for cube names:
pons asinorum
        W B W
        B W B
        W B W

O R O   G Y G   R O R   Y G Y
R O R   Y G Y   O R O   G Y G
O R O   G Y G   R O R   Y G Y

        B W B
        W B W
        B W B

superflip
        W Y W
        O W R
        W G W

O W O   G W G   R W R   Y W Y
Y O G   O G R   G R Y   R Y O
O B O   G B G   R B R   Y B Y

        B G B
        O B R
        B Y B

plummer
        Y W Y
        W W W
        G W G

W O W   O G R   W R W   R Y O
O O O   G G G   R R R   Y Y Y
B O B   O G R   B R B   R Y O

        G B G
        B B B
        Y B Y

six-H
        W W W
        B W B
        W W W

O O O   G Y G   R R R   Y G Y
R O R   G G G   O R O   Y Y Y
O O O   G Y G   R R R   Y G Y

        B B B
        W B W
        B B B

girdle flip (about ULF-DRB axis)
        W Y W
        W W R
        W W W

O O O   G G G   R W R   Y W Y
Y O O   G G R   G R R   Y Y O
O B O   G B G   R R R   Y Y Y

        B G B
        O B B
        B B B

girdle swap (about ULF-DRB axis)
        R B B
        W W B
        W W Y

B O O   G G B   O O G   O G G
R O O   G G Y   O R R   Y Y G
R R Y   R Y Y   W R R   Y Y W

        W W O
        W B B
        G B B


                                        -Keith

From cube-lovers-errors@mc.lcs.mit.edu  Tue Jan 13 13:12:03 1998
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun30.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.1/mc) with SMTP
	id NAA00779; Tue, 13 Jan 1998 13:12:02 -0500 (EST)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From cube-lovers-request@life.ai.mit.edu Mon Jan 12 23:26:33 1998
Date: Mon, 12 Jan 1998 23:25:18 -0400 (EDT)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Face Turns Nine Moves from Start
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.95.980112230236.123792A-100000@PSTCC6.PSTCC.CC.TN.US>

I have some new search results for the face turn metric.  Here is a
summary of the new search.

Face Turns     Patterns  Positions    Branching    Positions/
from Start                               Factor     Patterns

	0             1           1                    1.000
	1             2          18      18.000        9.000
	2             9         243      13.500       27.000
	3            75        3240      13.333       43.200
	4           934       43239      13.345       46.294
	5         12077      574908      13.296       47.604
	6        159131     7618438      13.252       47.875
	7       2101575   100803036      13.231       47.965
	8      27762103  1332343288      13.217       47.991
	9     366611212 17596479795      13.207       47.998


The results at 8f and 9f from Start are new.  Previously, the face turn
metric had only been searched through 7f from Start.  All the results in
terms of patterns (M-conjugacy classes) are new.  Previously, the face
turn metric had been searched only in terms of positions.

Note that the branching factor does not change very much.  We already know
(or strongly suspect by statistical arguments based on the results of
Kociemba, Winter, Reid, and Korf) that it cannot change much this close to
Start.  Otherwise, the mode of the distribution would be greater than the
18f which is strongly suspected to be the case.

I have not yet installed the logic to detect weak local maxima.  The logic
to detect strong local maxima is installed with an interesting result. Two
patterns were detected at 9f from Start which are strong local maxima.
Regrettably, I have no idea what they are.  I will have to add something
to the program to print out strong local maxima when they are detected.
All I know is that the patterns are at least "somewhat symmetric" in that
they collectively represent only 32 positions.

I have begun to suspect that strong local maxima are fairly rare in the
face turn metric.  Recall that a strong local maximum is one where all 18
face turns carry the cube closer to Start.  A weak local maximum, by
contrast, is a local maximum where at least one face turn leaves the cube
the same distance from Start.  If I have not made a mistake in analyzing
them (which is entirely possible), the only one of Mike Reid's "highly
symmetric" positions which is a strong local maximum is superflip.  Even
Pons Asinorum is not a strong local maximum.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7198
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990

From cube-lovers-errors@mc.lcs.mit.edu  Fri Jul 10 12:57:34 1998
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun28.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.8/mc) with SMTP
	id MAA06279; Fri, 10 Jul 1998 12:57:33 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From cube-lovers-request@life.ai.mit.edu Fri Jul 10 08:48:35 1998
Date: Fri, 10 Jul 1998 08:48:05 -0400 (Eastern Daylight Time)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: Ten Face Moves from Start
To: cube-lovers@ai.mit.edu
Message-Id: <Pine.WNT.3.96.980710083950.-3929923B-100000@GN209A.PSTCC.CC.TN.US>

Face Moves          Patterns       Positions   Branching   Positions/
   from                                           Factor     Patterns
   Start

      0                     1               1                 1.0
      1                     2              18     18          9.0
      2                     9             243     13.5       27.0
      3                    75            3240     13.333     43.2
      4                   934           43239     13.345     46.294
      5                 12077          574908     13.296     47.604
      6                159131         7618438     13.252     47.875
      7               2101575       100803036     13.231     47.965
      8              27762103      1332343288     13.217     47.991
      9             366611212     17596479795     13.207     47.998
     10            4838564147    232248063316     13.199     47.999


This run took about three weeks on a Pentium 300.  The next level from
Start is going to be difficult.  With the current algorithm and
hardware, it would take about thirty to forty weeks.  In addition, the
memory requirements will go up considerably.  Currently, I store only
the positions up to five moves from Start in memory.  To calculate the
next level, I will have to store the positions up to six moves from
Start.

I still suggest (see "How Big is Big?" in the archives) that the problem
can be calculated all the way to the bitter end, eventually.  The Cube
problem simply is not as big as, for example, Chess or Go.

As a possible strategy, if we could add one level per decade, we could
probably calculate the problem all the way to the end within about 100
years. Moore's Law (the power of computers doubles about every eighteen
months) suggests that such a schedule might be possible.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us
Pellissippi State                            (423) 539-7198
10915 Hardin Valley Road                     (423) 694-6435 (fax)
P.O. Box 22990
Knoxville, TN 37933-0990

From cube-lovers-errors@mc.lcs.mit.edu  Sun Aug  2 17:46:24 1998
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun28.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.8/mc) with SMTP
	id RAA08130; Sun, 2 Aug 1998 17:46:24 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Mail-from: From cube-lovers-request@life.ai.mit.edu Sun Aug  2 08:47:54 1998
Date: Sun, 2 Aug 1998 08:47:44 -0400
From: michael reid <reid@math.brown.edu>
Message-Id: <199808021247.IAA08734@cauchy.math.brown.edu>
To: cube-lovers@ai.mit.edu
Subject: superflip  composed with  four spot

with my new optimal solver, i can show that the position

     superflip  composed with  four spot

is exactly 26 quarter turns from start.  this gives a new lower bound
for the diameter of the cube group.  the previous lower bound, 24q, was
from the position superflip, and was first established by jerry bryan.

let  F2 B2 U  D' R2 L2 U  D'  be our choice of orientation of
four spot.  although four spot is not central, the position

     F2 B2 U  D' R2 L2 U  D'   C_U2

moves only face center cubies:  (F, B) (R, L).  (here  C_U2  denotes
whole cube rotation by 180 degrees about the U-D axis.)  since quarter
turns do not move face center cubies, we see that the sequence above
commutes with any sequence of quarter turns.  the same is also true
for
     superflip . four spot . C_U2

in terms of singmaster's fixed face model, this means that we can
cyclically shift a maneuver for superflip composed with four spot,
but the part that is cyclically shifted gets conjugated by the cube
rotation  C_U2.  for example:

(B  U2 L) (U' D  L2 F2 R2 B  U2 R' L' D  R2 D  F2 U  R2 D  B)

creates this position.  if we cyclically shift the first three twists
to the end, we get another maneuver for this position:

(U' D  L2 F2 R2 B  U2 R' L' D  R2 D  F2 U  R2 D  B) (F  U2 R)

this observation about cyclic shifting enables us to prove

proposition 1.  superflip  composed with  four spot  is a local
                maximum in the quarter turn metric.

proof.  we need to show that any quarter turn takes us closer to
        start.  the 12 different twists split up into two different
        types under the symmetry of this position:  {U, U', D, D'}
        and {R, R', F, F', L, L', B, B'}.  we claim that any maneuver
        for superflip composed with four spot must contain twists of
        both types.  a maneuver consisting only of twists in
        {U, U', D, D'} clearly cannot produce this position.  also,
        a maneuver consisting only of twists in
        {R, R', F, F', L, L', B, B'} cannot flip any edges.  thus
        both twist types must occur.  now consider a minimal
        maneuver for superflip composed with four spot.  we may
        cyclically shift (and apply symmetry) so that the last twist
        is  U'.  thus, applying  U  cancels this last twist and
        brings us closer to start.  similarly, we can cyclically shift
        to get a minimal maneuver ending with  R', so applying  R
        also brings us closer to start.  since any twist is equivalent
        to  U  or  R , we have proved local maximality.     qed

the significance of this proposition is that this is the first case
beyond the hoey-saxe local maxima in which we can prove local
maximality without computer searching.  (please correct me if i'm
wrong about this.)

dan hoey noted (a long time ago) that the position  four spot  is a
local maximum.  however, i don't see that this can be proved without
computer search.  the sticking point is that four spot can be achieved
using only {R, R', F, F', L, L', B, B'}.  however, no minimal maneuver
consists only of these twists, a fact determined by computer search.

similar to the transformations for superflip, we have three
transformations to apply to maneuvers for superflip composed with
four spot.

     we may conjugate by any of the 16 cube symmetries that fix
     the U-D axis.
     we may cyclically shift the maneuver, as described above.
     we may invert the maneuver.

proposition 2.  by using the three transformations above, any maneuver
                for superflip composed with four spot can be transformed
                into one that begins with one of the six sequences

                R  U          R' U  D        R' U  F'
                R' U  R'      R' U  B'       R' U  L'

proof.  as shown in prop. 1, any sequence for superflip composed with
        four spot contains both types of twists.  thus, the two types
        occur as consecutive twists.  by cyclic shifting, and applying
        symmetry, we may suppose that the first two quarter turns are
        either  R U  or  R' U.  (this would already be enough reduction
        for my program).  we can cut down the case  R' U  further.
        there are eleven possibilities for the third quarter turn;
        only  U'  is not allowed.  the case  R' U U = R' U2  is
        equivalent under symmetry to  R U2, which is part of the case
        beginning with  R U.  the case  R' U D'  is equivalent under
        symmetry to  R D' U = R U D', again part of the case beginning
        with  R U.  the case  R' U B  inverts to  B' U' R, and this is
        equivalent to  R U B', which is part of the case beginning with
        R U.  similarly, the cases beginning with  R' U R ,  R' U F
        and  R' U L  invert to  R U R' , R U F'  and  R U L',
        respectively.  this leaves only the sequences listed above.  qed

my program exhaustively searched the positions

     superflip. four spot . R  U    through 22q  and

     superflip. four spot . R' U  D   \
     superflip. four spot . R' U  F'   \
     superflip. four spot . R' U  R'    >  all through 21q
     superflip. four spot . R' U  B'   /
     superflip. four spot . R' U  L'  /

and found no maneuvers.  thus  superflip  composed with  four spot
requires more than 24 quarter turns.  the total search time was about
153 hours.  to see that  superflip  composed with  four spot  can be
achieved in 26 quarter turns, use

U2 D2 L  F2 U' D  R2 B  U' D' R  L  F2 R  U  D' R' L  U  F' B'  (26q*, 21f)

it might be reasonable to ask for all 26q maneuvers.  this is probably
out of reach for now.  however, i suspect that there will be so many
different 26q maneuvers that it would not be of much use to see a long
list of maneuvers.  (i have a bunch already.)

superflip  composed with  four spot  also requires 20f.

proposition 3.  any maneuver for superflip  composed with  four spot
                of length <= 20f can be transformed to one that begins
                with one of the sequences   U2 R ,   R2 F  or   R2 U .

the proof is very similar to the reductions for superflip in the face
turn metric.

using this, a complete search for 20f maneuvers is straightforward.
there are two inequivalent 20f maneuvers for superflip composed with
four spot:

F  U2 R  L  D  F2 U  R2 D  F2 D  F' B' U2 L  F2 R2 B2 U' D   (20f*, 28q)
F  U2 R  L  D  F2 U  R2 D  F2 D  F' B' U2 L  U' D  R2 B2 L2  (20f*, 28q)

this also shows that no maneuver is simultaneously minimal in both
metrics.

mike

From cube-lovers-errors@mc.lcs.mit.edu  Fri Oct 30 14:17:00 1998
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun28.aic.nrl.navy.mil by mc.lcs.mit.edu (8.8.8/mc) with SMTP
	id OAA18032; Fri, 30 Oct 1998 14:16:59 -0500 (EST)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Date: Mon, 26 Oct 1998 23:58:27 -0400 (EDT)
From: Jerry Bryan <jbryan@pstcc.cc.tn.us>
Subject: 12q From Start
To: Cube-Lovers <cube-lovers@ai.mit.edu>
Message-Id: <Pine.PMDF.3.95.981026235420.29075A-100000@PSTCC6.PSTCC.CC.TN.US>


 |x|     Patterns     Lcl    Positions    Lcl    Branching
                      Max                 Max      Factor


  0q             1     0              1     0
  1q             1     0             12     0    12
  2q             5     0            114     0     9.5
  3q            25     0           1068     0     9.368
  4q           219     0          10011     0     9.374
  5q          1978     0          93840     0     9.374
  6q         18395     0         878880     0     9.366
  7q        171529     0        8221632     0     9.355
  8q       1601725     0       76843595     0     9.347
  9q      14956266     0      717789576     0     9.341
 10q     139629194     4     6701836858    42     9.337
 11q    1303138445     0    62549615248     0     9.333
 12q   12157779067   103   583570100997  2913     9.330

The last time a new level was calculated for the quarter turn metric was 4
February 1995.

The cumulative number of positions now identified is 653625391832, or
about 6.5*10^11.  This is well past the "geometric halfway point"  of
sqrt(|G|), which is about 6.5*10^9.  However, it is known that the
diameter of G is at least 26q, strongly indicating that there is a bit of
a tail to the distribution of positions by length.

Of the 103 local maxima of length 12q, 70 of them also have their inverse
as local maxima.  For the other 33, the inverse is not a local maximum.
For one of them, the inverse has 11 moves which go closer to Start.  For
seven of them, the inverse has 10 moves which go closer to Start.  For
eleven of them, the inverse has 8 moves which go closer to Start.  For six
of them, the inverse has 6 moves which go closer to Start.  For two of
them, the inverse has 4 moves which go closer to Start.  And for six of
them, the inverse has only 2 moves which go closer to Start.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Robert G. Bryan (Jerry Bryan)                jbryan@pstcc.cc.tn.us

From cube-lovers-errors@mc.lcs.mit.edu  Tue Sep 28 12:32:22 1999
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun28.aic.nrl.navy.mil (sun28.aic.nrl.navy.mil [132.250.84.38])
	by mc.lcs.mit.edu (8.9.1a/8.9.1-mod) with SMTP id MAA21564
	for <cube-lovers-outbound@mc.lcs.mit.edu>; Tue, 28 Sep 1999 12:32:22 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Message-Id: <19990923162848.24944.rocketmail@web126.yahoomail.com>
Date: Thu, 23 Sep 1999 09:28:48 -0700 (PDT)
From: Jaap Scherphuis <jaapsch@yahoo.com>
Reply-To: jaap@org2.com
Subject: Square 1, Pyramorphix, Cheap Skewballs
To: Cube Lovers <Cube-Lovers@ai.mit.edu>


Hi all,
This is my first post to Cube-Lovers, though I have been reading the archives
for a long time now. I'm a 27 year-old mathematician.

Re: Square-1
A few years ago I figured out a solution to the Square-1. It was one of the
hardest puzzles to solve. Though I did theoretically solved it, the solution
was so long and tedious I never actually performed it. In the end I wrote a
program that searched for short sequences that go from cube shape to cube shape
that do not move the corners. In the list it produced were a few useful
sequences moving only a few edges, but all the odd permutations moved a lot of
edges. By combining one of them with some other sequences I finally got my own
parity fixing sequence that is a nice triple edge swap:

Swap FU-BU, LU-RU, FD-BD:
      /(3,3)/(1,2)/(2,-4)/(-2,4)/(-1,1)/(3,3)/(0,3)/(3,3)/(0,3)/(6,0)/(6,0)/

The notation is fairly obvious: /=half turn of right hand side, (t,b)=move
top/bottom the given number of twelfths clockwise, negative for anti-clockwise.
I find this much easier to read than any others I've seen, though it is
sometimes easy to forget the leading / if there is one.

Unfortunately I have since lost any other results I got then except for those I
have incorporated into my solution.

The square-1 solving program Matt mentioned can be found in the cube-lovers
archive in the contrib directory.


Re: my webpages
I have recently typed up a lot of my notes and put them on the web in a
text-only preliminary form. Eventually I hope to make them into proper
web-pages with pictures etc.
There are solutions there for:
Alexander's Star, Pocket Cube (2x2x2), Rubik's Cube (3x3x3), Rubik's Revenge
(4x4x4), Profesor's Cube (5x5x5), Dogic, Domino, Impossiball, Megaminx,
Octahedron, Pyraminx, Pyramorphix, Skewb, Brain ball, Rubik's Fifteen, Equator,
It, Ivory Tower (Babylon Tower), Masterball, Orb, Puck, Roundy, Square One,
Topspin, Tower (Whip-It), Rubik's Triamid, Tricky Disky, Rubik's Clock, Lights
Out, Rubik's Magic, Spinout, Crazy Tantrix.
At the moment there is not yet a links page.

You can find it here: http://www.org2.com/jaap/puzzles
I'd appreciate any feedback.


Re: Pyramorphix.
I only have the pocket Pyramorphix, and these are delicate (my first one broke
within 5 minutes). The pieces have small feet which slide through grooves in a
ball. The grooves are formed between 8 triangular pieces which are screwed onto
the ball. By pushing a small screwdriver through at a point where 4 pieces come
together you can unscrew it. It may work best if you bring the 4 flat pieces
together and use the spot between them to unscrew it.


Re: Cheap Skewballs.
This week I bought several cheap puzzleballs at the Oxford Toys'r'Us, all of
the France '98 type.  I bought the last two keychain ones (1 uk pound each),
and a couple of normal sized ones (2 uk pounds each). They still have many of
those.
I plan to paint them with diffent designs, e.g.
dodecahedron/icosahedron/octahedron, or rather the spherical projections of
these shapes.

That's all for now.
Bye,
Jaap.


=====
Jaap Scherphuis
Visit the Psion Organiser II CM, XP & LZ Homepage:
URL: http://www.org2.com      email: jaap@org2.com

From cube-lovers-errors@mc.lcs.mit.edu  Tue Oct 12 20:07:12 1999
Return-Path: <cube-lovers-errors@mc.lcs.mit.edu>
Received: from sun28.aic.nrl.navy.mil (sun28.aic.nrl.navy.mil [132.250.84.38])
	by mc.lcs.mit.edu (8.9.1a/8.9.1-mod) with SMTP id UAA21764
	for <cube-lovers-outbound@mc.lcs.mit.edu>; Tue, 12 Oct 1999 20:07:11 -0400 (EDT)
Precedence: bulk
Errors-To: cube-lovers-errors@mc.lcs.mit.edu
Date: Mon, 4 Oct 1999 18:47:12 -0400 (EDT)
From: Daniel B Knights <knights@panther.middlebury.edu>
To: Cube-Lovers@ai.mit.edu
Subject: 3-Cube in 1 One-Look
Message-Id: <Pine.A41.4.02.9910041844460.182270-100000@puma.middlebury.edu>

Hi all, I'm new to this list, and new to the cube as well - only got my
first one in March.
Of course, now it doesn't leave my side.

I have seen a few Cube-Lovers emails about solving the cube in a minimum
number of looks. Here is a system that I use to solve the cube in 1 look,
with 10-25 minutes of studying time. (Please excuse my lack of knowledge
of terminology/group theory.)
_________________________________________________

When most people solve the cube they do it by decomposing the whole
problem into successively more specific subgroups. (e.g. first layer
edges, first layer corners, second layer edges, etc.) I say "successively
more specific" because the moves someone would use to position the first
few pieces are very simple and intuitive, usually changing (but not
solving) the unsolved pieces in the cube. As one approaches the solved
state, one uses much more specialized algorithms that affect only the
remaining unsolved pieces.

For "multiple-look" purposes, this is a great approach. Often the smaller
the subgroup of pieces affected by an algorithm, the larger the number of
moves in that algorithm, and since there is usually no perceived order to
the unsolved pieces, there is no benefit to preserving them with lengthy
specialized moves.

To a person visualizing an entire solution in his or her head, however,
these types of moves are very expensive in terms of memory. Instead I
begin from the start using specialized moves that affect as little of the
cube as possible. I might start off with an algorithm to permute 3 corners
(hopefully putting at least two of them in the correct place/orientation)
while leaving the other 5 corners and all 12 edges untouched.

In fact, by the time I have all of the corners solved, the edge pieces are
in exactly the same random configuration as when I started! (with the
possible exception of having interchanged exactly 2 of them.) The solution
has then been decomposed into 2 nearly independent problems.  The moves I
use are mostly single-layer permutations with
some commutators mixed in when necessary.

One can get the corners solved after applying 5 or 6 move sequences, and
then solve the edges with an additional 7 or 8 sequences. (This has
nothing to do with the number of moves used to solve the cube. In fact,
when I solve it with my eyes closed, I average 150-200 moves!)
_____________________________________________________

The Rules:
I would consider it cheating to use a pen and paper. Basically, you have
to sit down with a random cube and look at it for a while without
manipulating it. Then close your eyes and start solving. When you next
open them, it should be solved. (You don't get to "practice" the moves
before you go.)
_____________________________________________________

So, has anyone else tried this?  I'm curious to know what method someone
else uses.  I use my 15 minutes of studying time to plan out where I'm
going to need to move the pieces.  I wonder if anyone with better memory
skills can just memorize the locations of all the pieces and then work out
the entire solution with their eyes closed.

Dan Knights
Middlebury College
http://www.middlebury.edu/~knights/

