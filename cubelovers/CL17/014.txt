From mouse@collatz.mcrcim.mcgill.edu  Mon Sep 25 07:07:11 1995
Return-Path: <mouse@collatz.mcrcim.mcgill.edu>
Received: from Collatz.McRCIM.McGill.EDU by life.ai.mit.edu (4.1/AI-4.10) for /com/archive/cube-lovers id AA27224; Mon, 25 Sep 95 07:07:11 EDT
Received: (root@localhost) by 3544 on Collatz.McRCIM.McGill.EDU (8.6.12 Mouse 1.0) id HAA03544; Mon, 25 Sep 1995 07:06:43 -0400
Date: Mon, 25 Sep 1995 07:06:43 -0400
From: der Mouse <mouse@collatz.mcrcim.mcgill.edu>
Message-Id: <199509251106.HAA03544@Collatz.McRCIM.McGill.EDU>
To: boland@sci.kun.nl
Subject: Re: Order problems
Cc: cube-lovers@ai.mit.edu

>> I would be curious to hear how you are doing your search.  [...]
> I use a simple brute-force method, that is, I compute the order of
> each transform and the number of quarter turns.  If there is already
> a transform with that order & number of qt, I forget all about it and
> go to the next transform.

This sounds to me as though you're assuming that all transforms with a
given order are equivalent as far as deriving further transforms of
other orders go.  That is, if you find that a given transform X of
length L has order N, it sounds as though you're assuming that there is
no need to store any other transforms of length L and order N.  I'm not
convinced this is justified.  If you've found X of (say) length L and
order N, and then find a different Y of length L and order N, I can't
see any justification for the assumption that you can prune the entire
subtree below Y, because if the cycle decompsition of Y is different
from that of X, they may behave entirely differently when followed by
more twists, even though they have the same order.

					der Mouse

			    mouse@collatz.mcrcim.mcgill.edu

